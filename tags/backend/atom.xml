<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: BackEnd | Eric's 后花园]]></title>
  <link href="http://shjborage.github.io/tags/backend/atom.xml" rel="self"/>
  <link href="http://shjborage.github.io/"/>
  <updated>2018-12-02T21:05:29+08:00</updated>
  <id>http://shjborage.github.io/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    <email><![CDATA[shjborage@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为 PHP 做单元测试（UnitTest）]]></title>
    <link href="http://shjborage.github.io/blog/2017/03/12/wei-php-zuo-dan-yuan-ce-shi-unittest/"/>
    <updated>2017-03-12T11:16:00+08:00</updated>
    <id>http://shjborage.github.io/blog/2017/03/12/wei-php-zuo-dan-yuan-ce-shi-unittest</id>
    <content type="html"><![CDATA[<p>随便用 Google 百度一下就可以找到这个： <a href="https://phpunit.de/">PHPUnit – The PHP Testing Framework</a></p>

<p>貌似也还有别的类似框架或者自己写 PHP 脚本来完成，但这个就不在我们今天的讨论范围啦。</p>

<h2>Getting Started with PHPUnit</h2>

<h3>Download</h3>

<p>We distribute a <a href="http://php.net/phar">PHP Archive (PHAR)</a> that contains everything you need in order to use PHPUnit. Simply download it from here, make it executable, and put it into your <code>$PATH</code>, for instance:</p>

<p><code>
wget https://phar.phpunit.de/phpunit.phar
chmod +x phpunit.phar
sudo mv phpunit.phar /usr/local/bin/phpunit
phpunit --version
</code></p>

<h3>Code</h3>

<p>```
&lt;?php
class Money {</p>

<pre><code>private $amount;

public function __construct($amount) {
    $this-&gt;amount = $amount;
}

public function getAmount() {
    return $this-&gt;amount;
}

public function negate() {
    return new Money(-1 * $this-&gt;amount);
}

// ...
</code></pre>

<p>}</p>

<p>```</p>

<h3>TestCode</h3>

<p>```
&lt;?php
use PHPUnit\Framework\TestCase;</p>

<p>class MoneyTest extends TestCase {</p>

<pre><code>public function testCanBeNegated() {
    // Arrange
    $a = new Money(1);

    // Act
    $b = $a-&gt;negate();

    // Assert
    $this-&gt;assertEquals(-1, $b-&gt;getAmount());
}

// ...
</code></pre>

<p>}</p>

<p>```</p>

<h3>Run</h3>

<p>```
➜  PHPUnitExample git:(master) ✗ phpunit &mdash;bootstrap src/Monkey.php tests/MonkeyTest.php
PHPUnit 5.7.5 by Sebastian Bergmann and contributors.</p>

<p>.                                                                   1 / 1 (100%)</p>

<p>Time: 95 ms, Memory: 8.00MB</p>

<p>OK (1 test, 1 assertion)
```</p>

<p>比较好理解，加载一个类，然后执行相应的单元测试。
<a href="https://github.com/shjborage/PHPUnitExample">PHPUnit 完整例子</a></p>

<p>还要看相应的文档，了解一下高级用法。</p>

<h2>高级用法(TODO)</h2>

<h2>Refs</h2>

<p><a href="https://phpunit.de/getting-started.html">Getting Started with PHPUnit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 开发备忘]]></title>
    <link href="http://shjborage.github.io/blog/2017/03/12/linux-kai-fa-bei-wang/"/>
    <updated>2017-03-12T11:00:00+08:00</updated>
    <id>http://shjborage.github.io/blog/2017/03/12/linux-kai-fa-bei-wang</id>
    <content type="html"><![CDATA[<h2>Terminal 使用相关（Mac 下测试通过）</h2>

<h3><a href="http://blog.csdn.net/kai27ks/article/details/7449610">.bash_profile生效方法</a></h3>

<p><code>
source .bash_profile
exec bash --login
</code></p>

<h3>获取当前时间的unix时间戳</h3>

<p>from: <a href="http://www.jb51.net/LINUXjishu/227114.html">http://www.jb51.net/LINUXjishu/227114.html</a></p>

<p><code>
date +%s
</code></p>

<h3>awk 命令</h3>

<p><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html">http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html</a></p>

<h3>grep 查询日志</h3>

<p><a href="http://www.cnblogs.com/end/archive/2012/02/21/2360965.html">linux grep命令</a></p>

<p><code>
grep -n "xxx" log/xxx.2016xxxxx*
</code></p>

<h3>压缩解压</h3>

<p>```
// unzip
tar -zxvf xxx.gz</p>

<p>// zip a dir
tar -zcvf xxx.gz dirName
```</p>

<h3>Terminal 光标移动</h3>

<p><a href="http://blog.csdn.net/teng_ontheway/article/details/50159891">http://blog.csdn.net/teng_ontheway/article/details/50159891</a></p>

<p><code>
Ctrl + a    // 回行首
Ctrl + e    // 回行尾
</code></p>

<!-- more -->


<h3>端口占用查询</h3>

<p>命令 <code>lsof -i tcp:port</code>（port替换成端口号，比如 6379）可以查看该端口被什么程序占用，并显示PID，方便KILL</p>

<h2>Vim 相关</h2>

<p>控制鼠标模式，目前还是比较适应纯键盘输入。</p>

<p><code>
set mouse=v
</code></p>

<h3>Vim插件体系管理系统</h3>

<p><a href="https://github.com/VundleVim/Vundle.vim">https://github.com/VundleVim/Vundle.vim</a>
<a href="https://github.com/szw/vim-tags">https://github.com/szw/vim-tags</a>
快捷键 <code>Ctrl+]</code></p>

<p>这个插件体系也可以完全不用的~~</p>

<h4>ctags</h4>

<p>其实是个索引文件，需要创建，并且在当前目录打开才可以使用的。</p>

<p>```
// 创建tags文件
cd /your work path
ctags -R *</p>

<p>// vim 中跳转与返回
Ctrl + ]
Ctrl + T
```</p>

<h5>ctags 更好的支持 php</h5>

<p>在 <code>~/.ctags</code> 中添加这段，更好的创建 php 文件的 tags 文件。</p>

<p><code>
--regex-php=/^[ \t]*[(private|protected|public|static)( \t)]*function[ \t]+([A-Za-z0-9_]+)[ \t]*\(/\1/f, function, functions/
--regex-php=/^[ \t]*[(private|protected|public|static)]+[ \t]+\$([A-Za-z0-9_]+)[ \t]*/\1/p, property, properties/
--regex-php=/^[ \t]*(const)[ \t]+([A-Za-z0-9_]+)[ \t]*/\2/d, const, constants/
</code></p>

<h4>taglist</h4>

<h4>WinManager</h4>

<h4>phpcomplete</h4>

<h4>supertab</h4>

<p>```
&ldquo;phpcomplete
filetype plugin on
autocmd FileType php set omnifunc=phpcomplete#CompletePHP</p>

<p>&ldquo; taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1</p>

<p>&ldquo; wm
let g:winManagerWindowLayout=&lsquo;FileExplorer|TagList&rsquo;
"nmap wm :WMToggle<cr></p>

<p>&ldquo; 设置winmanager
&rdquo; 设置界面分割
&ldquo;let g:winManagerWindowLayout = "TagList|FileExplorer&rdquo;
&ldquo;设置winmanager的宽度，默认为25
let g:winManagerWidth = 30
"定义打开关闭winmanager快捷键为F8 => 改为普通模式的 wm
nmap wm :WMToggle<cr>
"在进入vim时自动打开winmanager
let g:AutoOpenWinManager = 1</p>

<p>&ldquo; supertab
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType=&rdquo;&lt;C-X>&lt;C-O>&ldquo;
```</p>

<p><img src="http://shjborage-public.qiniudn.com/2017-03-12-14776418022718.jpg" alt="" /></p>

<h5>代码自动补全升级</h5>

<p><a href="http://blog.csdn.net/arcsinsin/article/details/39436043">VIM代码补全提示功能</a></p>

<p>插件是这个：<a href="http://www.vim.org/scripts/script.PHP?script_id=1879">autocomplpop</a>
安装后，在 <code>.vimrc</code> 中添加配置，支持 php 的 <code>::</code>, <code>-&gt;</code>, <code>$</code>：</p>

<p><code>
if !exists('g:AutoComplPop_Behavior')
let g:AutoComplPop_Behavior = {}
let g:AutoComplPop_Behavior['php'] = []
call add(g:AutoComplPop_Behavior['php'], {
\ 'command' : "",
\ 'pattern' : printf('−&gt;|::|$\k\{『百分号』d,}$', 0),
\ 'repeat' : 0,
\})
endif
</code></p>

<h4>NERDTree</h4>

<p><code>
 114 "NERDTree
 115 let g:NERDTree_title="[NERDTree]"
 116 let g:winManagerWindowLayout="NERDTree|TagList"
 117
 118 function! NERDTree_Start()
 119     exec 'NERDTree'
 120 endfunction
 121
 122 function! NERDTree_IsValid()
 123     return 1
 124 endfunction
</code></p>

<p><a href="http://blog.csdn.net/bokee/article/details/6633193">http://blog.csdn.net/bokee/article/details/6633193</a></p>

<p>这个版本的Winmanager好像有个小bug，你在打开Winmanager界面时，会同时打开一个空的文件。这会影响后续使用，所以我们要在打开Winmanager时关掉这个空文件。在~/.vim/plugin目录下的winmanager.vim文件中找到以下函数定义并在第5行下添加第6行的内容：</p>

<p>```
function! <SID>ToggleWindowsManager()<br/>
   if IsWinManagerVisible()</p>

<pre><code>  call s:CloseWindowsManager()  
</code></pre>

<p>   else</p>

<pre><code>  call s:StartWindowsManager()  
  exe 'q'
</code></pre>

<p>   end<br/>
endfunction
```</p>

<h3>Vim 打开多窗口、多文件之间的切换</h3>

<p>打开多个文件：
一、Vim 还没有启动的时候：``
1.在终端里输入
<code>
vim file1 file2 ... filen便可以打开所有想要打开的文件
</code>
2.Vim已经启动
输入
<code>
:e file
</code></p>

<p>可以再打开一个文件，并且此时vim里会显示出file文件的内容。</p>

<p>3.同时显示多个文件：</p>

<p><code>
:sp         //水平切分窗口
:vsplit     //垂直切分窗口(:vsp)
</code></p>

<p>二、在文件之间切换：
1.文件间切换
<code>
Ctrl+6  //两文件间的切换
:bn      //下一个文件
:bp      //上一个文件
:ls       //列出打开的文件，带编号
:b1~n  //切换至第n个文件
</code></p>

<p>对于用 <code>(v)split</code> 在多个窗格中打开的文件，这种方法只会在当前窗格中切换不同的文件。</p>

<p>2.在窗格间切换的方法</p>

<p><code>
Ctrl+w+方向键——切换到前／下／上／后一个窗格
Ctrl+w+h/j/k/l ——同上
Ctrl+ww——依次向后切换到下一个窗格中
</code></p>
]]></content>
  </entry>
  
</feed>
