<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: iCloud | Eric's 后花园]]></title>
  <link href="http://shjborage.github.io/tags/icloud/atom.xml" rel="self"/>
  <link href="http://shjborage.github.io/"/>
  <updated>2018-12-02T21:05:29+08:00</updated>
  <id>http://shjborage.github.io/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    <email><![CDATA[shjborage@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iCloud 学习笔记]]></title>
    <link href="http://shjborage.github.io/blog/2012/09/20/icloud-xue-xi-bi-ji/"/>
    <updated>2012-09-20T17:47:00+08:00</updated>
    <id>http://shjborage.github.io/blog/2012/09/20/icloud-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>1.准备新的mobileprovision,不能用通配符，并打开iCloud功能，然后在工程里Summary中选中iCloud，并编辑entitlements文件。  <br/>
2.在后台线程中执行<code>NSURL *urlUC = [[NSFileManager defaultManager] URLForUbiquityContainerIdentifier:nil];</code> 注意只有真机才行，模拟器不行。</p>

<p>测试环境，打开网页：<a href="https://developer.icloud.com/#documents">https://developer.icloud.com/#documents</a></p>

<!-- more -->


<p>大概的测试代码如下：</p>

<p>```
&ndash; (void)getUbiquityContainerUrl
{</p>

<pre><code>NSURL *urlBase = [[NSFileManagerdefaultManager] URLForUbiquityContainerIdentifier:nil];
</code></pre>

<p>   if (urlBase == nil)</p>

<pre><code>    return; // 未激活iCloud或模拟器环境

NSDirectoryEnumerator *dirEnumerater = [[NSFileManagerdefaultManager] enumeratorAtPath:[selfgetDefaultDir]];
</code></pre>

<p>NSString *filePath = nil;
while((filePath = [dirEnumerater nextObject]) != nil) {</p>

<pre><code>    NSRange rPosPath = [filePath rangeOfString:@"/"];
    if (rPosPath.length == 0) {
        NSURL *urlFile = [NSURL URLWithString:filePath relativeToURL:urlBase];

        // 判断iCloud里该文件是否存在
        if ([[NSFileManagerdefaultManager] isUbiquitousItemAtURL:urlFile]) {
            // 存在则修改
            if (![[NSStringstringWithContentsOfFile:[[selfgetDefaultDir] stringByAppendingPathComponent:filePath] encoding:NSUTF8StringEncodingerror:nil] writeToURL:urlFile atomically:YES])
            {
                SQTRACE(@"存在则修改");
            }

            SQTRACE(@"上传成功");

            continue;
        }

        // 上传至iCloud
        // 指定本地文件完整路径
        NSURL *url = [NSURLfileURLWithPath:[[selfgetDefaultDir] stringByAppendingPathComponent:filePath]];
        NSError *error;
        // 官方文档建议本方法不要在主进程里执行
        if (![[NSFileManagerdefaultManager] setUbiquitous:YESitemAtURL:url destinationURL:urlFile error:&amp;error])
        {
            NSLog(@"setUbiquitous error %@,\n%@", error, [error userInfo]);
            SQTRACE(@"上传失败");
            continue;
        } else {
            SQTRACE(@"上传成功");
        }// end of iCloud upload
    }
} // end of while dir enumerator
</code></pre>

<p>}</p>

<ul>
<li>(void)testCloud
{
  [selfperformSelectorInBackground:@selector(getUbiquityContainerUrl) withObject:nil];
}</li>
</ul>


<p>// 此方法是官方文档提供,用来检查文件状态并下载
&ndash; (BOOL)downloadFileIfNotAvailable:(NSURL*)file
{</p>

<pre><code>NSNumber*  isIniCloud = nil;

if ([file getResourceValue:&amp;isIniCloud forKey:NSURLIsUbiquitousItemKey error:nil]) {
    // If the item is in iCloud, see if it is downloaded.
    if ([isIniCloud boolValue]) {
        NSNumber*  isDownloaded = nil;
        if ([file getResourceValue:&amp;isDownloaded forKey:NSURLUbiquitousItemIsDownloadedKey error:nil]) {
            if ([isDownloaded boolValue])
                return YES;

            // Download the file.
            NSFileManager*  fm = [NSFileManager defaultManager];
            if (![fm startDownloadingUbiquitousItemAtURL:file error:nil]) {
                return NO;
            }
            return YES;
        }
    }
}

// Return YES as long as an explicit download was not started.
returnYES;
</code></pre>

<p>}
```</p>

<h3>如何忽略Documents文件夹里面的某些文件或文件夹：</h3>

<p>(Documents中设置某些文件不去同步方法)</p>

<p>Documents路径里的文件会被默认同步到iCloud中（如果启用了iCloud功能）
Documents路径里，文件夹名以.nosync结尾的，将不被同步
如: Documents/mydata.nosync/ 该路径下的东西不被同步
Using Core Data with iCloud Release Notes 里有部分提到</p>
]]></content>
  </entry>
  
</feed>
