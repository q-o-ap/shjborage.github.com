<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Debug | Eric's 后花园]]></title>
  <link href="http://shjborage.github.io/tags/debug/atom.xml" rel="self"/>
  <link href="http://shjborage.github.io/"/>
  <updated>2018-12-02T21:05:29+08:00</updated>
  <id>http://shjborage.github.io/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    <email><![CDATA[shjborage@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在iOS中使用重定向，把控制台内容写入文件中]]></title>
    <link href="http://shjborage.github.io/blog/2012/07/11/zai-ioszhong-shi-yong-zhong-ding-xiang-ba-kong-zhi-tai-nei-rong-xie-ru-wen-jian-zhong/"/>
    <updated>2012-07-11T17:39:00+08:00</updated>
    <id>http://shjborage.github.io/blog/2012/07/11/zai-ioszhong-shi-yong-zhong-ding-xiang-ba-kong-zhi-tai-nei-rong-xie-ru-wen-jian-zhong</id>
    <content type="html"><![CDATA[<p>转自：<a href="http://mmz06.blog.163.com/blog/static/121416962011111210462288/">http://mmz06.blog.163.com/blog/static/121416962011111210462288/</a></p>

<h3>引入</h3>

<p>在做j2ee开发的时候，会用到log4j或其它类似工具去记录程序运行日志，以便调试时或在程序运行出错后，通过日志查询出错原因。那在IOS开发中是否有类似的方式来记录日志呢？下面将简单的说明：</p>

<h3>说明</h3>

<p>在Objective-c开发程序的时候，有专门的日志操作类NSLog，它将指定的输出，输出到（stderr）,我们可以利用Xcode的日志输出窗口，那么既然是要记录到具体日志文件，我们就想输出日志写入到具体的日志文件即可。</p>

<!-- more -->


<h3>1、  宏定义（下面是我在程序中常用到的日志宏，用DEBUG开关管理，</h3>

<p>也就是说只有在DEBUG模式下才让日志输出 ：）</p>

<p>```</p>

<h1>ifdef DEBUG</h1>

<h1>define LOG(fmt, &hellip;) do {                                            \</h1>

<pre><code>    NSString* file = [[NSString alloc] initWithFormat:@"%s", __FILE__]; \ 
    NSLog((@"%@(%d) " fmt), [file lastPathComponent], __LINE__, ##__VA_ARGS__); \ 
    [file release];                                                 \ 
} while(0) 
</code></pre>

<h1>define LOG_METHOD NSLog(@&ldquo;%s&rdquo;, <strong>func</strong>)</h1>

<h1>define LOG_CMETHOD NSLog(@&ldquo;%@/%@&rdquo;, NSStringFromClass([self class]), NSStringFromSelector(_cmd))</h1>

<h1>define COUNT(p) NSLog(@&ldquo;%s(%d): count = %d\n&rdquo;, <strong>func</strong>, <strong>LINE</strong>, [p retainCount]);</h1>

<h1>define LOG_TRACE(x) do {printf x; putchar(&lsquo;\n&rsquo;); fflush(stdout);} while (0)</h1>

<h1>else</h1>

<h1>define LOG(&hellip;)</h1>

<h1>define LOG_METHOD</h1>

<h1>define LOG_CMETHOD</h1>

<h1>define COUNT(p)</h1>

<h1>define LOG_TRACE(x)</h1>

<h1>endif</h1>

<p>```</p>

<p>可以看到，除了标准的用户定义输出外，我还加入了许多有用的信息，
比如源程序文件位置，行号，类名，函数名等。具体的应用可以在具体的开发过程中添加、删除。</p>

<h3>2、  应用：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&ndash; (void)redirectNSLogToDocumentFolder{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES); 
</span><span class='line'>NSString *documentsDirectory = [paths objectAtIndex:0]; 
</span><span class='line'>NSString *fileName =[NSString stringWithFormat:@"%@.log",[NSDate date]]; 
</span><span class='line'>NSString *logFilePath = [documentsDirectory stringByAppendingPathComponent:fileName]; 
</span><span class='line'>freopen([logFilePath cStringUsingEncoding:NSASCIIStringEncoding],"a+",stderr); 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>(void)applicationDidFinishLaunching:(UIApplication *)application {
</span><span class='line'>  // 真机测试时保存日志
</span><span class='line'>  if ([CDeviceInfo getModelType] != SIMULATOR) {
</span><span class='line'>      [self redirectNSLogToDocumentFolder];
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>```</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>真机测试的时候，可以利用freopen将标准错误输出保存到指定的文件当中，这样就可以在问题发生后分析日志文件。</p>

<h3>3、  设置DEBUG标志是否正确定义</h3>

<p>Xcode 一般会在 debug 运行配置项里面已经定义号了DEBUG 标志，如果没定义我们就自己写上，以我的 Xcode 4 为例，在项目get Info中找到 PreProcessor Macros 这个属性，对于 Debug 配置我们给他写上 DEBUG，而在 Release 配置中把它留空。 这样我们刚才那段预处理命令就可以根据这个标志来判断我们编译的时调试版本还是发布版本，从而控制 NSLog 的输出。 (因为 Xcode 4 会把 debug/release 两个配置项同时对比展现出来，而 3.x 版本的只能分别设置，如果你用的时xcode 3.x 开发工具， 那么就分别对 Debug/Release 都检查一下)。</p>
]]></content>
  </entry>
  
</feed>
