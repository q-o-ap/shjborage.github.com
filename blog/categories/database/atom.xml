<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | Saick Blog - 专注技术，乐在其中]]></title>
  <link href="http://saick.net/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2013-11-23T17:21:19+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python MySQLdb安装以及问题汇总]]></title>
    <link href="http://saick.net/blog/2013/10/30/python-mysqldban-zhuang-yi-ji-wen-ti-hui-zong/"/>
    <updated>2013-10-30T23:17:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/30/python-mysqldban-zhuang-yi-ji-wen-ti-hui-zong</id>
    <content type="html"><![CDATA[<p>自已备注一些, 斜体</p>

<p>转自：<a href="http://blog.chinaunix.net/uid-8487640-id-3183185.html">http://blog.chinaunix.net/uid-8487640-id-3183185.html</a></p>

<p>MySQLdb是Python连接MySQL的模块，下面介绍一下源码方式安装MySQLdb：</p>

<p>首先要下载下载：请到官方网站<a href="http://sourceforge.net/projects/mysql-python/">http://sourceforge.net/projects/mysql-python/</a> 或者 <a href="http://downloads.sourceforge.net/project/mysql-python/mysql-python-test/1.2.3c1/MySQL-python-1.2.3c1.tar.gz?use_mirror=nchc">点击链接下载</a></p>

<!-- more -->


<p>解压：tar zxvf MySQL-python*</p>

<p>进入文件目录，运行以下命令：
<code>
python setup.py install
</code></p>

<p>安装完成，到你的python安装目录下的site-packages目录里检查以下文件是否存在，如果存在即代表安装成功了</p>

<p>Linux：MySQL_python-1.2.3c1-py2.6-linux-i686.egg
Mac OS X：MySQL_python-1.2.3c1-py2.6-macosx-10.4-x86_64.egg</p>

<h4>注：如果碰到mysql_config not found的问题，有两种方法解决：<em>可能两个方法要合一起</em></h4>

<p>1）ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config
将mysql_confi从你的安装目录链接到/usr/local/bin目录下，这样就可以在任意目录下访问了（也可以放到/usr/bin）</p>

<p>2）编辑源码文件夹的site.cfg文件，去掉#mysql_config = /usr/local/bin/mysql_config前的注释＃，修改后面的路径为你的mysql_config真正的目录就可以了。（如果不知道mysql_config在哪里，运行命令：whereis mysql_config）</p>

<h4>注:如果碰到import error: libmysqlclient.so.18: cannot open shared object file: No such file or directory</h4>

<p>解决方法:</p>

<p>locate or find libmysqlclient.so.18
link path/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18
vi /etc/ld.so.conf    //加入libmysqlclient.so.18 所在的目录
插入: /usr/lib/</p>

<p>保存退出后执行/sbin/ldconfig生效</p>

<h4><em>后部安装：需要进行一个软连接链接不然会提示报错。</em></h4>

<p>问题如下：</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>from django.db import connection
cursor = connection.cursor()
Traceback (most recent call last):
  File &ldquo;<console>&rdquo;, line 1, in <module>
  File &ldquo;/Library/Python/2.7/site-packages/django/db/<strong>init</strong>.py&rdquo;, line 39, in <strong>getattr</strong></p>

<pre><code>return getattr(connections[DEFAULT_DB_ALIAS], item)
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/utils.py&rdquo;, line 193, in <strong>getitem</strong></p>

<pre><code>backend = load_backend(db['ENGINE'])
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/utils.py&rdquo;, line 108, in load_backend</p>

<pre><code>return import_module('%s.base' % backend_name)
</code></pre>

<p>  File &ldquo;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/<strong>init</strong>.py&rdquo;, line 37, in import_module</p>

<pre><code>__import__(name)
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/backends/mysql/base.py&rdquo;, line 17, in <module></p>

<pre><code>raise ImproperlyConfigured("Error loading MySQLdb module: %s" % e)
</code></pre>

<p>ImproperlyConfigured: Error loading MySQLdb module: dlopen(/Library/Python/2.7/site-packages/MySQL_python-1.2.4b4-py2.7-macosx-10.9-intel.egg/<em>mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
  Referenced from: /Library/Python/2.7/site-packages/MySQL_python-1.2.4b4-py2.7-macosx-10.9-intel.egg/</em>mysql.so
  Reason: image not found</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>解决方案：</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[group_concat函数详解]]></title>
    <link href="http://saick.net/blog/2013/09/24/group-concathan-shu-xiang-jie/"/>
    <updated>2013-09-24T00:06:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/24/group-concathan-shu-xiang-jie</id>
    <content type="html"><![CDATA[<p>问了好多人，都不知道group_concat这个函数。
这个函数好啊，能将相同的行组合起来，省老事了。
MySQL中group_concat函数(SQLite或其它数据亦可)</p>

<p>完整的语法如下：</p>

<p>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator &lsquo;分隔符&rsquo;])</p>

<p> <!-- more --></p>

<h4>基本查询</h4>

<p>Sql代码</p>

<ol>
<li> select * from aa;</li>
</ol>


<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>| id| name |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>|1 | 10|</p>

<p>|1 | 20|</p>

<p>|1 | 20|</p>

<p>|2 | 20|</p>

<p>|3 | 200 |</p>

<p>|3 | 500 |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>6 rows in set (0.00 sec)</p>

<p>以id分组，把name字段的值打印在一行，逗号分隔(默认)</p>

<p>Sql代码</p>

<ol>
<li> select id,group_concat(name) from aa group by id;</li>
</ol>


<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>| id| group_concat(name) |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>|1 | 10,20,20|</p>

<p>|2 | 20 |</p>

<p>|3 | 200,500|</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>3 rows in set (0.00 sec)</p>

<p>以id分组，把name字段的值打印在一行，分号分隔</p>

<p>Sql代码</p>

<ol>
<li> select id,group_concat(name separator &lsquo;;&rsquo;) from aa group by id;</li>
</ol>


<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>| id| group_concat(name separator &lsquo;;&rsquo;) |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>|1 | 10;20;20 |</p>

<p>|2 | 20|</p>

<p>|3 | 200;500 |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>3 rows in set (0.00 sec)</p>

<p>以id分组，把去冗余的name字段的值打印在一行，</p>

<h3>逗号分隔</h3>

<p>Sql代码</p>

<ol>
<li> select id,group_concat(distinct name) from aa group by id;</li>
</ol>


<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>| id| group_concat(distinct name) |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>|1 | 10,20|</p>

<p>|2 | 20 |</p>

<p>|3 | 200,500 |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>3 rows in set (0.00 sec)</p>

<p>以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</p>

<p>Sql代码</p>

<ol>
<li> select id,group_concat(name order by name desc) from aa group by id;</li>
</ol>


<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>| id| group_concat(name order by name desc) |</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>|1 | 20,20,10 |</p>

<p>|2 | 20|</p>

<p>|3 | 500,200|</p>

<p>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>3 rows in set (0.00 sec)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite使用 iOS平台]]></title>
    <link href="http://saick.net/blog/2013/09/03/sqliteshi-yong-iosping-tai/"/>
    <updated>2013-09-03T13:35:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/03/sqliteshi-yong-iosping-tai</id>
    <content type="html"><![CDATA[<h3>不太常用，但很关键命令</h3>

<h4>1.整理数据库：vacuum</h4>

<p>VACUUM命令是SQLite的一个扩展功能，模仿PostgreSQL中的相同命令而来。若调用VACUUM带一个表名或索引名， 则将整理该表或索引。在SQLite 1.0中，VACUUM命令调用gdbm_reorganize()整理后端数据库文件。</p>

<p>SQLITE 2.0.0中去掉了GDBM后端，VACUUM无效。在2.8.1版中，VACUUM被重新实现。现在索引名或表名被忽略。</p>

<!-- more -->


<p>当数据库中的一个对象(表，索引或触发器)被撤销，会留下空白的空间。它使数据库比需要的大小更大，但能加快插入速度。实时的插入和删除会使得数据库文件结构混乱，减慢对数据库内容访问的速度。 VACUUM命令复制主数据库文件到临时数据库并从临时数据库重新载入主数据库，以整理数据库文件。这将除去空白页，使表数据彼此相邻排列，并整理数据库文件结构。不能对附加数据库文件进行以上操作。</p>

<p>若当前有活动事务，该命令无法起作用。对于in-memory数据库，该命令无效。</p>

<p>SQLite3.1中，可以通过使用auto-vacuum模式取代VACUUM命令，使用auto_vacuum pragma开启该模式。
扩展阅读：<a href="http://www.sqlite.org/lang_vacuum.html">http://www.sqlite.org/lang_vacuum.html</a></p>

<h4>2.导出数据库：.dump</h4>

<p>.output file.sql</p>

<p>.dump</p>

<p>.output stdout</p>

<h4>3.导入数据库：.read 和.import</h4>

<p>.read file.sql</p>

<p>.import [file][table]</p>

<h3>SQLite不支持的常用操作</h3>

<ul>
<li>1 高级联结：SQlite支持“左外部联结（LEFT OUTER JOIN）”，不支持“右外部联结（RIGHT OUTER JOIN）”和“全外部联结（FULL OUTER JOIN）”。</li>
<li>2 修改表操作：SQlite支持“重命名表（RENAME TABLE）”，使用“ALTER TABLE给表添加新列”。不支持使用“ALTER TABLE”进行“删除列（DROP COLUMN）”，“修改列（ALTER COLUMN）”，“添加约束（ADD CONSTRAINT）”等。</li>
<li>3 触发器支持不完整：SQlite支持“行级触发器（FOR EACH ROW）”，不支持“语句级触发器（FOR EACH STATEMENT）”。</li>
<li>4 视图只能读不能写：SQlite不能在一个视图上使用“删除（DELETE）”，“插入（INSERT）”和“更新（UPDATE）”语句。但是可以创建一个触发器，当对表进行“DELETE”，“INSERT”或者“UPDATE”操作时激活该触发器，在该触发器的body部分做所需的操作。</li>
<li>5 不支持GRANT和REVOKE语句：因为SQlite只是去读写普通的磁盘文件，所以唯一可以应用到SQlite数据库的访问权限（控制），只有底层操作系统的普通的文件访问权限。所以那些client/server模式的数据库上通常具有的GRANT和REVOKE命令，SQlite并不支持，因为它们对于“嵌入式的数据库引擎（embedded database engine）”毫无意义。</li>
</ul>


<h4>官方SQL语法</h4>

<p><a href="http://www.sqlite.org/lang_vacuum.html">http://www.sqlite.org/lang_vacuum.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql for MacOSX 安装和基本操作]]></title>
    <link href="http://saick.net/blog/2013/06/07/mysql-for-macosx-an-zhuang-he-ji-ben-cao-zuo/"/>
    <updated>2013-06-07T10:55:00+08:00</updated>
    <id>http://saick.net/blog/2013/06/07/mysql-for-macosx-an-zhuang-he-ji-ben-cao-zuo</id>
    <content type="html"><![CDATA[<h2>一.安装mysql</h2>

<p>1.mysql下载地址<a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a>
我的机器是mac 10.7的;使用mysql-5.1.52-osx10.6-x86.dmg安装包， 没有更新的，这个可用。（5.5也可以这样用，基本一致 MacOSX10.8.x目前都可以用）
2.安装软件包位于硬盘映象(.dmg)文件中，必须首先双击搜索起中的图标来安装该文件。应当安装图像并显示其内容。</p>

<p>注释：在继续安装前，一定要使用MySQL管理器应用程序(在Mac OS X服务器上)或通过命令行的mysqladmin shutdown关闭所有运行MySQL服务器实例。</p>

<!-- more -->


<p>MySQL的Mac OS X PKG安装到/usr/local/mysql-VERSION，并且还会安装一个符号连接，/usr/local/mysql，指向新的位置。如果有/usr/local/mysql目录，首先将它改名为/usr/local/mysql.bak。安装完后，安装器执行mysql_install_db在MySQL数据库中创建授权表。</p>

<p>安装布局与tar文件二进制分发版类似；所有MySQL二进制代码位于目录/usr/local/mysql/bin中。默认情况，MySQL套接字文件创建为/tmp/mysql.sock。
如果你想在系统启动过程中自动启动MySQL，你还需要安装MySQL Startup Item。在MySQL 5.1中,它是Mac OS X安装盘映像的一部分，是一个独立的安装软件包。只需要双击MySQLStartupItem.图标并按照说明来安装。</p>

<p>MySQL 5.1的Startup Item安装在/Library/StartupItems/MySQLCOM。Startup Item安装时在系统配置文件/etc/hostconfig中加入变量MySQLCOM=-YES-。如果你想要disable自动启动MySQL，只需要将该变量更改为MySQLCOM=-NO-。
安装完后，可以在终端窗口运行下面的命令来启动MySQL。你必须具有管理员权限来执行该任务。</p>

<p>如果你已经安装的Startup Item：</p>

<p>shell> sudo /Library/StartupItems/MySQLCOM/MySQLCOM start</p>

<p>(Enter your password, if necessary)</p>

<p>(Press Control-D or enter &ldquo;exit&rdquo; to exit the shell)</p>

<p>如果不使用Startup Item，输入下面的命令序列：</p>

<p>shell> cd /usr/local/mysql</p>

<p>shell> sudo ./bin/mysqld_safe</p>

<p>(Enter your password, if necessary)</p>

<p>(Press Control-Z)</p>

<p>shell> bg</p>

<p>(Press Control-D or enter &ldquo;exit&rdquo; to exit the shell)</p>

<h2>二.创建用户 分配权限</h2>

<p><code>
grant all privileges on *.* to 'user'@'localhost' with grant option
grant all privileges on *.* to 'user'@'localhost' identified by ‘123456′;
flush privileges;
</code></p>

<h5>1.新建用户。</h5>

<p><em>如果mysql不识别的话，export PATH=$PATH:/usr/local/mysql/bin</em>
默认密码为空，直接按回车即可。</p>

<p>登录MYSQL
<code>
@&gt;mysql -u root -p
</code>
@>密码
创建用户
mysql> insert into mysql.user(Host,User,Password) values(&ldquo;localhost&rdquo;,&ldquo;phplamp&rdquo;,password(&ldquo;1234&rdquo;));
刷新系统权限表
mysql>flush privileges;
这样就创建了一个名为：phplamp  密码为：1234  的用户。</p>

<p>然后登录一下。</p>

<p>mysql>exit;
@>mysql -u phplamp -p
@>输入密码
mysql>登录成功</p>

<h5>2.为用户授权。</h5>

<p>登录MYSQL（有ROOT权限）。我里我以ROOT身份登录.
@>mysql -u root -p
@>密码
首先为用户创建一个数据库(phplampDB)
mysql>create database phplampDB;
授权phplamp用户拥有phplamp数据库的所有权限。 如果其它机器想访问的话，就把localhost改为"%&ldquo;
```</p>

<blockquote><p>grant all privileges on phplampDB.* to phplamp@localhost identified by &lsquo;1234&rsquo;;
```
刷新系统权限表
mysql>flush privileges;
mysql>其它操作</p></blockquote>

<p>如果想指定部分权限给一用户，可以这样来写:
mysql>grant select,update on phplampDB.* to phplamp@localhost identified by &lsquo;1234&rsquo;;
//刷新系统权限表。
mysql>flush privileges;</p>

<h5>3.删除用户。</h5>

<p>@>mysql -u root -p
@>密码
mysql>DELETE FROM user WHERE User=&ldquo;phplamp&rdquo; and Host=&ldquo;localhost&rdquo;;
mysql>flush privileges;
//删除用户的数据库
mysql>drop database phplampDB;</p>

<h5>4.修改指定用户密码。</h5>

<p>@>mysql -u root -p
@>密码
mysql>update mysql.user set password=password(&lsquo;新密码&rsquo;) where User=&ldquo;phplamp&rdquo; and Host=&ldquo;localhost&rdquo;;
mysql>flush privileges;</p>

<h2>三、使用后修改编码</h2>

<p>修改my.ini文件
加上
default-character-set=gb2312
设定数据库字符集
alter database da_name default character set &lsquo;charset&rsquo;</p>

<h5>1)设置数据库编码 /etc/my.cnf</h5>

<p>[mysqld]
default-character-set=gbk
&hellip;
[client]
default-character-set=gbk
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>

<h5>2)按字符集导出</h5>

<p>$mysqldump -u root -p dbname &mdash;default-character-set=gbk > a.sql;</p>

<h5>3)查看SQL文件的编码</h5>

<p>[root@localhost gethtml]# file a.sql
   a.sql: UTF-8 Unicode &hellip;
[root@localhost gethtml]# iconv -f utf-8 -t gbk a.sql > a2.sql
[root@localhost gethtml]# file a2.sql
   a2.sql: Non-ISO extended-ASCII English text 这时已经是gbk的编码了</p>

<h5>3)导入</h5>

<p>查看数据库服务和客户端字符集
mysql> status;
Server characterset:    gbk
Db     characterset:      gbk
Client characterset:      latin1
Conn. characterset:     latin1</p>

<p>mysql> set names &lsquo;gbk&rsquo;;   //这样
mysql> status;
Server characterset:   gbk
Db     characterset:     gbk
Client characterset:     gbk
Conn. characterset:    gbk
这时才能导数据
```</p>

<h2>mysql> source a.sql;</h2>

<p>```
单独设置某个数据库：
alter database testdb character set utf8;
查看mysql支持的编码：
show character set;</p>

<p>查看系统的字符集和排序方式的设定可以通过下面的两条命令：
mysql> SHOW VARIABLES LIKE &lsquo;'character_set_%&rsquo;&lsquo;;
LINUX 如下:</p>

<h5>1)导出数据</h5>

<p>[<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x72;&#111;&#111;&#116;&#64;&#119;&#119;&#x77;&#x2e;&#99;&#x6e;&#115;&#x63;&#x6e;&#46;&#111;&#x72;&#103;">&#x72;&#x6f;&#x6f;&#116;&#64;&#x77;&#x77;&#x77;&#46;&#x63;&#110;&#115;&#x63;&#x6e;&#46;&#x6f;&#x72;&#103;</a> ~]$ mysqldump -u root -p dbname &mdash;default-character-set=gbk > base_user.sql;</p>

<h5>2)查看导出的sql文件的编码</h5>

<p>[<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x72;&#x6f;&#111;&#x74;&#64;&#119;&#119;&#x77;&#46;&#99;&#x6e;&#x73;&#99;&#x6e;&#x2e;&#x6f;&#x72;&#x67;">&#x72;&#111;&#x6f;&#116;&#x40;&#x77;&#119;&#x77;&#46;&#x63;&#x6e;&#115;&#99;&#110;&#x2e;&#111;&#x72;&#x67;</a> ~]$ file base_user.sql
　 base_user.sql: UTF-8 Unicode text, with very long lines</p>

<h5>3)转成要用的编码</h5>

<p>[<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#114;&#x6f;&#111;&#x74;&#64;&#x77;&#119;&#119;&#x2e;&#x63;&#110;&#115;&#x63;&#x6e;&#x2e;&#111;&#x72;&#x67;">&#114;&#x6f;&#x6f;&#x74;&#x40;&#119;&#119;&#119;&#x2e;&#x63;&#110;&#115;&#x63;&#110;&#x2e;&#x6f;&#114;&#103;</a> ~]$ iconv -f utf-8 -t gbk base_user.sql >base_user_gbk.sql</p>

<h5>4)连接数据库并查看当前库的编码</h5>

<p>[<a href="&#x6d;&#97;&#105;&#108;&#x74;&#111;&#58;&#114;&#111;&#x6f;&#116;&#x40;&#x77;&#x77;&#119;&#46;&#99;&#x6e;&#115;&#99;&#110;&#46;&#x6f;&#114;&#103;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x77;&#x77;&#x77;&#46;&#x63;&#x6e;&#115;&#x63;&#x6e;&#46;&#x6f;&#114;&#x67;</a> ~]$ mysql -uroot
　mysql> use testdb;
mysql> status;</p>

<pre><code>Server characterset:    latin1
Db     characterset:    gbk
Client characterset:    latin1
Conn. characterset:    latin1
</code></pre>

<h5>5)设置成需要的编码</h5>

<p>mysql>set names &lsquo;gbk&rsquo;;</p>

<h5>6)查看现在的编码</h5>

<p>mysql> status;</p>

<pre><code>Server characterset:    latin1
Db     characterset:    gbk
Client characterset:    gbk
Conn. characterset:    gbk
</code></pre>

<h5>7)导入我们转换成gbk后的文件</h5>

<p><code>
mysql&gt; source base_user_gbk.sql;
</code></p>

<h2>四、导入、导出sql文件</h2>

<p>步骤如下：</p>

<p>一.MYSQL的命令行模式的设置：
桌面->我的电脑->属性->环境变量->新建-></p>

<p>PATH=“；path\mysql\bin;”其中path为MYSQL的安装路径。</p>

<p>二.简单的介绍一下命令行进入MYSQL的方法：</p>

<h5>1.C:>mysql -h hostname -u username -p</h5>

<p>按ENTER键，等待然后输入密码。这里hostname为服务器的名称，如localhost，username为MYSQL的用户名，如root。
进入命令行后可以直接操作MYSQL了。</p>

<h5>2.简单介绍一下MYSQL命令：</h5>

<p>mysql->CREATE DATABASE dbname;//创建数据库
mysql->CREATE TABLE tablename;//创建表
mysql->SHOW DATABASES;//显示数据库信息，有那些可用的数据库。
mysql->USE dbname;//选择数据库
mysql->SHOW TABLES;//显示表信息，有那些可用的表
mysql->DESCRIBE tablename;//显示创建的表的信息</p>

<h5>三.从数据库导出数据库文件：</h5>

<p>1.将数据库mydb导出到e:\mysql\mydb.sql文件中：</p>

<p>打开开始->运行->输入cmd 进入命令行模式
c:>mysqldump -h localhost -u root -p mydb >e:\mysql\mydb.sql</p>

<p>然后输入密码，等待一会导出就成功了，可以到目标文件中检查是否成功。</p>

<p>2.将数据库mydb中的mytable导出到e:\mysql\mytable.sql文件中：
c:>mysqldump -h localhost -u root -p mydb mytable>e:\mysql\mytable.sql</p>

<p>3.将数据库mydb的结构导出到e:\mysql\mydb_stru.sql文件中：
c:>mysqldump -h localhost -u root -p mydb &mdash;add-drop-table >e:\mysql\mydb_stru.sql</p>

<p>//-h localhost可以省略，其一般在虚拟主机上用</p>

<h5>四.从外部文件导入数据到数据库中：</h5>

<p>从e:\mysql\mydb2.sql中将文件中的SQL语句导入数据库中：</p>

<p>1.从命令行进入mysql，然后用命令CREATE DATABASE mydb2;创建数据库mydb2。</p>

<p>2.退出mysql 可以输入命令exit；或者quit；</p>

<p>3.在CMD中输入下列命令：
c:>mysql -h localhost -u root -p mydb2 &lt; e:\mysql\mydb2.sql</p>

<p>然后输入密码，就OK了。</p>

<h5>五.下面谈一下关于导入文件大小限制问题的解决：</h5>

<p>默认情况下：mysql 对导入文件大小有限制的，最大为2M，所以当文件很大时候，直接无法导入，下面就这个问题的解决列举如下：</p>

<p>1.在php.ini中修改相关参数：</p>

<p>影响mysql导入文件大小的参数有三个：</p>

<p>memory_limit=128M,upload_max_filesize=2M,post_max_size=8M</p>

<p>修改upload_max_filesize=200 M 这里修改满足你需要的大小，可以同时修改其他两项memory_limit=250M post_max_size=200M</p>

<p>这样就可以导入200M以下的.sql文件了。</p>

<p>上文中是把mysql放置在系统路径中，其实不妨也行。例如我的Mysql安装目录为D:\MySQL Server 5.0；</p>

<p>则首先用cmd打开dos窗口，然后输入D:(没有'\&lsquo;)回车</p>

<p>此时应该会出现D:>这样的标记，然后在其后面输入D:\MySQL Server 5.0\bin回车（顺序颠倒也行的）</p>

<p>出现D:\MySQL Server 5.0\bin> 接着输入mysqldump -u用户名 -p 数据库名 > 数据库名.sql（也可以输入路径）；具体用法参照上文。</p>

<p>导入文件同样，只是改了‘>’为‘&lt;’就行了。或者直接用source 也行：</p>

<p>常用source 命令</p>

<p>进入mysql数据库控制台</p>

<p>如mysql -u root -p（没必要,省略）</p>

<p>mysql>use 数据库</p>

<p>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)</p>

<p>mysql>source d:wcnc_db.sql</p>

<h2>修改Root密码</h2>

<p>```</p>

<h1>mysql -u root -p</h1>

<p>Enter password:
ERROR 1045 (28000): Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password: YES/NO)
```</p>

<p>安装时没有给root设置密码而默认其为空的,或忘记密码，不能成功登录，或者登录后没有权限操作。
可以尝试以下的方法：
方法1  :
```</p>

<h1>mysqladmin -u root password 123456</h1>

<p>```</p>

<p>设置了root的密码。</p>

<p>方法2
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>/etc/init.d/mysql stop&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>mysqld_safe &mdash;user=mysql &mdash;skip-grant-tables &mdash;skip-networking &amp;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>mysql -u root mysql&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>mysql> UPDATE user SET Password=PASSWORD(&lsquo;123456&rsquo;) where USER=&lsquo;root&rsquo;;
</span><span class='line'>mysql> FLUSH PRIVILEGES;
</span><span class='line'>mysql> quit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>/etc/init.d/mysql restart&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>mysql -uroot -p&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Enter password: &lt;输入新设的密码newpassword>
</span><span class='line'>mysql>　</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>方法3：
MySQL安装之后，root的密码是空的。为了提高安全性有必要给root加上密码。
<code>
mysql –u root –p
password:
mysql&gt;SET PASSWORD FOR 'root'@'localhost' = PASSWORD('Password');
</code></p>
]]></content>
  </entry>
  
</feed>
