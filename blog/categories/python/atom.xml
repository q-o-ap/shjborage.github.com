<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-02-07T18:18:31+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python MySQLdb安装以及问题汇总]]></title>
    <link href="http://saick.net/blog/2013/10/30/python-mysqldban-zhuang-yi-ji-wen-ti-hui-zong/"/>
    <updated>2013-10-30T23:17:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/30/python-mysqldban-zhuang-yi-ji-wen-ti-hui-zong</id>
    <content type="html"><![CDATA[<p>自已备注一些, 斜体</p>

<p>转自：<a href="http://blog.chinaunix.net/uid-8487640-id-3183185.html">http://blog.chinaunix.net/uid-8487640-id-3183185.html</a></p>

<p>MySQLdb是Python连接MySQL的模块，下面介绍一下源码方式安装MySQLdb：</p>

<p>首先要下载下载：请到官方网站<a href="http://sourceforge.net/projects/mysql-python/">http://sourceforge.net/projects/mysql-python/</a> 或者 <a href="http://downloads.sourceforge.net/project/mysql-python/mysql-python-test/1.2.3c1/MySQL-python-1.2.3c1.tar.gz?use_mirror=nchc">点击链接下载</a></p>

<!-- more -->


<p>解压：tar zxvf MySQL-python*</p>

<p>进入文件目录，运行以下命令：
<code>
python setup.py install
</code></p>

<p>安装完成，到你的python安装目录下的site-packages目录里检查以下文件是否存在，如果存在即代表安装成功了</p>

<p>Linux：MySQL_python-1.2.3c1-py2.6-linux-i686.egg
Mac OS X：MySQL_python-1.2.3c1-py2.6-macosx-10.4-x86_64.egg</p>

<h4>注：如果碰到mysql_config not found的问题，有两种方法解决：<em>可能两个方法要合一起</em></h4>

<p>1）ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config
将mysql_confi从你的安装目录链接到/usr/local/bin目录下，这样就可以在任意目录下访问了（也可以放到/usr/bin）</p>

<p>2）编辑源码文件夹的site.cfg文件，去掉#mysql_config = /usr/local/bin/mysql_config前的注释＃，修改后面的路径为你的mysql_config真正的目录就可以了。（如果不知道mysql_config在哪里，运行命令：whereis mysql_config）</p>

<h4>注:如果碰到import error: libmysqlclient.so.18: cannot open shared object file: No such file or directory</h4>

<p>解决方法:</p>

<p>locate or find libmysqlclient.so.18
link path/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18
vi /etc/ld.so.conf    //加入libmysqlclient.so.18 所在的目录
插入: /usr/lib/</p>

<p>保存退出后执行/sbin/ldconfig生效</p>

<h4><em>后部安装：需要进行一个软连接链接不然会提示报错。</em></h4>

<p>问题如下：</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>from django.db import connection
cursor = connection.cursor()
Traceback (most recent call last):
  File &ldquo;<console>&rdquo;, line 1, in <module>
  File &ldquo;/Library/Python/2.7/site-packages/django/db/<strong>init</strong>.py&rdquo;, line 39, in <strong>getattr</strong></p>

<pre><code>return getattr(connections[DEFAULT_DB_ALIAS], item)
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/utils.py&rdquo;, line 193, in <strong>getitem</strong></p>

<pre><code>backend = load_backend(db['ENGINE'])
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/utils.py&rdquo;, line 108, in load_backend</p>

<pre><code>return import_module('%s.base' % backend_name)
</code></pre>

<p>  File &ldquo;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/<strong>init</strong>.py&rdquo;, line 37, in import_module</p>

<pre><code>__import__(name)
</code></pre>

<p>  File &ldquo;/Library/Python/2.7/site-packages/django/db/backends/mysql/base.py&rdquo;, line 17, in <module></p>

<pre><code>raise ImproperlyConfigured("Error loading MySQLdb module: %s" % e)
</code></pre>

<p>ImproperlyConfigured: Error loading MySQLdb module: dlopen(/Library/Python/2.7/site-packages/MySQL_python-1.2.4b4-py2.7-macosx-10.9-intel.egg/<em>mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
  Referenced from: /Library/Python/2.7/site-packages/MySQL_python-1.2.4b4-py2.7-macosx-10.9-intel.egg/</em>mysql.so
  Reason: image not found</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>解决方案：</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dash：程序员的的好帮手]]></title>
    <link href="http://saick.net/blog/2013/10/27/dashcheng-xu-yuan-de-de-hao-bang-shou/"/>
    <updated>2013-10-27T20:08:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/27/dashcheng-xu-yuan-de-de-hao-bang-shou</id>
    <content type="html"><![CDATA[<p>现在最新版UI比以前好一些，不过总体差异不大。</p>

<p>转自：<a href="http://blog.csdn.net/meegomeego/article/details/8798665">http://blog.csdn.net/meegomeego/article/details/8798665</a></p>

<p>作为一Coder，每天最常见的动作就是查看各种API文档，你一定也有过同时打开N个窗口（HTML、PDF、CHM），不停的在编辑器与文档之间切换的感受吧？怎么说呢，其实我很讨厌这种枯燥无味的动作，那么如何才能提高效率，减少无用功呢？下面就给大家介绍一款非常好用的Mac小工具：<em>Dash</em>，相比这个英文名，我跟喜欢叫它“叮当猫”，嘿嘿。</p>

<p><a href="http://itunes.apple.com/cn/app/dash-docs-snippets/id458034879?mt=12">点我直达AppStore介绍页面</a></p>

<h3>功能简介</h3>

<p>官方用一句话就概括了它的用途：Dash是一个API文档浏览器（ API Documentation Browser），以及代码片段管理工具（Code Snippet Manager）。你没看错，它就只有这两个功能，但确实是程序员（至少对于我来说）最为关心的特性，自己之前也用过了不少类似的工具，可以毫不夸张地说，Dash是它们之中做的最好的一个！</p>

<!-- more -->


<h4>强悍的API文档浏览、搜索功能</h4>

<p>想必这个功能是大家最常用的了吧，每天要反复查看、搜索那么多的API细节，没有一个好工具，单靠自己的双手如何应付得来？窗口不停的切来切去，很烦啊！Dash采用集成单一窗口的方式，很好的解决了这个问题。看下面的截图：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511272486/" title="2013-10-27-1 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3789/10511272486_dc57f954a1.jpg" width="500" height="300" alt="2013-10-27-1"></a></p>

<p>上图便是Dash的API浏览器主界面：左侧边栏是各种编程语言以及框架（取决于你下载安装了多少文档集合）的导航大纲，点击某个节点，右边的内容区域就是文档的详细信息啦，非常直观。也可以在左上方的搜索框内通过输入关键字，查找相关的API文档，非常类似全文检索的实现方式，Dash的响应速度非常快！关键是可以同时查询不同的语言、框架内容，实在是太方便了。看到这里你也许要问了，这跟我们平常切换到特定的文档窗口（比如一个PDF或者一个CHM文件），再ctrl + f查找有什么区别，不是多此一举吗？其实你错了，Dash可以通过快捷键来显示、隐藏文档窗口，它提供了配置界面以便用户自行设置（我比较习惯alt+space，因为其他软件很少用到这个组合键）：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306334/" title="2013-10-27-2 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7356/10511306334_106b3b2151.jpg" width="423" height="234" alt="2013-10-27-2"></a></p>

<h4>Dash自带了丰富的API文档，涉及各种主流的编程语言和框架，全列出来很吓人的：</h4>

<p>ActionScript, Android, C++, Cappuccino, Cocos2D, Cocos3D, Corona, CSS, Django, Groovy, HTML, Java, JavaFX, JavaScript, jQuery, Kobold2D, Lua, MySQL, Node.js, Man Pages, Perl, PHP, Python, Ruby, Ruby on Rails, Scala, Sparrow, SQLite, Unity 3D, WordPress, XSLT, XUL</p>

<p>而且它的文档库采用了docset格式，高级用户基于网站提供的教程，很容易就能自行添加其他的扩充文档，其实Dash在最初发布的时候，只支持很少的几个文档浏览，好像只有Java、HTML、CSS这些，是后来通过用户不断贡献，以及作者及时的反馈（Rails API就是我通过Email与作者联系，请求添加的，作者非常nice），逐步壮大，才具备了如此广泛的语言、框架支持。要添加API文档，打开软件配置界面，切换到Docset选项卡即可看到所有内置的文档列表，按需要自行下载即可（如果是自己制作的docset，双击即可导入Dash）：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306294/" title="2013-10-27-3 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2845/10511306294_444ab45252.jpg" width="448" height="413" alt="2013-10-27-3"></a></p>

<h3>牛逼、好用的代码片段管理功能</h3>

<p>前面说完了Dash的文档查询功能，下面再来看一看它带给我们的另一个惊喜：代码片段管理。说到这里，之前的版本其实有个很不好的地方，就是如果不仔细琢磨一下，或者去看官方的帮助文档的话，用户是很难一眼就知道怎么用这个功能，新手引导做得确实不怎么样，不过最新版已经改善了这个问题，在主界面的导航边栏明确地给出了分类提示，创建或者修改代码片段都方便了许多。来看下面这个例子：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306354/" title="2013-10-27-4 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2856/10511306354_5e64bc1f92.jpg" width="500" height="427" alt="2013-10-27-4"></a></p>

<p>利用Dash的代码片段管理功能，我们可以把日常使用频繁（也就是你经常需要复制粘贴）的代码保存起来，然后为其设置一个独一无二的缩写，这样一来原本需要一遍又一遍的敲击键盘重复录入的繁琐工作，就可以交给Dash来帮你搞定啦。比如上面截图中的例子，就是ExtJS中发起Ajax请求的代码片段，哪怕是copy &amp; paste，时间长了也会很烦的，我给它设置了一个缩写（ajax），以后在需要编写这段代码的时候，就只需要敲击这几个字母，它就会魔法般的出现在光标所在位置啦！很神奇吧？嘿嘿，其实这种扩展缩写的功能，还有很多软件都能做到，比如TextExpander（这个我也买了，半价14刀的时候，但是现在已经打入冷宫了，比较后悔），不过就用户体验和各种细节，诸如界面UI，特别是扩展占位符的处理上，目前还没有哪一个能比得过Dash的（Dash is the best!）。来看看使用代码片段的截图吧：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306264/" title="2013-10-27-5 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2885/10511306264_3e3709bce1.jpg" width="500" height="364" alt="2013-10-27-5"></a></p>

<p>Dash的缩写扩展功能很强大，比方说上面那个例子，在保存代码片段的时候，你可以使用双下划线标明占位符，在执行扩展的时候就可以通过tab键来在各个占位符之间切换，根据需要输入实际的值，最后回车即可把片段粘贴到光标所在之处。除了占位符，它还支持下面这些变量符号：</p>

<ul>
<li> @clipboard 自动插入当前剪贴板中的内容</li>
<li> @cursor 代码片段粘贴完毕之后，自动将光标定位到此处</li>
<li> @date 自动插入当前日期</li>
<li> @time 自动插入当前时间</li>
</ul>


<p>介绍到这里，各位看官，你应该已经深深滴爱上Dash了吧？每个苦逼的程序员，都应该有这么一只可爱贴心的叮当猫，您说是不是？其实个人不是很喜欢它的图标，实在是有点太诡异了，嘿嘿……</p>

<p>最后再说一句，Dash在Mac App Store里面免费提供下载，不过作者包含了一个IAP（应用程序内购买）插件，作者挺幽默的，看介绍是说的Dash的双胞胎伙伴Pinky比较调皮，会时不时的跳出来打扰你一下，囧……反正我运行了一晚上，还没见到这只传说中的猫呢。其实这只不过是给你提供了赞助作者的机会，毕竟这么好的软件，如果经济条件允许，支持一下也无可厚非，同是软件开发者，其中的辛酸你我都懂的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 30分钟基础教程]]></title>
    <link href="http://saick.net/blog/2013/10/26/emacs-30fen-zhong-ji-chu-jiao-cheng/"/>
    <updated>2013-10-26T23:36:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/26/emacs-30fen-zhong-ji-chu-jiao-cheng</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>没有听说过 Emacs 吗？没有关系，花上30分钟就能了解和熟悉这个古老而强大 的编辑器。他被很多人称作世界上最强大的编辑器。用户从无数高手到IT民工到 普通文本编辑器用户，可以符合几乎所有人的需求。甚至可以在 Emacs 里运行 音乐播放器、网页浏览器等等，Emacs 更像是一个操作平台。</p>

<p>使用 Emacs 可以完全抛弃鼠标，不必在打字的同时把手移开键盘找鼠标，不必在 一大堆深藏不露的菜单里寻找那些常用功能，也不必被一条条工具栏遮挡视线。 大多数的 Windows 编辑器都有一条菜单栏，n条工具栏。菜单里有无数选项，很 多选项都会弹出一个对话框，这个对话框又会带有层层叠叠的标签，每个标签里 又有很多输入框很多按钮。一个简单的把所有字母大写的命令就要在菜单里翻半 天，说不定还找不到，而他们的帮助信息又总是不知所云。而 Emacs 的大多数操 作都可以通过快捷键或直接输入命令完成，而且有着极好的帮助系统，可以通过 多种方式找到你想要的命令或按键。</p>

<p>不要被 Emacs 简单的外观和与众不同的操作方式迷惑，上手 Emacs 并不是什么 难事，看一遍 Tutorial 就可以了，Emacs23 已经带着多种语言版本的快速指南， 包括中文。仍然觉得 Tutor 太长？那可以继续看本文。</p>

<!-- more -->


<h3>按键说明</h3>

<p>首先说明一下，Emacs 的按键表示方法。最常用的是 Ctrl 和 Alt 的组合键， 分别用 C 和 M 表示，比如:</p>

<p>C-x 就是 Ctrl+x，
M-x 就是 Alt+x，
C-M-f 就是 Ctrl+Alt+f，
M-% 就是 Alt+%，实际上是 Alt+Shift+5
C-x C-f 就是 Ctrl+x 然后再按 Ctrl+f，中间可以一直按着 Ctrl 也可以松 开，无所谓间隔多长时间。
这样你就可以简单的用 C 和 M 表示 ctrl 和 alt 了。Shift 可以用 S 表示。</p>

<p>键盘上的特殊按键用&lt;>表示，比如回车，空 格，方向键上， 等等，一看就知道什么意思。</p>

<p>不必追究为什么把 alt 写为 M，因为你这次只有30分钟时间。</p>

<h3>下载及安装</h3>

<h4>Windows 用户</h4>

<p>Windows 用户可以去 <a href="http://ntemacs.sf.net">http://ntemacs.sf.net</a> 下载可执行文件或者源代码。建议 下载Emacs23.x 。这是一个 7zip 的自动解压缩包，解压到你喜欢的目录就可以 了。</p>

<p>到这里你大概用了5分钟，当然，下载和解压缩时间不算在内。:)</p>

<h4>Linux 用户 (windows 用户可以忽略)</h4>

<p>可以下载 CVS 的 Emacs 代码，编译一下就好了。下载 CVS Emacs23:</p>

<p><code>
$ cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co -r emacs-unicode-2 emacs
</code>
编译:</p>

<p><code>
$ cd emacs $ ./configure —enable-font-backend —with-xft —with-freetype —with-gtk
</code>
注意 configure 的输出，是否缺少什么东西，没有问题的话就可以 make:</p>

<p><code>
$ make bootstrap
</code>
运行一下 src/emacs 如果没有问题的话就可以安装到默认路径：</p>

<p><code>
$ sudo make install
</code></p>

<h3>常用命令</h3>

<h4>启动和退出</h4>

<p>Windows 用户可以用 Emacs bin 目录下的 runemacs.exe 启动，Linux 用户键 入 emacs &amp; 就可以了。</p>

<p>启动 Emacs 后应该能看到界面<br/>
退出 Emacs 按 C-x C-c (就是 Ctrl+x 接着按 Ctrl+c)。</p>

<h3>打开和保存文件</h3>

<p>启动 Emacs 后，按 C-x C-f，minibuffer (就是 Emacs 最下面一条) 会提示路 径，你可以在这里输入路径名和文件名，或者回车看到这个目录列表。可以 用方向键移动光标到文件名上回车打开文件，或者在子目录上进入子 目录，在 .. 上进入上一层目录。</p>

<p>打开文件后像往常一样编辑，随便按字母键输入一些字符。按 C-x C-s 保存文件。按 C-x k 回车关闭这个 buffer。</p>

<p><strong>小结：按键说明</strong></p>

<p>这里可以看到很多 C-x 开头的组合键，这些通常都是 Emacs 预先定义，全局性 的命令。按了 C-x 不动，一秒钟后 minibuffer 提示 C-x- ，表示 Emacs 正在 等待用户按下一个键。如果你想取消这次按键，可以接下去按 C-g，minibuffer 提示 C-x C-g is undefined 也就是说 Emacs 什么都没有执行。C-g 一般都是取 消命令，取消按键。如果按了 C-x C-h 就会出现一个帮助 buffer，里面是以 C-x 开头的按键帮助。C-h 是一个帮助按键。如何获得更多的帮助，会在之后的 小节介绍。C-c 开头的按键通常是用户自定义的按键和扩展包或扩展模式定义的 按键，同样也可以获得帮助信息。</p>

<h3>选定区域，剪切、复制、粘贴</h3>

<p>好了，到现在为止你大概一共花了 10 分钟吧。</p>

<p>你可以用鼠标拖选一块区域。当然，最好用键盘。按 C-@，minibuffer 提示 Mark set，设定了一个 mark。然后移动光标，这时候你就选定了光标和 Mark 之 间的区域。什么都看不到？你可以按 C-w，这块区域就消失了，C-w 是剪切。按 C-x u 可以撤销上一次的剪切，C-x u 是取消。你肯定想看到你到底选中了哪块 区域，可以按M-x 然后输入 transient-mark-mode ，回车。这次你就可以看到你 选中了哪块区域了。M-x 是执行 Emacs 命令。</p>

<p>【插播广告】</p>

<p>如果是德语键盘，在 Windows 下很可能按不出 C-@, 而 C-又被输入法占去了。所以最好自己设定 set-mark 的按键。比如把 C-&ldquo; 设为 mark 命令。按 C-: (ctrl-冒号) 输入下面这句话，然后回车：</p>

<p>(global-set-key (kbd &ldquo;C-\&rdquo;&ldquo;) &lsquo;set-mark-command)
可以在你的.emacs文件里加入类似的语句</p>

<p>【广告结束】</p>

<p>Emacs 有一个很有用的功能，在你选定了区域之后按 C-x C-x 可以交换光标 (point) 和 Mark 的位置，这样你就可以修改调整你选定的区域了。</p>

<p>按 C-g 取消选定的区域。</p>

<p>重新用 C-@ 选定一块区域，按 M-w，这是复制，移动光标到别处，按 C-y，这是 粘贴。紧接着再按一次 M-y，这时可以看到粘贴的内容变成了上一次剪切的内容。 再按 M-y 又变成之前一次复制的内容。</p>

<p>C-k 可以剪切一行。连续的 C-k 会把剪切的内容放在一起，一次 C-y 就可以把 之前的 n 行一起贴上。</p>

<p>C-x u 可以撤销，不过这个撤销和常规 windows 程序的撤销不太一样。按了 C-x u 撤销后，如果移动一下光标，再按一次 C-x u，可以撤销之前的撤销命令。 这样相当于是 redu。</p>

<p>小结：</p>

<p>C-@ 选定区域
C-w 剪切
M-w 复制
C-y 粘贴
M-y 粘贴剪贴板之前的内容
C-k 剪切一行
C-x u 撤销</p>

<h3>查找</h3>

<p>其 他 windows 程序的查找通常会跳出一个对话框，这很讨厌，会遮住文本内容， 有时候我就会忘了我到底要找什么。Emacs 就不会这样。按 C-s 是查找， minibuffer 提示 I-search: 接下来你可以输入你要找的词，比如想找 windows， 输入 w，Emacs 开始找到 w，光标移动到 w 上，接着输入 i，Emacs 找到 wi， 并注意到Emacs 会同时高亮所有的 wi，接着输入 n，Emacs 找到 win，等等。这 就是 incremetal search，它的好处是，你想要找 windows，但实际上你只要输 入 win 就能定位到 windows 上了，不需要继续输入 dows 了。继续按 C-s 找下 一个匹配的。C-r 往回查找。按回车或者方向键结束本次查找，再按两次 C-s 重 复上次查找，按 C-g 取消查找，光标回到原处。</p>

<p>C-s 或 C-r 也可以用作光标定位，比如想要移到前面 Emacs 处，就可以 C-r Emacs，效率很高，可以说是指哪打哪。</p>

<p>如果查找输入的全是小写，那么这次查找是大小写不敏感的，如果输入字符中有 大写字母，那么这次查找就是大小写敏感的。很智能吧。</p>

<p>C-M-s 或 C-M-r 是正则表达式查找。或者在 C-s 之后按 M-r 也可以切换到正则 表达式查找。这里不仔细讲 Emacs 的正则表达式是怎么样的。那样会多花一个小 时。</p>

<p>替换</p>

<p>M-% 是 query-replace，输入查找内容和替换内容，然后 Emacs 会询问是否要 替换，y 替换，n 不替换，! 替换光标之后所有，q 结束，? 可以得到帮助。</p>

<p>Emacs 的替换有一个很好的特性，可以只在选定区域内进行替换。这样就可以放 心大胆地使用 ! 替换所用，而不用担心超出范围了。</p>

<p>C-M-% 是正则表达式的替换。</p>

<p>小结：</p>

<p>C-s 和 C-r 向前向后查找
C-% 替换
C-M-s 和 C-M-r 向前向后正则表达式查找
C-M-% 正则表达式替换</p>

<h3>寻求帮助</h3>

<p>到这里你用了大概20分钟，基本的文本编辑功能都有了。</p>

<p>接着你可以自己摸索了。</p>

<p>Emacs 提供了极其强大的帮助系统。</p>

<p>C-h t 是一个 tutorial，现在也有不同语言的 tutorial。按 M-x 输入 help-with-tutorial-spec-language 可以选择不同的语言。按 Emacs 可 以帮你补全命令。按两次 会有补全的提示。</p>

<p>C-h a 是 apropos command，你可以输入几个简单的单词，Emacs 可以帮你找到 相应的命令，这个帮助非常好用。比如你想把一个单词全部大写，但不知道该怎 么做，可以 C-h a 输入 upcase word 或者 up word，Emacs 就会找到几个命令， 其中一个是 upcase-word，并且对应的按键是 M-u，你只要把光标移动到单词前 按 M-u 就可以了。</p>

<p>C-h k 是描述某个按键会执行什么。例如你要看看 M-; 是干什么的，按 C-h k， 接着按 M-; 你就会看到 M-; 会运行 comment-dwim，dwim 是 do what i mean 的缩写，这个命令会注释或反注释你选定的区域，如果没有选定区域，会在这一 行后面加上注释。很聪明的命令吧。</p>

<p>C-h c 简单描述某个按键执行什么。</p>

<p>C-h f 描述某个函数</p>

<p>C-h v 描述某个变量</p>

<p>C-h 会提供很多很多帮助信息，C-h ? 会显示有哪些帮助信息。</p>

<h3>简单配置</h3>

<p>Emacs 有超强的可配置性，1000个人可以有1000种配置，可以有自己的键绑定， 有自定义的函数，有自己喜欢的扩展包。配置放在 home 目录下的 .emacs 里， Emacs 启动的时候会自动读取这个文件。启动 Emacs 后，C-x C-f ~/.emacs 会 打开 .emacs 文件，如果不存在的话就是新建这个文件。home 目录在哪里呢？ 可以 M-x getenv home 得 到 home 的位置。Linux 系统很好理解。 Windows 系统，会默认放在 C:\Documents and Settings\username\Application Data 下，有几种方法可以指定 home 的位置：</p>

<p>在 我的电脑->属性->高级->环境变量 里添加一个 HOME 环境变量，指定位 置。
在注册表 [HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs] (如果没有 GNU 或 Emacs，添加一个即可) 添加 HOME 字符串变量，值为指定的 home 路径。
Emacs 配置使用的语言是 Elisp，Emacs 附带非常详细的 Elisp 手册，可以通 过 M-x info 得到。配置 .emacs 一般只需要几个简单语句，比如：</p>

<p>(setq variable-name value) 设置变量值，例如 (setq transient-mark-mode t) 设置选定区域范围高亮
(require &lsquo;extension) 安装一个扩展包。
(load &ldquo;file-name&rdquo;) 使用一个 .el 文件
(global-set-key (kbd &ldquo;C-c f&rdquo;) 'function-name) 全局自定义键绑定
(define-key dired-mode (kbd &ldquo;j&rdquo;) 'dired-next-line) 局部键绑定，只在 dired-mode 起作用
(if &hellip;) 一些简单的判断语句
这里提供一个简单的 .emacs 文件: quick.emacs.el</p>

<p>你可以把它复制到你的 home 目录下并改名为 .emacs 注意有个.</p>

<p>或者用 runemacs.exe -q -l quick.emacs.el 来指定 emacs 使用这个配置文件。</p>

<h3>总结</h3>

<p>到这里差不多就是30分钟吧，介绍一些文本编辑的基本操作。只是为了说明上手 Emacs 其实很简单，而且几乎每一样操作都有比普通 Windows 文本编辑器更好 的特性，比如可以任意调整已选定的区域，更好的复制粘贴机制，更好的撤销机 制，更好的 isearch 查找方式，可以在区域内替换，强大得多的帮助系统，没 有任何限制的扩展性。用了几天或几个星期后就会觉得其他的编辑是多么麻烦和 弱小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs中打造强大的Python IDE]]></title>
    <link href="http://saick.net/blog/2013/10/26/emacszhong-da-zao-qiang-da-de-python-ide/"/>
    <updated>2013-10-26T22:26:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/26/emacszhong-da-zao-qiang-da-de-python-ide</id>
    <content type="html"><![CDATA[<p>本文将介绍，在Emacs中，通过各种扩展，打造强大的Python IDE环境，包括Snippet工具，智能提示，自动补全，重构工具，调试以及GAE的调试，等等。以下各工具的安装前提是你对Emacs的配置文件有一定的了解，所有相关的el文件都必须放在load_path能够加载的地方。</p>

<h3>1. YASnippet</h3>

<p>snippet工具，可自定义一些模板，必不可少的好东西！看了下面这个很酷的演示动画就明白了：</p>

<p><a href="http://yasnippet.googlecode.com/files/yasnippet.avi">http://yasnippet.googlecode.com/files/yasnippet.avi</a></p>

<p>安装方法：
(Add by Eric 建议看GitHub上的安装说明：<a href="https://github.com/capitaomorte/yasnippet">https://github.com/capitaomorte/yasnippet</a>)</p>

<!-- more -->


<p><code>
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet-0.6.1c/snippets")
</code></p>

<h3>2. AutoComplete</h3>

<p>自动完成工具，会像VS里一样，弹出一个列表框让你去选择。
<a href="http://www.flickr.com/photos/105999540@N03/10493765485/" title="2013-10-26-1 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3678/10493765485_ce80f8cd35.jpg" width="414" height="309" alt="2013-10-26-1"></a></p>

<p>安装方法：</p>

<p><code>
(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(setq-default ac-sources '(ac-source-words-in-same-mode-buffers))
(add-hook 'emacs-lisp-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-symbols)))
(add-hook 'auto-complete-mode-hook (lambda () (add-to-list 'ac-sources 'ac-source-filename)))
(set-face-background 'ac-candidate-face "lightgray")
(set-face-underline 'ac-candidate-face "darkgray")
(set-face-background 'ac-selection-face "steelblue") ;;; 设置比上面截图中更好看的背景颜色
(define-key ac-completing-map "\M-n" 'ac-next)  ;;; 列表中通过按M-n来向下移动
(define-key ac-completing-map "\M-p" 'ac-previous)
(setq ac-auto-start 2)
(setq ac-dwim t)
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
</code></p>

<h3>3. Rope and Ropemacs</h3>

<p>非常棒的重构工具，比如rename,move,extract method等等。还有非常好用的goto difinition(跳到定义)，show documents(显示文档)等等。安装Ropemacs前，必须先安装rope和pymacs 。</p>

<p>rope的安装方法：
<code>
python setup.py install
</code>
pymacs的安装方法：</p>

<p>python setup.py install
.emacs中：</p>

<p><code>
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
</code></p>

<p>Ropmacs的安装方法：</p>

<p><code>
python setup.py install
</code>
.emacs中：</p>

<p><code>
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)
</code></p>

<h3>4. pycomplete</h3>

<p>一个更加强大的智能提示工具，比如，输入time.cl 然后按TAB键，会列出time模块所有cl开头的函数名。在调用函数时，还会在mini buffer中提示函数的参数类型。这个东西需要先安装pymacs。</p>

<p>安装方法：</p>

<ol>
<li>拷贝 python-mode.el and pycomplete.el 到Emacs的load_path中</li>
<li>拷贝 pycomplete.py 到PYTHONPATH (比如： c:/python25/Lib/site-packages)</li>
<li>.emacs中添加：</li>
</ol>


<p>```
(require &lsquo;pycomplete)
(setq auto-mode-alist (cons &rsquo;(&ldquo;\.py$&rdquo; . python-mode) auto-mode-alist))
(autoload &lsquo;python-mode &ldquo;python-mode&rdquo; &ldquo;Python editing mode.&rdquo; t)
(setq interpreter-mode-alist(cons &rsquo;(&ldquo;python&rdquo; . python-mode)</p>

<pre><code>                       interpreter-mode-alist))
</code></pre>

<p>```</p>

<h3>5. pdb调试</h3>

<p>在Emacs中，通过M-x pdb可调出pdb对python代码进行调试。但是发现在Windows系统中，总进入不了调试模式。主要原因有：</p>

<h4>1. windows中，找不到pdb.py位置。需自己制定pdb的路径。可以通过下面的方法设置pdb的路径：</h4>

<p>```
;; pdb setup, note the python version
(setq pdb-path &lsquo;c:/python25/Lib/pdb.py</p>

<pre><code>   gud-pdb-command-name (symbol-name pdb-path))
</code></pre>

<p> (defadvice pdb (before gud-query-cmdline activate)
   &ldquo;Provide a better default command line when called interactively.&rdquo;
   (interactive</p>

<pre><code>(list (gud-query-cmdline pdb-path
             (file-name-nondirectory buffer-file-name)))))
</code></pre>

<p>```</p>

<h4>2. windows中，调用pdb时，未使用python -i 参数。</h4>

<p>针对上面两个问题，我的解决办法是，不设置pdb具体路径，M-x pdb 回车后，出现下面命令:</p>

<p>Run pdb (like this): pdb
然后手动修改一下：</p>

<p>Run pdb (like this): python -i -m pdb test.py
这样就搞定了。</p>

<h3>6. 如何调试GAE程序</h3>

<p>GAE是一个Web应用，需要跨线程进行调试，而pdb本身对线程调试支持不好。使用pdb进行线程调试时，只有在需要调试的地方插入下面代码：</p>

<p>import pdb
pdb.set_trace()</p>

<p>然后直接运行被调试代码，而不是通过python pdb来执行，就可以多线程代码进行调试了。</p>

<p>但是Google App Engine这样的Web应用，使用这个方法还是不能调试，和stdin和stdout有关，最后找到一个很好的解决方法：</p>

<p>def set_trace():</p>

<pre><code>import pdb, sys
debugger = pdb.Pdb(stdin=sys.__stdin__,
    stdout=sys.__stdout__)
debugger.set_trace(sys._getframe().f_back)
</code></pre>

<p>在任何需要调试的地方，调用上面的set_trace()函数。</p>

<p>如果你还有更好玩的东西，一定要告诉我！</p>

<h3>参考文档：</h3>

<p><a href="http://www.emacswiki.org/emacs/PythonMode">http://www.emacswiki.org/emacs/PythonMode</a></p>

<p><a href="http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/">http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/</a></p>

<p><a href="http://jjinux.blogspot.com/2008/05/python-debugging-google-app-engine-apps.html">http://jjinux.blogspot.com/2008/05/python-debugging-google-app-engine-apps.html</a></p>

<p>作者：CoderZh（CoderZh的技术博客 &ndash; 博客园）
微博：<a href="http://t.sina.com.cn/coderzh">http://t.sina.com.cn/coderzh</a>
出处：<a href="http://coderzh.cnblogs.com">http://coderzh.cnblogs.com</a>
文章版权归本人所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django学习资源以及相关备注]]></title>
    <link href="http://saick.net/blog/2013/10/24/djangoxue-xi-zi-yuan-yi-ji-xiang-guan-bei-zhu/"/>
    <updated>2013-10-24T23:01:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/24/djangoxue-xi-zi-yuan-yi-ji-xiang-guan-bei-zhu</id>
    <content type="html"><![CDATA[<p>对于我这个python新手，还是用Django入门比较容易一些，以后熟悉了可以再考虑换别的</p>

<p>Django 相关教程：</p>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-django/">Python Web 框架，第 1 部分: 使用 Django 和 Python 开发 Web 站点</a><br/>
<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-django/index.html">基于 Django 框架的敏捷 Web 开发</a></p>

<p>上面这俩有点老，参考一下即可。</p>

<!-- more -->


<p><a href="http://haoluobo.com/trac/wiki/Django">http://haoluobo.com/trac/wiki/Django</a></p>

<p>这哥们跟Django好像关系不错，收集了很多东西，起来帮助很大。不过有些链接进去也是广告N多，那种一看就是垃圾站。那个2010年版的Django Step by Step就是那样。</p>

<p>Django book 2.0 的中文翻译<br/>
<a href="http://djangobook.py3k.cn/2.0/">http://djangobook.py3k.cn/2.0/</a></p>

<p>这本书是我先看的，效果过段时间写入评论吧。
有些比较重要的，还是写到博文里吧，方便搜索。</p>

<h2>Django book 2.0 的中文翻译 读书笔记</h2>

<h3>模板使用方法及注意事项</h3>

<p>你可以根据需要使用任意多的继承次数。 使用继承的一种常见方式是下面的三层法：</p>

<ul>
<li>1.创建 base.html 模板，在其中定义站点的主要外观感受。 这些都是不常修改甚至从不修改的部分。</li>
<li>2.为网站的每个区域创建 base_SECTION.html 模板(例如, base_photos.html 和 base_forum.html )。这些模板对 base.html 进行拓展，并包含区域特定的风格与设计。</li>
<li>3.为每种类型的页面创建独立的模板，例如论坛页面或者图片库。 这些模板拓展相应的区域模板。</li>
</ul>


<p>这个方法可最大限度地重用代码，并使得向公共区域（如区域级的导航）添加内容成为一件轻松的工作。</p>

<p>以下是使用模板继承的一些诀窍：</p>

<ul>
<li>如果在模板中使用 ｛% extends %｝ ，必须保证其为模板中的第一个模板标记。 否则，模板继承将不起作用。</li>
<li><p>一般来说，基础模板中的 ｛% block %｝ 标签越多越好。 记住，子模板不必定义父模板中所有的代码块，因此你可以用合理的缺省值对一些代码块进行填充，然后只对子模板所需的代码块进行（重）定义。 俗话说，钩子越多越好。</p></li>
<li><p>如果发觉自己在多个模板之间拷贝代码，你应该考虑将该代码段放置到父模板的某个 ｛% block %｝ 中。</p></li>
<li><p>如果你需要访问父模板中的块的内容，使用 ｛｛ block.super ｝｝这个标签吧，这一个魔法变量将会表现出父模板中的内容。 如果只想在上级代码块基础上添加内容，而不是全部重载，该变量就显得非常有用了。</p></li>
<li><p>不允许在同一个模板中定义多个同名的 ｛% block %｝ 。 存在这样的限制是因为block 标签的工作方式是双向的。 也就是说，block 标签不仅挖了一个要填的坑，也定义了在父模板中这个坑所填充的内容。如果模板中出现了两个相同名称的 ｛% block %｝ 标签，父模板将无从得知要使用哪个块的内容。</p></li>
<li><p>｛% extends %｝ 对所传入模板名称使用的加载方法和 get_template() 相同。 也就是说，会将模板名称被添加到 TEMPLATE_DIRS 设置之后。</p></li>
<li><p>多数情况下， ｛% extends %｝ 的参数应该是字符串，但是如果直到运行时方能确定父模板名，这个参数也可以是个变量。 这使得你能够实现一些很酷的动态功能。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
