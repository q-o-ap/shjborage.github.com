<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: other | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-02-19T22:49:31+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dash：程序员的的好帮手]]></title>
    <link href="http://saick.net/blog/2013/10/27/dashcheng-xu-yuan-de-de-hao-bang-shou/"/>
    <updated>2013-10-27T20:08:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/27/dashcheng-xu-yuan-de-de-hao-bang-shou</id>
    <content type="html"><![CDATA[<p>现在最新版UI比以前好一些，不过总体差异不大。</p>

<p>转自：<a href="http://blog.csdn.net/meegomeego/article/details/8798665">http://blog.csdn.net/meegomeego/article/details/8798665</a></p>

<p>作为一Coder，每天最常见的动作就是查看各种API文档，你一定也有过同时打开N个窗口（HTML、PDF、CHM），不停的在编辑器与文档之间切换的感受吧？怎么说呢，其实我很讨厌这种枯燥无味的动作，那么如何才能提高效率，减少无用功呢？下面就给大家介绍一款非常好用的Mac小工具：<em>Dash</em>，相比这个英文名，我跟喜欢叫它“叮当猫”，嘿嘿。</p>

<p><a href="http://itunes.apple.com/cn/app/dash-docs-snippets/id458034879?mt=12">点我直达AppStore介绍页面</a></p>

<h3>功能简介</h3>

<p>官方用一句话就概括了它的用途：Dash是一个API文档浏览器（ API Documentation Browser），以及代码片段管理工具（Code Snippet Manager）。你没看错，它就只有这两个功能，但确实是程序员（至少对于我来说）最为关心的特性，自己之前也用过了不少类似的工具，可以毫不夸张地说，Dash是它们之中做的最好的一个！</p>

<!-- more -->


<h4>强悍的API文档浏览、搜索功能</h4>

<p>想必这个功能是大家最常用的了吧，每天要反复查看、搜索那么多的API细节，没有一个好工具，单靠自己的双手如何应付得来？窗口不停的切来切去，很烦啊！Dash采用集成单一窗口的方式，很好的解决了这个问题。看下面的截图：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511272486/" title="2013-10-27-1 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3789/10511272486_dc57f954a1.jpg" width="500" height="300" alt="2013-10-27-1"></a></p>

<p>上图便是Dash的API浏览器主界面：左侧边栏是各种编程语言以及框架（取决于你下载安装了多少文档集合）的导航大纲，点击某个节点，右边的内容区域就是文档的详细信息啦，非常直观。也可以在左上方的搜索框内通过输入关键字，查找相关的API文档，非常类似全文检索的实现方式，Dash的响应速度非常快！关键是可以同时查询不同的语言、框架内容，实在是太方便了。看到这里你也许要问了，这跟我们平常切换到特定的文档窗口（比如一个PDF或者一个CHM文件），再ctrl + f查找有什么区别，不是多此一举吗？其实你错了，Dash可以通过快捷键来显示、隐藏文档窗口，它提供了配置界面以便用户自行设置（我比较习惯alt+space，因为其他软件很少用到这个组合键）：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306334/" title="2013-10-27-2 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7356/10511306334_106b3b2151.jpg" width="423" height="234" alt="2013-10-27-2"></a></p>

<h4>Dash自带了丰富的API文档，涉及各种主流的编程语言和框架，全列出来很吓人的：</h4>

<p>ActionScript, Android, C++, Cappuccino, Cocos2D, Cocos3D, Corona, CSS, Django, Groovy, HTML, Java, JavaFX, JavaScript, jQuery, Kobold2D, Lua, MySQL, Node.js, Man Pages, Perl, PHP, Python, Ruby, Ruby on Rails, Scala, Sparrow, SQLite, Unity 3D, WordPress, XSLT, XUL</p>

<p>而且它的文档库采用了docset格式，高级用户基于网站提供的教程，很容易就能自行添加其他的扩充文档，其实Dash在最初发布的时候，只支持很少的几个文档浏览，好像只有Java、HTML、CSS这些，是后来通过用户不断贡献，以及作者及时的反馈（Rails API就是我通过Email与作者联系，请求添加的，作者非常nice），逐步壮大，才具备了如此广泛的语言、框架支持。要添加API文档，打开软件配置界面，切换到Docset选项卡即可看到所有内置的文档列表，按需要自行下载即可（如果是自己制作的docset，双击即可导入Dash）：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306294/" title="2013-10-27-3 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2845/10511306294_444ab45252.jpg" width="448" height="413" alt="2013-10-27-3"></a></p>

<h3>牛逼、好用的代码片段管理功能</h3>

<p>前面说完了Dash的文档查询功能，下面再来看一看它带给我们的另一个惊喜：代码片段管理。说到这里，之前的版本其实有个很不好的地方，就是如果不仔细琢磨一下，或者去看官方的帮助文档的话，用户是很难一眼就知道怎么用这个功能，新手引导做得确实不怎么样，不过最新版已经改善了这个问题，在主界面的导航边栏明确地给出了分类提示，创建或者修改代码片段都方便了许多。来看下面这个例子：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306354/" title="2013-10-27-4 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2856/10511306354_5e64bc1f92.jpg" width="500" height="427" alt="2013-10-27-4"></a></p>

<p>利用Dash的代码片段管理功能，我们可以把日常使用频繁（也就是你经常需要复制粘贴）的代码保存起来，然后为其设置一个独一无二的缩写，这样一来原本需要一遍又一遍的敲击键盘重复录入的繁琐工作，就可以交给Dash来帮你搞定啦。比如上面截图中的例子，就是ExtJS中发起Ajax请求的代码片段，哪怕是copy &amp; paste，时间长了也会很烦的，我给它设置了一个缩写（ajax），以后在需要编写这段代码的时候，就只需要敲击这几个字母，它就会魔法般的出现在光标所在位置啦！很神奇吧？嘿嘿，其实这种扩展缩写的功能，还有很多软件都能做到，比如TextExpander（这个我也买了，半价14刀的时候，但是现在已经打入冷宫了，比较后悔），不过就用户体验和各种细节，诸如界面UI，特别是扩展占位符的处理上，目前还没有哪一个能比得过Dash的（Dash is the best!）。来看看使用代码片段的截图吧：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/10511306264/" title="2013-10-27-5 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2885/10511306264_3e3709bce1.jpg" width="500" height="364" alt="2013-10-27-5"></a></p>

<p>Dash的缩写扩展功能很强大，比方说上面那个例子，在保存代码片段的时候，你可以使用双下划线标明占位符，在执行扩展的时候就可以通过tab键来在各个占位符之间切换，根据需要输入实际的值，最后回车即可把片段粘贴到光标所在之处。除了占位符，它还支持下面这些变量符号：</p>

<ul>
<li> @clipboard 自动插入当前剪贴板中的内容</li>
<li> @cursor 代码片段粘贴完毕之后，自动将光标定位到此处</li>
<li> @date 自动插入当前日期</li>
<li> @time 自动插入当前时间</li>
</ul>


<p>介绍到这里，各位看官，你应该已经深深滴爱上Dash了吧？每个苦逼的程序员，都应该有这么一只可爱贴心的叮当猫，您说是不是？其实个人不是很喜欢它的图标，实在是有点太诡异了，嘿嘿……</p>

<p>最后再说一句，Dash在Mac App Store里面免费提供下载，不过作者包含了一个IAP（应用程序内购买）插件，作者挺幽默的，看介绍是说的Dash的双胞胎伙伴Pinky比较调皮，会时不时的跳出来打扰你一下，囧……反正我运行了一晚上，还没见到这只传说中的猫呢。其实这只不过是给你提供了赞助作者的机会，毕竟这么好的软件，如果经济条件允许，支持一下也无可厚非，同是软件开发者，其中的辛酸你我都懂的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 30分钟基础教程]]></title>
    <link href="http://saick.net/blog/2013/10/26/emacs-30fen-zhong-ji-chu-jiao-cheng/"/>
    <updated>2013-10-26T23:36:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/26/emacs-30fen-zhong-ji-chu-jiao-cheng</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>没有听说过 Emacs 吗？没有关系，花上30分钟就能了解和熟悉这个古老而强大 的编辑器。他被很多人称作世界上最强大的编辑器。用户从无数高手到IT民工到 普通文本编辑器用户，可以符合几乎所有人的需求。甚至可以在 Emacs 里运行 音乐播放器、网页浏览器等等，Emacs 更像是一个操作平台。</p>

<p>使用 Emacs 可以完全抛弃鼠标，不必在打字的同时把手移开键盘找鼠标，不必在 一大堆深藏不露的菜单里寻找那些常用功能，也不必被一条条工具栏遮挡视线。 大多数的 Windows 编辑器都有一条菜单栏，n条工具栏。菜单里有无数选项，很 多选项都会弹出一个对话框，这个对话框又会带有层层叠叠的标签，每个标签里 又有很多输入框很多按钮。一个简单的把所有字母大写的命令就要在菜单里翻半 天，说不定还找不到，而他们的帮助信息又总是不知所云。而 Emacs 的大多数操 作都可以通过快捷键或直接输入命令完成，而且有着极好的帮助系统，可以通过 多种方式找到你想要的命令或按键。</p>

<p>不要被 Emacs 简单的外观和与众不同的操作方式迷惑，上手 Emacs 并不是什么 难事，看一遍 Tutorial 就可以了，Emacs23 已经带着多种语言版本的快速指南， 包括中文。仍然觉得 Tutor 太长？那可以继续看本文。</p>

<!-- more -->


<h3>按键说明</h3>

<p>首先说明一下，Emacs 的按键表示方法。最常用的是 Ctrl 和 Alt 的组合键， 分别用 C 和 M 表示，比如:</p>

<p>C-x 就是 Ctrl+x，
M-x 就是 Alt+x，
C-M-f 就是 Ctrl+Alt+f，
M-% 就是 Alt+%，实际上是 Alt+Shift+5
C-x C-f 就是 Ctrl+x 然后再按 Ctrl+f，中间可以一直按着 Ctrl 也可以松 开，无所谓间隔多长时间。
这样你就可以简单的用 C 和 M 表示 ctrl 和 alt 了。Shift 可以用 S 表示。</p>

<p>键盘上的特殊按键用&lt;>表示，比如回车，空 格，方向键上， 等等，一看就知道什么意思。</p>

<p>不必追究为什么把 alt 写为 M，因为你这次只有30分钟时间。</p>

<h3>下载及安装</h3>

<h4>Windows 用户</h4>

<p>Windows 用户可以去 <a href="http://ntemacs.sf.net">http://ntemacs.sf.net</a> 下载可执行文件或者源代码。建议 下载Emacs23.x 。这是一个 7zip 的自动解压缩包，解压到你喜欢的目录就可以 了。</p>

<p>到这里你大概用了5分钟，当然，下载和解压缩时间不算在内。:)</p>

<h4>Linux 用户 (windows 用户可以忽略)</h4>

<p>可以下载 CVS 的 Emacs 代码，编译一下就好了。下载 CVS Emacs23:</p>

<p><code>
$ cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co -r emacs-unicode-2 emacs
</code>
编译:</p>

<p><code>
$ cd emacs $ ./configure —enable-font-backend —with-xft —with-freetype —with-gtk
</code>
注意 configure 的输出，是否缺少什么东西，没有问题的话就可以 make:</p>

<p><code>
$ make bootstrap
</code>
运行一下 src/emacs 如果没有问题的话就可以安装到默认路径：</p>

<p><code>
$ sudo make install
</code></p>

<h3>常用命令</h3>

<h4>启动和退出</h4>

<p>Windows 用户可以用 Emacs bin 目录下的 runemacs.exe 启动，Linux 用户键 入 emacs &amp; 就可以了。</p>

<p>启动 Emacs 后应该能看到界面<br/>
退出 Emacs 按 C-x C-c (就是 Ctrl+x 接着按 Ctrl+c)。</p>

<h3>打开和保存文件</h3>

<p>启动 Emacs 后，按 C-x C-f，minibuffer (就是 Emacs 最下面一条) 会提示路 径，你可以在这里输入路径名和文件名，或者回车看到这个目录列表。可以 用方向键移动光标到文件名上回车打开文件，或者在子目录上进入子 目录，在 .. 上进入上一层目录。</p>

<p>打开文件后像往常一样编辑，随便按字母键输入一些字符。按 C-x C-s 保存文件。按 C-x k 回车关闭这个 buffer。</p>

<p><strong>小结：按键说明</strong></p>

<p>这里可以看到很多 C-x 开头的组合键，这些通常都是 Emacs 预先定义，全局性 的命令。按了 C-x 不动，一秒钟后 minibuffer 提示 C-x- ，表示 Emacs 正在 等待用户按下一个键。如果你想取消这次按键，可以接下去按 C-g，minibuffer 提示 C-x C-g is undefined 也就是说 Emacs 什么都没有执行。C-g 一般都是取 消命令，取消按键。如果按了 C-x C-h 就会出现一个帮助 buffer，里面是以 C-x 开头的按键帮助。C-h 是一个帮助按键。如何获得更多的帮助，会在之后的 小节介绍。C-c 开头的按键通常是用户自定义的按键和扩展包或扩展模式定义的 按键，同样也可以获得帮助信息。</p>

<h3>选定区域，剪切、复制、粘贴</h3>

<p>好了，到现在为止你大概一共花了 10 分钟吧。</p>

<p>你可以用鼠标拖选一块区域。当然，最好用键盘。按 C-@，minibuffer 提示 Mark set，设定了一个 mark。然后移动光标，这时候你就选定了光标和 Mark 之 间的区域。什么都看不到？你可以按 C-w，这块区域就消失了，C-w 是剪切。按 C-x u 可以撤销上一次的剪切，C-x u 是取消。你肯定想看到你到底选中了哪块 区域，可以按M-x 然后输入 transient-mark-mode ，回车。这次你就可以看到你 选中了哪块区域了。M-x 是执行 Emacs 命令。</p>

<p>【插播广告】</p>

<p>如果是德语键盘，在 Windows 下很可能按不出 C-@, 而 C-又被输入法占去了。所以最好自己设定 set-mark 的按键。比如把 C-&ldquo; 设为 mark 命令。按 C-: (ctrl-冒号) 输入下面这句话，然后回车：</p>

<p>(global-set-key (kbd &ldquo;C-\&rdquo;&ldquo;) &lsquo;set-mark-command)
可以在你的.emacs文件里加入类似的语句</p>

<p>【广告结束】</p>

<p>Emacs 有一个很有用的功能，在你选定了区域之后按 C-x C-x 可以交换光标 (point) 和 Mark 的位置，这样你就可以修改调整你选定的区域了。</p>

<p>按 C-g 取消选定的区域。</p>

<p>重新用 C-@ 选定一块区域，按 M-w，这是复制，移动光标到别处，按 C-y，这是 粘贴。紧接着再按一次 M-y，这时可以看到粘贴的内容变成了上一次剪切的内容。 再按 M-y 又变成之前一次复制的内容。</p>

<p>C-k 可以剪切一行。连续的 C-k 会把剪切的内容放在一起，一次 C-y 就可以把 之前的 n 行一起贴上。</p>

<p>C-x u 可以撤销，不过这个撤销和常规 windows 程序的撤销不太一样。按了 C-x u 撤销后，如果移动一下光标，再按一次 C-x u，可以撤销之前的撤销命令。 这样相当于是 redu。</p>

<p>小结：</p>

<p>C-@ 选定区域
C-w 剪切
M-w 复制
C-y 粘贴
M-y 粘贴剪贴板之前的内容
C-k 剪切一行
C-x u 撤销</p>

<h3>查找</h3>

<p>其 他 windows 程序的查找通常会跳出一个对话框，这很讨厌，会遮住文本内容， 有时候我就会忘了我到底要找什么。Emacs 就不会这样。按 C-s 是查找， minibuffer 提示 I-search: 接下来你可以输入你要找的词，比如想找 windows， 输入 w，Emacs 开始找到 w，光标移动到 w 上，接着输入 i，Emacs 找到 wi， 并注意到Emacs 会同时高亮所有的 wi，接着输入 n，Emacs 找到 win，等等。这 就是 incremetal search，它的好处是，你想要找 windows，但实际上你只要输 入 win 就能定位到 windows 上了，不需要继续输入 dows 了。继续按 C-s 找下 一个匹配的。C-r 往回查找。按回车或者方向键结束本次查找，再按两次 C-s 重 复上次查找，按 C-g 取消查找，光标回到原处。</p>

<p>C-s 或 C-r 也可以用作光标定位，比如想要移到前面 Emacs 处，就可以 C-r Emacs，效率很高，可以说是指哪打哪。</p>

<p>如果查找输入的全是小写，那么这次查找是大小写不敏感的，如果输入字符中有 大写字母，那么这次查找就是大小写敏感的。很智能吧。</p>

<p>C-M-s 或 C-M-r 是正则表达式查找。或者在 C-s 之后按 M-r 也可以切换到正则 表达式查找。这里不仔细讲 Emacs 的正则表达式是怎么样的。那样会多花一个小 时。</p>

<p>替换</p>

<p>M-% 是 query-replace，输入查找内容和替换内容，然后 Emacs 会询问是否要 替换，y 替换，n 不替换，! 替换光标之后所有，q 结束，? 可以得到帮助。</p>

<p>Emacs 的替换有一个很好的特性，可以只在选定区域内进行替换。这样就可以放 心大胆地使用 ! 替换所用，而不用担心超出范围了。</p>

<p>C-M-% 是正则表达式的替换。</p>

<p>小结：</p>

<p>C-s 和 C-r 向前向后查找
C-% 替换
C-M-s 和 C-M-r 向前向后正则表达式查找
C-M-% 正则表达式替换</p>

<h3>寻求帮助</h3>

<p>到这里你用了大概20分钟，基本的文本编辑功能都有了。</p>

<p>接着你可以自己摸索了。</p>

<p>Emacs 提供了极其强大的帮助系统。</p>

<p>C-h t 是一个 tutorial，现在也有不同语言的 tutorial。按 M-x 输入 help-with-tutorial-spec-language 可以选择不同的语言。按 Emacs 可 以帮你补全命令。按两次 会有补全的提示。</p>

<p>C-h a 是 apropos command，你可以输入几个简单的单词，Emacs 可以帮你找到 相应的命令，这个帮助非常好用。比如你想把一个单词全部大写，但不知道该怎 么做，可以 C-h a 输入 upcase word 或者 up word，Emacs 就会找到几个命令， 其中一个是 upcase-word，并且对应的按键是 M-u，你只要把光标移动到单词前 按 M-u 就可以了。</p>

<p>C-h k 是描述某个按键会执行什么。例如你要看看 M-; 是干什么的，按 C-h k， 接着按 M-; 你就会看到 M-; 会运行 comment-dwim，dwim 是 do what i mean 的缩写，这个命令会注释或反注释你选定的区域，如果没有选定区域，会在这一 行后面加上注释。很聪明的命令吧。</p>

<p>C-h c 简单描述某个按键执行什么。</p>

<p>C-h f 描述某个函数</p>

<p>C-h v 描述某个变量</p>

<p>C-h 会提供很多很多帮助信息，C-h ? 会显示有哪些帮助信息。</p>

<h3>简单配置</h3>

<p>Emacs 有超强的可配置性，1000个人可以有1000种配置，可以有自己的键绑定， 有自定义的函数，有自己喜欢的扩展包。配置放在 home 目录下的 .emacs 里， Emacs 启动的时候会自动读取这个文件。启动 Emacs 后，C-x C-f ~/.emacs 会 打开 .emacs 文件，如果不存在的话就是新建这个文件。home 目录在哪里呢？ 可以 M-x getenv home 得 到 home 的位置。Linux 系统很好理解。 Windows 系统，会默认放在 C:\Documents and Settings\username\Application Data 下，有几种方法可以指定 home 的位置：</p>

<p>在 我的电脑->属性->高级->环境变量 里添加一个 HOME 环境变量，指定位 置。
在注册表 [HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs] (如果没有 GNU 或 Emacs，添加一个即可) 添加 HOME 字符串变量，值为指定的 home 路径。
Emacs 配置使用的语言是 Elisp，Emacs 附带非常详细的 Elisp 手册，可以通 过 M-x info 得到。配置 .emacs 一般只需要几个简单语句，比如：</p>

<p>(setq variable-name value) 设置变量值，例如 (setq transient-mark-mode t) 设置选定区域范围高亮
(require &lsquo;extension) 安装一个扩展包。
(load &ldquo;file-name&rdquo;) 使用一个 .el 文件
(global-set-key (kbd &ldquo;C-c f&rdquo;) 'function-name) 全局自定义键绑定
(define-key dired-mode (kbd &ldquo;j&rdquo;) 'dired-next-line) 局部键绑定，只在 dired-mode 起作用
(if &hellip;) 一些简单的判断语句
这里提供一个简单的 .emacs 文件: quick.emacs.el</p>

<p>你可以把它复制到你的 home 目录下并改名为 .emacs 注意有个.</p>

<p>或者用 runemacs.exe -q -l quick.emacs.el 来指定 emacs 使用这个配置文件。</p>

<h3>总结</h3>

<p>到这里差不多就是30分钟吧，介绍一些文本编辑的基本操作。只是为了说明上手 Emacs 其实很简单，而且几乎每一样操作都有比普通 Windows 文本编辑器更好 的特性，比如可以任意调整已选定的区域，更好的复制粘贴机制，更好的撤销机 制，更好的 isearch 查找方式，可以在区域内替换，强大得多的帮助系统，没 有任何限制的扩展性。用了几天或几个星期后就会觉得其他的编辑是多么麻烦和 弱小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在github上使用octopress]]></title>
    <link href="http://saick.net/blog/2013/08/22/zai-githubshang-shi-yong-octopress/"/>
    <updated>2013-08-22T10:55:00+08:00</updated>
    <id>http://saick.net/blog/2013/08/22/zai-githubshang-shi-yong-octopress</id>
    <content type="html"><![CDATA[<p>Octopress是使用ruby语言编写的一套建立在jekyll之上的博客系统，它有一些很独特的特点：</p>

<ol>
<li>使用静态页面；</li>
<li>不使用数据库；</li>
<li>使用markdown标记语言编写文章；</li>
<li>可以与git紧密集成，方便地进行博客的版本管理；</li>
<li>可以于Github Pages集成，不需要单独的web hosting，只要你有github帐号即可。</li>
</ol>


<!-- more -->


<p>这些特点中的第三点到第五点尤其吸引我（第一点和第二点也很酷），于是我花了些时间研究。以下是相关的步骤和心得。</p>

<h4>在你本地安装octopress</h4>

<p>说“安装”可能不太恰当，准确的说是你需要从github上取得octopress的代码并进行些许配置。步骤请参考这里。</p>

<ol>
<li><p>安装RVM(Ruby Version Manager)并使用”Ruby 1.9.2″作为你本地的ruby实现，这事我之前按照这篇文章做过，这里就不详细说了，你也可以按照octopress官方的介绍来安装RVM。</p></li>
<li><p>从github得到octopress代码，运行以下命令：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # If you use RVM, You&rsquo;ll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>ruby &mdash;version  # Should report Ruby 1.9.2&lt;/p>&lt;/li>
</span><span class='line'>&lt;/ol>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>gem install bundler # Install dependencies
</span><span class='line'>bundle install&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>rake install # Install the default Octopress theme</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>配置你本地的octopress，使之可以发布到你的github pages</p>

<p><code>
rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url:
</code></p>

<p>请输入：git@github.com:yourname/yourname.github.com.git (将yourname替换成你的github登录名)</p>

<p>这个步骤rake会做很多事情：</p>

<p>在.git/config中替换origin为你输入的repository，并把原来的origin写到octopress中。
创建新的branch source并切换到这个branch。
在生成的_deploy目录下，初始化git repository为你的repository。
以下是两个git config的内容，just for your information。</p>

<p>```
tchen@tchen-mbp:~/projects/octopress$ cat .git/config
[core]</p>

<pre><code>repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
</code></pre>

<p>[remote &ldquo;octopress&rdquo;]</p>

<pre><code>url = git://github.com/imathis/octopress.git
fetch = +refs/heads/*:refs/remotes/octopress/*
</code></pre>

<p>[branch &ldquo;source&rdquo;]</p>

<pre><code>remote = origin
merge = refs/heads/master
rebase = true
</code></pre>

<p>[remote &ldquo;origin&rdquo;]</p>

<pre><code>url = git@github.com:tyrchen/tyrchen.github.com.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>tchen@tchen-mbp:~/projects/octopress$ cat _deploy/.git/config
[core]</p>

<pre><code>repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
</code></pre>

<p>[remote &ldquo;origin&rdquo;]</p>

<pre><code>url = git@github.com:tyrchen/tyrchen.github.com.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>```</p>

<p>这样就可以做到：你在本地创建博客文章(当然是用markdown写成的)，然后直接deploy到你的github pages repo，github会自动进行发布。也就是说：所有发博客的动作只需要在你本地用命令完成，酷吧！</p>

<p>参考了这里<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a>。</p>

<ul>
<li>1.创建你的github pages repo</li>
</ul>


<p>如果你的github用户名是username，那个就创建一个名称为”username.github.com”的repo，这个repo就是你的github pages repo，更多信息可以参考这里。</p>

<ul>
<li>2.在你本地运行以下命令，octopress会自动帮你进行配置：
<code>
cd your_local_octopress_directory
rake setup_github_pages
</code>
注意：当命令提示你输入github URL时，请使用这个格式的URL: “git@github.com:username/username.github.com.git”</li>
</ul>


<p>当这个命令运行完成之后，你的github pages repo会有两个branches: master branch用于静态页面的发布(“octopress/<em>deploy”的内容)，source branch用于保存你的blog内容（”octopress”目录中除了”</em>deploy”的其它内容）</p>

<p>到这里基本的配置就完成了，你还可以参考这里配置你博客的名称等信息。</p>

<h4>编写并发布文章</h4>

<ul>
<li>1.写文章</li>
</ul>


<p>cd your_local_octopress_directory
rake new_post[&ldquo;Your Title of Your Article&rdquo;]
该命令会在你的”octopress/source/_posts”目录下生成对应的”.markdown”文件，用任意文本编辑器编辑，使用markdown语法编写你的文章。</p>

<ul>
<li>2.生成，预览并发布：
<code>
cd your_local_octopress_directory
rake generate # generate your blog static pages content according to your input.
rake preview # start a web server on "http://localhost:4000", you can preview your blog content.
rake deploy # push your static pages content to your github pages repo ("master" branch)
</code>
还有很重要的一步是把你的修改(文本修改，不包含”_deploy”目录，”deploy”目录保存”rake generate”生成的静态页面内容，会被”rake deploy”命令提交到”master branch”)放到你的github pages(“source” branch)上:
<code>
cd your_local_octopress_directory
git add .
git commit -m 'your message'
git push origin source
</code></li>
</ul>


<h4>个性化</h4>

<p>添加个人域名
在octopress目录下：</p>

<p><code>
$ echo 'blog.yourdomain.com' &gt;&gt; source/CNAME
</code></p>

<p>然后在你的DNS服务商，如 dnspod.cn，添加相应的CNAME指向 yourname.github.com。如果你要使用顶级域名，如 <a href="http://yourdomain.com">http://yourdomain.com</a> 访问你的博客，则需要使用A记录指向 207.97.227.245。详细内容请参考：<a href="http://octopress.org/docs/deploying/github/%E3%80%82">http://octopress.org/docs/deploying/github/%E3%80%82</a></p>

<h4>设置博客</h4>

<p>打开_config.yml，按照 <a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a> 的说明进行设置即可。注意把不需要的asides都删除，免得加载不必要的js，拖累访问速度。如果想把你自己的微博个人秀加在侧栏，请参考：<a href="http://clark1231.iteye.com/blog/1553939%E3%80%82">http://clark1231.iteye.com/blog/1553939%E3%80%82</a></p>

<h4>使用主题</h4>

<p>可使用 <a href="https://github.com/amelandri/darkstripes">https://github.com/amelandri/darkstripes</a> 的主题。使用方法很简单：</p>

<p><code>
$ cd octopress
$ git clone git://github.com/amelandri/darkstripes.git .themes/darkstripes
$ rake install['darkstripes']
$ rake generate
</code></p>

<p>注意你对已有主题的汉化会被覆盖，请确保提交所有更改前你merge了你的改动。</p>

<h4>添加多说</h4>

<p>由于github pages只支持静态文件，所以类似评论这样的功能就只能使用第三方工具。octopress自带disqus的评论系统，但其对国内用户不够友好，另外加载速度也不快。国内disqus的copycat是duoshuo，于是照猫画虎，添加多说的支持进来：</p>

<p>首先在 source/post/ 下创建duoshuo.html:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- Duoshuo Comment BEGIN -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;div class="ds-thread"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>var duoshuoQuery = {short_name:"saick"};
</span><span class='line'>(function() {
</span><span class='line'>    var ds = document.createElement('script');
</span><span class='line'>    ds.type = 'text/javascript';ds.async = true;
</span><span class='line'>    ds.src = 'http://static.duoshuo.com/embed.js';
</span><span class='line'>    ds.charset = 'UTF-8';
</span><span class='line'>    (document.getElementsByTagName('head')[0] 
</span><span class='line'>    || document.getElementsByTagName('body')[0]).appendChild(ds);
</span><span class='line'>})();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;!-- Duoshuo Comment END -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在 source/_layouts/post.html，将对应的disqus代码改为：
注：去掉{与%中间的\</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class=''></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在 source/_config.yml 里，添加：</p>

<p>```</p>

<h1>Duoshuo comments</h1>

<p>duoshuo_name: your_duoshuo_name
```</p>

<p>应该就可以了。可以使用如下命令测试：</p>

<p><code>
$ rake generate
$ rake preview
</code></p>

<h4>添加百度统计</h4>

<p>百度统计可以将生成的script直接添加到 source/post/after_footer.html 就可以。很简单，这里就不详述。</p>

<p>参考：<a href="http://www.cnblogs.com/stevelin/p/3281811.html">http://www.cnblogs.com/stevelin/p/3281811.html</a></p>

<h4>修改READON</h4>

<p>在xxx_post.markdown里添加如下</p>

<p>```</p>

<!-- more -->


<p>```</p>

<p>在_config.yml的excerpt_link:修改为你希望的描述就可以。</p>

<p><code>
excerpt_link: "阅读全文 &amp;rarr;"
</code></p>

<p>From:<a href="http://ibluegrid.info/blog/2013/01/02/octopress-customization-2/">http://ibluegrid.info/blog/2013/01/02/octopress-customization-2/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Apple TV直接收看中国视频]]></title>
    <link href="http://saick.net/blog/2013/06/20/rang-apple-tvzhi-jie-shou-kan-zhong-guo-shi-pin/"/>
    <updated>2013-06-20T14:09:00+08:00</updated>
    <id>http://saick.net/blog/2013/06/20/rang-apple-tvzhi-jie-shou-kan-zhong-guo-shi-pin</id>
    <content type="html"><![CDATA[<p>更新（转自威锋论坛）：<br/>
最近老的DNS方案已不行，已有解决方案，不怕麻烦的弄一下就好。 <a href="http://bbs.weiphone.com/read-htm-tid-6876174.html">传送门</a></p>

<h4>工作原理：</h4>

<p>通过程序将视频网站的HTML转换成XML给Apple TV,于是ATV就能收看贵国视频网站了。</p>

<p>本程序给Apple tv访问的网址 : <a href="http://4.appletv3.sinaapp.com/index.php">http://4.appletv3.sinaapp.com/index.php</a>(其他设备浏览器无效)</p>

<p>此方法许多人都设想过，但是TTVast是第一位做出并共享者！由于有了TTVast的工作，我们后来者的工作就轻松许多，感谢TT!为了方便新研究的朋友，特分享我的源码，链接在页面底部。</p>

<p>TT的微博：<a href="http://weibo.com/u/1400101157">http://weibo.com/u/1400101157</a>
<a href="http://www.ottnt.com/">http://www.ottnt.com/</a> Apple TV论坛</p>

<!-- more -->


<h4>没有自己的DNS</h4>

<p>　　　只需修改Apple TV的DNS（其它网络设置默认），然后地区选择美国，
　　　即可将Apple TV内置网址指向一个新的网站，达到通过Apple TV直接收看贵国视频的愿望。
修改DNS如下：
<code>
180.153.225.136 电信服务器，适合于南方电信的用户使用。TTVast提供
210.129.145.150 适合部分联通用户，以及海外用户使用。TTVast提供
</code>
　　用私人DNS会轻易被他伪装的银行、淘宝等网站来欺骗你，为了安全，请ATV用户使用上面靠谱的。
　　请勿用于Apple TV之外的任何设备（如：手机、PC、路由器等），否则后果自负。
　　</p>

<h4>拥有自己的DNS</h4>

<p>将 <a href="http://trailers.apple.com/appletv/">http://trailers.apple.com/appletv/</a> 路径下的 index.xml 及 application.js转向下面网址的对应文件
<code>
http://180.153.225.136:8000/index.xml ttvas提供
http://210.129.145.150:8000/index.xml ttvas提供
http://4.appletv3.sinaapp.com/index.php Missde提供 - 目前测试中..
</code></p>

<p>本程序：Apple TV DNS PHP代码下载：
<a href="https://code.google.com/p/appletv/downloads/list">https://code.google.com/p/appletv/downloads/list</a></p>

<p>获取音悦台MV下载地址 <a href="http://huoqu.sinaapp.com/video/">http://huoqu.sinaapp.com/video/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Div+CSS排版]]></title>
    <link href="http://saick.net/blog/2013/06/08/web-div-plus-csspai-ban/"/>
    <updated>2013-06-08T16:08:00+08:00</updated>
    <id>http://saick.net/blog/2013/06/08/web-div-plus-csspai-ban</id>
    <content type="html"><![CDATA[<h6>显示效果见源网页：<a href="http://www.java3z.com/cwbwebhome/article/article9/ht26.html">http://www.java3z.com/cwbwebhome/article/article9/ht26.html</a></h6>

<p>用DIV把元素定义为块对象，用CSS设置对象的格式和位置。</p>

<p>CSS+DIV的排版方式是目前应用很广的排版方式，它的使用非常灵活，可制作非常复杂的版面。以下是几种常用的CSS+DIV的排版技术。</p>

<p>纵向排列元素
<code>
用 &lt;div&gt; 标签定义块对象，由于 &lt;div&gt; 标签本身有换行作用，各元素自然排成一列。用CSS的 margin 属性设置对象间的距离，用 padding 属性调整对象的宽度和高度。
</code></p>

<!-- more -->


<p>举例：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="menu">
</span><span class='line'>&lt;div class="dd">HTML&lt;/div>
</span><span class='line'>&lt;div class="dd">CSS&lt;/div>
</span><span class='line'>&lt;div class="dd">JavaScript&lt;/div>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
<code>
用 &lt;div&gt; 标签定义块对象，用CSS的 float 属性设置对象的浮动。
</code>
举例：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="box">
</span><span class='line'>&lt;div id="b1">&lt;/div>
</span><span class='line'>&lt;div id="b2">&lt;/div>
</span><span class='line'>&lt;div id="b3">&lt;/div>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>用列表排列元素</p>

<p><code>
用 &lt;ul&gt; 或 &lt;ol&gt; 标签制作列表，用CSS设置列表项目的效果。这种方法主要用于规则排列的文本块、图片、控件等。
</code></p>

<p>举例：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div class="list1">
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>[1]&lt;/li>
</span><span class='line'>&lt;li>[2]&lt;/li>
</span><span class='line'>&lt;li>[3]&lt;/li>
</span><span class='line'>&lt;li>[4]&lt;/li>
</span><span class='line'>&lt;/ul>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>[1] [2] [3] [4]
用绝对坐标定位元素</p>

<p>浏览器窗口的左上角坐标为 (0,0)，x 坐标向右，y 坐标向下。</p>

<p>CSS提供了几个位置属性，可以设置对象在页面中的位置。</p>

<p>position：当它取值为 absolute 时，表示对象使用绝对坐标定位。</p>

<p>left、top：对象的左上角坐标。</p>

<p>right、bottom：对象的右下角坐标。</p>

<p>z-index：对象的层叠顺序。取值为一个整数。</p>

<p>用绝对坐标定位的对象是可以发生重叠的，如果没有指定层叠顺序，则后定义的对象位于上层，如果指定了“z-index”值，则值大的位于上层。</p>

<p>举例：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="m1">&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="m2">&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="m3">&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们一般不推荐使用这种方法制作网页，这种网页调整起来非常困难，只是在一些特殊情况下使用。</p>

<p>用相对坐标定位元素</p>

<p>父对象的左上角坐标为 (0,0)，对象的坐标是相对于父对象的。</p>

<p>position：当它取值为 relative 时，表示对象使用相对坐标定位。</p>

<p>left、top：对象的左上角坐标。</p>

<p>right、bottom：对象的右下角坐标。</p>

<p>以上坐标也可理解为相对于父对象的左上角偏移的距离。</p>

<p>注意：用相对坐标定位的对象不允许层叠。此时 z-index 属性无效。</p>

<p>用相对坐标定位对象在实现一些不规则的排列或拼接时有很好的效果。</p>

<p>举例：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;div id="area">
</span><span class='line'>&lt;img id="h1" src="./image/face19.gif" />
</span><span class='line'>&lt;img id="h2" src="./image/face19.gif" />
</span><span class='line'>&lt;img id="h3" src="./image/face19.gif" />
</span><span class='line'>&lt;img id="h4" src="./image/face19.gif" />
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
