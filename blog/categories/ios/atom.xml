<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2013-09-25T09:36:53+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode工程目录的 folder 和 group的区别(蓝色和黄色文件夹的区别)]]></title>
    <link href="http://saick.net/blog/2013/09/23/xcodegong-cheng-mu-lu-de-folder-he-groupde-qu-bie-lan-se-he-huang-se-wen-jian-jia-de-qu-bie/"/>
    <updated>2013-09-23T23:58:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/23/xcodegong-cheng-mu-lu-de-folder-he-groupde-qu-bie-lan-se-he-huang-se-wen-jian-jia-de-qu-bie</id>
    <content type="html"><![CDATA[<p>XCode工程目录里面，有时你会发现2个不同颜色的文件夹，一种是蓝色的，一种是黄色的，最常见的是黄色的，我也是最近学习html5的时候，发现还有蓝色的文件夹呢，
来上图看下吧</p>

<p><img class="<a" src="href="http://www.saick.net/images/blog/2013-09-23-1.png">http://www.saick.net/images/blog/2013-09-23-1.png</a>"></p>

<p> 上图所示，蓝色的是folder 黄色的是group。 那么它们有什么区别呢？
1. group 和 folder的区别
group 一般只在你的工程中是文件夹的形式，但是在本地的目录中还是以散乱的形式放在一起的，除非你是从外部以group的形式引用进来的。
folder 只能作为资源，整个引用进项目，不能编译代码，也就是说，以folder形式引用进来的文件，不能被放在complie sources列表里面。
2. 以folder的形式引用文件
我拖动外部的文件夹 WebViewJavascriptBridge 到我的xcode工程目录下面
会弹出对话框，如图</p>

<p><img class="<a" src="href="http://www.saick.net/images/blog/2013-09-23-2.png">http://www.saick.net/images/blog/2013-09-23-2.png</a>"></p>

<p>copy，是指文件不在项目的目录下面，例如项目在桌面上，文件在 Download 下，你 copy 就会被复制到项目里面。如果文件原本就在项目里面，则不执行任何操作。这里不管它，重点是 下面的单选框。
这里我选择的是以folder的形式引用文件夹，点击完成，如下图所示，文件夹是蓝色的，并且编译文件列表里面没有 webviewjavascriptBridge.m这个文件，证明文件夹引用，只会引用文件夹，文件夹里面的东西都会直接拷贝到 bundle 包，不参与编译。</p>

<p><img class="<a" src="href="http://www.saick.net/images/blog/2013-09-23-3.png">http://www.saick.net/images/blog/2013-09-23-3.png</a>"></p>

<ol>
<li>以group的形式引用文件
回到1的第一步，选中 create groups for any added folders ，点击完成，则如下图所示，文件夹是黄色的，并且编译文件列表里面神奇的存在了 webviewjavascriptBridge.m这个文件</li>
</ol>


<p><img class="<a" src="href="http://www.saick.net/images/blog/2013-09-23-4.png">http://www.saick.net/images/blog/2013-09-23-4.png</a>"></p>

<p>现在，终于明白了 folder和 group的区别了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用unit test，资源获取注意事项]]></title>
    <link href="http://saick.net/blog/2013/09/23/shi-yong-unit-test%2Czi-yuan-huo-qu-zhu-yi-shi-xiang/"/>
    <updated>2013-09-23T23:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/23/shi-yong-unit-test,zi-yuan-huo-qu-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p> 使用XCode4.5 下使用unit test时，发现直接使用
 <code>
 UIImage *imgA = [UIImage imageNamed:@"asdf"];
 NSString *resourcePath = [[NSBundle mainBundle] pathForResource:@”xxx.json”ofType:nil];
</code>
 得不到资源，调查一下原来是这样，怪不得人们写代码不想用imageNamed呢。</p>

<h3>一、基础知识</h3>

<h4>1，官方教程</h4>

<p>　　单元测试包含“逻辑测试”和“应用测试”两种类型，分别对应不同的配置方式：
　　逻辑测试(Logic Unit Test):测试跟App运行过程无关的纯逻辑代码，比如随机数算法，数据结构一类的。
　　应用测试(Application Unit test):测试跟App运行环境相关的代码，比如目录、文件操作，Core Data存取等。
　　在Xcode4.5中，创建App时会自动创建Application Unit Test项目。</p>

<h4>2，示例代码。</h4>

<p>　　在Xcode documentation中，可以找到“iPhoneUnitTests”这个例子项目。这个项目会教你怎么写单元测试代码。</p>

<h3>二、进阶问题</h3>

<h4>1，访问被测类</h4>

<p>(在Logic Unit Test模式的要求，Application Unit Test不必设置) 比如在App中定义了FundManager.h这个接口，要想在单元测试中访问这个接口：</p>

<pre><code>1，#import ”FundManager.h"    
2，在单元测试的target中，Build Phases选项卡，Compile Sources区域中，增加FundManager.m文件。  
</code></pre>

<p>　　否则会在链接阶段找不到FundManager接口。
　　</p>

<h4>2，向单元测试目标中添加资源</h4>

<p>　　比如要测试的某个接口需要UIImage对象，需要一张图片来初始化UIImage对象，直接调用[UIImage imageNamed:@”xxx”]是不行的，因为这个接口要从App的main bundle中加载图像，不能直接访问添加到单元测试项目中的资源，下面代码演示了两个bundle目录的不同：</p>

<p><code>
Resource Paths are Different!
Many assumptions that your bundle is the main bundle will cause problems when testing. (Especially when adding tests to existing code) Look at the difference in bundles, the main bundle isn’t what you’d expect in a unit test.
NSString *mainBundlePath = [[NSBundle mainBundle] resourcePath];
NSString *directBundlePath = [[NSBundle bundleForClass:[self class]] resourcePath];
NSLog(@”Main Bundle Path: %@”, mainBundlePath);
NSLog(@”Direct Path: %@”, directBundlePath);
NSString *mainBundleResourcePath = [[NSBundle mainBundle] pathForResource:@”Frame.png”ofType:nil];
NSString *directBundleResourcePath = [[NSBundle bundleForClass:[selfclass]] pathForResource:@”Frame.png” ofType:nil];
NSLog(@”Main Bundle Path: %@”, mainBundleResourcePath);
NSLog(@”Direct Path: %@”, directBundleResourcePath);
</code>
解决方法：
<code>
Load resources using the bundle for the current classNSString *imagePath = [[NSBundle bundleForClass:[self class]] pathForResource:theImageName ofType:nil];
UIImage *image = [UIImage imageWithContentsOfFile:imagePath];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite使用 iOS平台]]></title>
    <link href="http://saick.net/blog/2013/09/03/sqliteshi-yong-iosping-tai/"/>
    <updated>2013-09-03T13:35:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/03/sqliteshi-yong-iosping-tai</id>
    <content type="html"><![CDATA[<h3>不太常用，但很关键命令</h3>

<h4>1.整理数据库：vacuum</h4>

<p>VACUUM命令是SQLite的一个扩展功能，模仿PostgreSQL中的相同命令而来。若调用VACUUM带一个表名或索引名， 则将整理该表或索引。在SQLite 1.0中，VACUUM命令调用gdbm_reorganize()整理后端数据库文件。</p>

<p>SQLITE 2.0.0中去掉了GDBM后端，VACUUM无效。在2.8.1版中，VACUUM被重新实现。现在索引名或表名被忽略。</p>

<p>当数据库中的一个对象(表，索引或触发器)被撤销，会留下空白的空间。它使数据库比需要的大小更大，但能加快插入速度。实时的插入和删除会使得数据库文件结构混乱，减慢对数据库内容访问的速度。 VACUUM命令复制主数据库文件到临时数据库并从临时数据库重新载入主数据库，以整理数据库文件。这将除去空白页，使表数据彼此相邻排列，并整理数据库文件结构。不能对附加数据库文件进行以上操作。</p>

<p>若当前有活动事务，该命令无法起作用。对于in-memory数据库，该命令无效。</p>

<p>SQLite3.1中，可以通过使用auto-vacuum模式取代VACUUM命令，使用auto_vacuum pragma开启该模式。
扩展阅读：<a href="http://www.sqlite.org/lang_vacuum.html">http://www.sqlite.org/lang_vacuum.html</a></p>

<h4>2.导出数据库：.dump</h4>

<p>.output file.sql</p>

<p>.dump</p>

<p>.output stdout</p>

<h4>3.导入数据库：.read 和.import</h4>

<p>.read file.sql</p>

<p>.import [file][table]</p>

<h3>SQLite不支持的常用操作</h3>

<ul>
<li>1 高级联结：SQlite支持“左外部联结（LEFT OUTER JOIN）”，不支持“右外部联结（RIGHT OUTER JOIN）”和“全外部联结（FULL OUTER JOIN）”。</li>
<li>2 修改表操作：SQlite支持“重命名表（RENAME TABLE）”，使用“ALTER TABLE给表添加新列”。不支持使用“ALTER TABLE”进行“删除列（DROP COLUMN）”，“修改列（ALTER COLUMN）”，“添加约束（ADD CONSTRAINT）”等。</li>
<li>3 触发器支持不完整：SQlite支持“行级触发器（FOR EACH ROW）”，不支持“语句级触发器（FOR EACH STATEMENT）”。</li>
<li>4 视图只能读不能写：SQlite不能在一个视图上使用“删除（DELETE）”，“插入（INSERT）”和“更新（UPDATE）”语句。但是可以创建一个触发器，当对表进行“DELETE”，“INSERT”或者“UPDATE”操作时激活该触发器，在该触发器的body部分做所需的操作。</li>
<li>5 不支持GRANT和REVOKE语句：因为SQlite只是去读写普通的磁盘文件，所以唯一可以应用到SQlite数据库的访问权限（控制），只有底层操作系统的普通的文件访问权限。所以那些client/server模式的数据库上通常具有的GRANT和REVOKE命令，SQlite并不支持，因为它们对于“嵌入式的数据库引擎（embedded database engine）”毫无意义。</li>
</ul>


<h4>官方SQL语法</h4>

<p><a href="http://www.sqlite.org/lang_vacuum.html">http://www.sqlite.org/lang_vacuum.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods进行iOS程序的开源库依懒管理]]></title>
    <link href="http://saick.net/blog/2013/09/03/shi-yong-cocoapodsjin-xing-ioscheng-xu-de-kai-yuan-ku-yi-lan-guan-li/"/>
    <updated>2013-09-03T11:49:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/03/shi-yong-cocoapodsjin-xing-ioscheng-xu-de-kai-yuan-ku-yi-lan-guan-li</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具, 或者是中央代码仓库。比如</p>

<ul>
<li>Java: maven，Ivy</li>
<li>Ruby: gems</li>
<li>Python: pip, easy_install</li>
<li>Nodejs: npm</li>
</ul>


<p>随着iOS开发者的增多，业界也出现了为iOS程序提供依赖管理的工具，这个工具叫：CocoaPods。</p>

<h3>CocoaPods简介</h3>

<p>CocoaPods是一个负责管理iOS项目中第三方开源代码的工具。CocoaPods项目的源码在Github上管理。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>拿我之前开发的粉笔网iPhone客户端为例，其使用了14个第三方开源库。在没有使用CocoaPods以前，我需要：</p>

<p>把这些第三方开源库的相关文件复制到项目中，或者设置成git的submodule，然后这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如ASI网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics and zlib。</p>

<p>对于RegexKitLite这个正则表达式库，我还需要设置-licucore的编译参数
手工管理这些依赖包的更新。</p>

<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行pod install。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<h3>CocoaPods的安装和使用介绍</h3>

<h4>安装</h4>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：
<code>
$ gem install cocoapods
$ pod setup
</code></p>

<h4>使用</h4>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<p><code>
eachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></p>

<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<p><code>
cd "your project home"
pod install
</code></p>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<p>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。
每次更改了Podfile文件，你需要重新执行一次pod install命令。</p>

<h4>查找第三方库</h4>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod search json&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> AnyJSON (0.0.1)
</span><span class='line'>   Encode / Decode JSON by any means possible.
</span><span class='line'>   &ndash; Homepage: &lt;a href="https://github.com/mattt/AnyJSON">https://github.com/mattt/AnyJSON&lt;/a>
</span><span class='line'>   &ndash; Source:   &lt;a href="https://github.com/mattt/AnyJSON.git">https://github.com/mattt/AnyJSON.git&lt;/a>
</span><span class='line'>   &ndash; Versions: 0.0.1 [master repo]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> JSONKit (1.5pre)
</span><span class='line'>   A Very High Performance Objective-C JSON Library.
</span><span class='line'>   &ndash; Homepage: &lt;a href="https://github.com/johnezang/JSONKit">https://github.com/johnezang/JSONKit&lt;/a>
</span><span class='line'>   &ndash; Source:   git://github.com/johnezang/JSONKit.git
</span><span class='line'>   &ndash; Versions: 1.5pre, 1.4 [master repo]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> MTJSONDictionary (0.0.4)
</span><span class='line'>   An NSDictionary category for when you&rsquo;re working with it converting to/from JSON. DEPRECATED, use MTJSONUtils
</span><span class='line'>   instead.
</span><span class='line'>   &ndash; Homepage: &lt;a href="https://github.com/mysterioustrousers/MTJSONDictionary.git">https://github.com/mysterioustrousers/MTJSONDictionary.git&lt;/a>
</span><span class='line'>   &ndash; Source:   &lt;a href="https://github.com/mysterioustrousers/MTJSONDictionary.git">https://github.com/mysterioustrousers/MTJSONDictionary.git&lt;/a>
</span><span class='line'>   &ndash; Versions: 0.0.4, 0.0.3, 0.0.2 [master repo]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> MTJSONUtils (0.1.0)
</span><span class='line'>   An NSObject category for working with JSON.
</span><span class='line'>   &ndash; Homepage: &lt;a href="https://github.com/mysterioustrousers/MTJSONUtils.git">https://github.com/mysterioustrousers/MTJSONUtils.git&lt;/a>
</span><span class='line'>   &ndash; Source:   &lt;a href="https://github.com/mysterioustrousers/MTJSONUtils.git">https://github.com/mysterioustrousers/MTJSONUtils.git&lt;/a>
</span><span class='line'>   &ndash; Versions: 0.1.0, 0.0.1 [master repo]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> SBJson (3.1.1)
</span><span class='line'>   This library implements strict JSON parsing and generation in Objective-C.
</span><span class='line'>   &ndash; Homepage: &lt;a href="http://stig.github.com/json-framework/">http://stig.github.com/json-framework/&lt;/a>
</span><span class='line'>   &ndash; Source:   &lt;a href="https://github.com/stig/json-framework.git">https://github.com/stig/json-framework.git&lt;/a>
</span><span class='line'>   &ndash; Versions: 3.1.1, 3.1, 3.0.4, 2.2.3 [master repo]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&ndash;> TouchJSON (1.0)
</span><span class='line'>   TouchJSON is an Objective-C based parser and generator for JSON encoded data.
</span><span class='line'>   &ndash; Homepage: &lt;a href="https://github.com/TouchCode/TouchJSON">https://github.com/TouchCode/TouchJSON&lt;/a>
</span><span class='line'>   &ndash; Source:   &lt;a href="https://github.com/TouchCode/TouchJSON.git">https://github.com/TouchCode/TouchJSON.git&lt;/a>
</span><span class='line'>   &ndash; Versions: 1.0 [master repo]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>生成第三方库的帮助文档</p>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到XCode中，那么用brew安装appledoc即可：</p>

<p><code>
brew install appledoc
</code></p>

<p>关于appledoc，我在今年初的另一篇博客《使用Objective-C的文档生成工具:appledoc》中有专门介绍。它最大的优点是可以将帮助文档集成到XCode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<h3>原理</h3>

<p>大概研究了一下CocoaPods的原理，它是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<p>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。
对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。
CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。
Have fun!</p>

<p>转自：
Posted by 唐巧 Dec 2nd, 2012   iOS
自由转载-非商用-非衍生-保持署名 | Creative Commons BY-NC-ND 3.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods的使用]]></title>
    <link href="http://saick.net/blog/2013/09/02/cocoapodsde-shi-yong/"/>
    <updated>2013-09-02T11:00:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/02/cocoapodsde-shi-yong</id>
    <content type="html"><![CDATA[<h5>问题来源：</h5>

<p>在开发iOS的app时，我们时常需要引用第三方Open Source套件来简化开发，一般情况下，我们可以采用Add Files to的方式将其加入到目前的工程中，但也存在一些问题，比如版本演进的控制问题，当前工程引用的第三方库的清单等。</p>

<h4>什么是CocoaPods？</h4>

<p>CocoaPods是一个依赖关系管理工具，用于管理Objective-C工程项目中各种Library。</p>

<h4>安装CocoaPods</h4>

<p>由于CocoaPods是ruby的gem，需要首先安装RubyGems，mac电脑一般都已经安装好了ruby，但可能需要更新一下你的RubyGems（注意system前面是两个横线）
<code>
[plain] view plaincopy
sudo gem update --system  
</code>
安装command line工具
确保Xcode中安装了Command Line Tools，打开Xcode->Preferences->Downloads->Components，点一下“Install”按钮
安装CocoaPods</p>

<p>命令行输入：
<code>
[plain] view plaincopy
sudo gem install cocoapods  
pod setup  
</code></p>

<p>然后就可以开始使用了。</p>

<p>用pod search Github上的套件名称就可以找到相应的说明，如
<code>
[plain] view plaincopy
pod search nimbus  
</code></p>

<p>会输出</p>

<p>```
[plain] view plaincopy
&ndash;> Nimbus (1.0.0)<br/>
   An iOS framework whose growth is bounded by O(documentation).<br/>
   &ndash; Homepage: <a href="http://docs.nimbuskit.info/index.html  ">http://docs.nimbuskit.info/index.html  </a>
   &ndash; Source:   <a href="https://github.com/jverkoey/nimbus.git  ">https://github.com/jverkoey/nimbus.git  </a>
   &ndash; Versions: 1.0.0, 0.9.3, 0.9.2, 0.9.1, 0.9.0 [master repo]<br/>
   &ndash; Sub specs:</p>

<pre><code>     - Nimbus/Core (1.0.0)  
     - Nimbus/Badge (1.0.0)  
     - Nimbus/CSS (1.0.0)  
     - Nimbus/AttributedLabel (1.0.0)  
     - Nimbus/Interapp (1.0.0)  
     - Nimbus/Launcher (1.0.0)  
     - Nimbus/Models (1.0.0)  
     - Nimbus/NetworkControllers (1.0.0)  
     - Nimbus/NetworkImage (1.0.0)  
     - Nimbus/Overview (1.0.0)  
     - Nimbus/PagingScrollView (1.0.0)  
     - Nimbus/Photos (1.0.0)  
     - Nimbus/Operations (1.0.0)  
     - Nimbus/Operations/JSON (1.0.0)  
     - Nimbus/WebController (1.0.0)  
</code></pre>

<p>```</p>

<h3>使用CocoaPods管理第三方库</h3>

<p>在工程目录下，新建一个空白的Podfile文档，然后在里面添加内容</p>

<p><code>
[plain] view plaincopy
platform:ios  
pod 'AFNetworking', '1.1.0'  
</code></p>

<p>保存时候，开始配置你的工程，终端中输入</p>

<p><code>
[plain] view plaincopy
pod install  
</code></p>

<p>执行完后，CocoaPods在工程目录创建了一个文件夹“Pods”，这个文件夹存放所有依赖的库，另外还创建了一个.workspace文件
注意：配置好之后必须用.workspace文件打开工程，而不是.xcodeproj.
后续：</p>

<p>在使用过程中，有可能会遇到类似下面的问题：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[plain] view plaincopy
</span><span class='line'>Resolving dependencies for target `default' (iOS 4.3)&lt;br/>
</span><span class='line'>[!] AFNetworking (1.1.0) is not compatible with iOS 4.3.&lt;br/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>解决方法，修改Podfile文档
<code>
[plain] view plaincopy
platform:ios, '5.0'  
</code></p>

<p>以上可参考stackoverflow
转自：<a href="http://blog.csdn.net/numbbuaa/article/details/8549018">http://blog.csdn.net/numbbuaa/article/details/8549018</a></p>
]]></content>
  </entry>
  
</feed>
