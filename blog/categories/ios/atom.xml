<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Saick Blog - 专注技术，乐在其中]]></title>
  <link href="http://saick.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2013-10-17T10:44:08+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS应用处理崩溃的几种方法]]></title>
    <link href="http://saick.net/blog/2013/10/16/iosying-yong-chu-li-beng-kui-de-ji-chong-fang-fa/"/>
    <updated>2013-10-16T23:31:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/16/iosying-yong-chu-li-beng-kui-de-ji-chong-fang-fa</id>
    <content type="html"><![CDATA[<p>在开发IOS app的过程中,XCode在遇到程序崩溃时打印的信息一般时比较少的。
在iOS7时，这个情况好像有些一些变化，但不太明确，也不太稳定。</p>

<h3>1.在XCode中使用一个通用断点</h3>

<p>在XCode中打开工程，在左边的工程导航栏中选中断点,点击下放的＋号,选择“Add Exception BreakPoint”。点done即可。</p>

<h3>2.开启NSZombieEnabled等调试选项</h3>

<p>XCode->Product->Scheme->Edit Scheme->Run XXX.app->Arguments
在Environment Variables中增加下面属性并都配置为YES。</p>

<p><code>
MallocStackLogging
MallocStackLoggingNoCompact
NSAutoreleaseFreedObjectCheckEnabled
NSDebugEnabled
NSZombieEnabled
</code></p>

<p>在实际使用中发现，使用了上述配置之后，如果能在模拟器上运行效果更佳。比如,真机调试时遇到过如下错误：</p>

<p><code>
-[CALayer retain]: message sent to deallocated instance 0x1d418a30
</code></p>

<p>使用网上很多地方都提到的方法：</p>

<p><code>
info malloc-history 0x1d418a30
XCode提示:Undefined info command: "malloc-history".  Try "help info".
</code>
针对这种情况可以参考:<a href="http://stackoverflow.com/questions/3851565/using-gdb-info-malloc-command-within-xcode-iphone-dev,%E9%87%8C%E9%9D%A2%E5%B0%B1%E8%AF%B4%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E5%9C%A8%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E4%BC%BCmalloc-history%E7%9A%84gdb%E8%B0%83%E8%AF%95%E5%8A%9F%E8%83%BD%E3%80%82">http://stackoverflow.com/questions/3851565/using-gdb-info-malloc-command-within-xcode-iphone-dev,%E9%87%8C%E9%9D%A2%E5%B0%B1%E8%AF%B4%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E5%9C%A8%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B1%BB%E4%BC%BCmalloc-history%E7%9A%84gdb%E8%B0%83%E8%AF%95%E5%8A%9F%E8%83%BD%E3%80%82</a></p>

<p><strong>其中最主要的还是</strong> <em>NSZombieEnabled</em>, 这个解决EXC_BAD_ACCESS还是很有用的。
具体参考这个：<a href="http://www.cocoachina.com/macdev/objc/2011/0219/2661.html">http://www.cocoachina.com/macdev/objc/2011/0219/2661.html</a></p>

<h3>3.增加异常处理[理论上和"在XCode中使用一个通用断点"效果类似]</h3>

<p>写iOS代码的时候,经常会遇到程序崩溃在main函数的入口处并出现类似"First throw call stack"这样的错误。为了更好的知道崩溃的原因,我们可以在AppDelegate中定义一个方法, 用于处理异常:</p>

<p>```
void caughtException(NSException *exception)
{</p>

<pre><code>NSLog(@"CRASH: %@", exception);  
NSLog(@"Stack Trace: %@", [exception callStackSymbols]);  
// Internal error reporting 
</code></pre>

<p>}
```
另外，在打印时，也可以使用GTM，GTMStackTraceFromException(exception)，跟系统的类似。</p>

<p>然后在应用启动时，设置这个方法作为自己的自定义异常回调：</p>

<p>```
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>NSSetUncaughtExceptionHandler(&amp; caughtException); 
</code></pre>

<p>}
```
在定义了这个回调之后，崩溃是的控制台信息一般都会一目了然，我们甚至可以看出是那个类的哪一行出问题了。</p>

<h3>4.signal处理，并提示。</h3>

<p>启动信号处理</p>

<p>```</p>

<pre><code>signal(SIGABRT, signalHandler);
signal(SIGILL, signalHandler);
signal(SIGSEGV, signalHandler);
signal(SIGFPE, signalHandler);
signal(SIGBUS, signalHandler);
signal(SIGPIPE, signalHandler);
</code></pre>

<p>```</p>

<p>其它相关代码
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>include &lt;libkern/OSAtomic.h>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>include &lt;execinfo.h>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>NSString * const UncaughtExceptionHandlerSignalExceptionName = @&ldquo;UncaughtExceptionHandlerSignalExceptionName&rdquo;;
</span><span class='line'>NSString * const UncaughtExceptionHandlerSignalKey = @&ldquo;UncaughtExceptionHandlerSignalKey&rdquo;;
</span><span class='line'>NSString * const UncaughtExceptionHandlerAddressesKey = @&ldquo;UncaughtExceptionHandlerAddressesKey&rdquo;;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>volatile int32_t UncaughtExceptionCount = 0;
</span><span class='line'>const int32_t UncaughtExceptionMaximum = 10;
</span><span class='line'>const NSInteger UncaughtExceptionHandlerSkipAddressCount = 0;
</span><span class='line'>const NSInteger UncaughtExceptionHandlerReportAddressCount = 100;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>&lt;p>(NSArray &lt;em>)backTrace
</span><span class='line'>{
</span><span class='line'>void&lt;/em> callstack[1024];
</span><span class='line'>int frames = backtrace(callstack, 1024);
</span><span class='line'>char **strs = backtrace_symbols(callstack, frames);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>int i;
</span><span class='line'>NSMutableArray *backtrace = [NSMutableArray arrayWithCapacity:frames];
</span><span class='line'>for (i = UncaughtExceptionHandlerSkipAddressCount;
</span><span class='line'>     i &lt; UncaughtExceptionHandlerSkipAddressCount + UncaughtExceptionHandlerReportAddressCount;
</span><span class='line'>     i++)
</span><span class='line'>{
</span><span class='line'>  if (frames &lt;= i)
</span><span class='line'>    break;
</span><span class='line'>  [backtrace addObject:[NSString stringWithUTF8String:strs[i]]];
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>free(strs);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>return backtrace;
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>(void)alertView:(UIAlertView *)anAlertView clickedButtonAtIndex:(NSInteger)anIndex
</span><span class='line'>{
</span><span class='line'>if (anIndex == 0) {
</span><span class='line'>  _dismissed = YES;
</span><span class='line'>}
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>(void)handleException:(NSException &lt;em>)exception
</span><span class='line'>{
</span><span class='line'>UIAlertView &lt;/em>alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@&ldquo;Unhandled exception&rdquo;, nil)
</span><span class='line'>                                                message:[NSString stringWithFormat:NSLocalizedString(@&ldquo;You can try to continue but the application may be unstable.\n&rdquo; @&ldquo;%@\n%@&rdquo;, nil), [exception reason], [[exception userInfo] objectForKey:UncaughtExceptionHandlerAddressesKey]]
</span><span class='line'>                                               delegate:self
</span><span class='line'>                                      cancelButtonTitle:NSLocalizedString(@&ldquo;Quit&rdquo;, nil)
</span><span class='line'>                                      otherButtonTitles:NSLocalizedString(@&ldquo;Continue&rdquo;, nil), nil];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[alert show];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>CFRunLoopRef runLoop = CFRunLoopGetCurrent();
</span><span class='line'>CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>while (!_dismissed) {
</span><span class='line'>  for (NSString &lt;em>mode in (NSArray &lt;/em>)CFBridgingRelease(allModes)) {
</span><span class='line'>    CFRunLoopRunInMode((CFStringRef)CFBridgingRetain(mode), 0.001, false);
</span><span class='line'>  }
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>CFRelease(allModes);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>NSString *log = [NSString stringWithFormat:@&ldquo;%@\n\n info:\n%@&rdquo;, exception, exception.userInfo];
</span><span class='line'>[[DebugUtil sharedDebug] LogException:log];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>NSSetUncaughtExceptionHandler(NULL);
</span><span class='line'>signal(SIGABRT, SIG_DFL);
</span><span class='line'>signal(SIGILL, SIG_DFL);
</span><span class='line'>signal(SIGSEGV, SIG_DFL);
</span><span class='line'>signal(SIGFPE, SIG_DFL);
</span><span class='line'>signal(SIGBUS, SIG_DFL);
</span><span class='line'>signal(SIGPIPE, SIG_DFL);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) {
</span><span class='line'>  kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);
</span><span class='line'>} else {
</span><span class='line'>  [exception raise];
</span><span class='line'>}
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>NSString * getAppInfo()
</span><span class='line'>{
</span><span class='line'>  NSString *appInfo = [NSString stringWithFormat:@&ldquo;App : %@ %@(%@)\nDevice : %@\nOS Version : %@ %@\nUDID : %@\n&rdquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                   [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleDisplayName"],
</span><span class='line'>                   [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"],
</span><span class='line'>                   [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleVersion"],
</span><span class='line'>                   [UIDevice currentDevice].model,
</span><span class='line'>                   [UIDevice currentDevice].systemName,
</span><span class='line'>                   [UIDevice currentDevice].systemVersion,
</span><span class='line'>                   /*[UIDevice currentDevice].uniqueIdentifier*/@""];
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  return appInfo;
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>void signalHandler(int signal)
</span><span class='line'>{
</span><span class='line'>  int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  if (exceptionCount > UncaughtExceptionMaximum) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>return;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  NSArray *callStack = [DebugUtil backTrace];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  [userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  [[[DebugUtil alloc] init] performSelectorOnMainThread:@selector(handleException:) withObject: [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName reason:[NSString stringWithFormat: NSLocalizedString(@&ldquo;Signal %d was raised.\n&rdquo; @&ldquo;%@&rdquo;, nil), signal, getAppInfo()] userInfo:userInfo] waitUntilDone:YES];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>第4部分 原文：<a href="http://www.cocoachina.com/newbie/tutorial/2012/0829/4672.html">http://www.cocoachina.com/newbie/tutorial/2012/0829/4672.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在应用中从竖屏模式强制转换为横屏模式 & 状态栏白边问题]]></title>
    <link href="http://saick.net/blog/2013/10/14/zai-ying-yong-zhong-cong-shu-ping-mo-shi-qiang-zhi-zhuan-huan-wei-heng-ping-mo-shi/"/>
    <updated>2013-10-14T16:28:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/14/zai-ying-yong-zhong-cong-shu-ping-mo-shi-qiang-zhi-zhuan-huan-wei-heng-ping-mo-shi</id>
    <content type="html"><![CDATA[<h4>序：状态栏白边问题解决</h4>

<p>在旋转前，先隐藏掉状态栏，再设置相关的Frame。（别犯低级错误即可）</p>

<p>在 iPhone 应用里，有时我们想强行把显示模式从纵屏改为横屏（反之亦然），CocoaChina 会员 “alienblue” 为我们提供了两种思路</p>

<h3>第一种：通过人为的办法改变view.transform的属性。</h3>

<p>具体办法：</p>

<p><code>view.transform</code>一般是View的旋转，拉伸移动等属性，类似<code>view.layer.transform</code>，区别在于<code>view.transform</code>是二维的，也就是使用仿射的办法通常就是带有前缀CGAffineTransform的类（可以到API文档里面搜索这个前缀的所有类），而<code>view.layer.transform</code>可以在3D模式下面的变化，通常使用的都是前缀为CATransform3D的类。</p>

<p>   这里要记住一点，当你改变过一个<code>view.transform</code>属性或者<code>view.layer.transform</code>的时候需要恢复默认状态的话，记得先把他们重置可以使用<code>view.transform = CGAffineTransformIdentity</code>，或者<code>view.layer.transform = CATransform3DIdentity</code>，假设你一直不断的改变一个<code>view.transform</code>的属性，而每次改变之前没有重置的话，你会发现后来的改变和你想要的发生变化了，不是你真正想要的结果。</p>

<p>   好了，上面介绍了旋转的属性，接下来就是关键了。官方提供了一个办法就是查看当前电池条的状态<code>UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;</code>通过这个办法，你可以知道当前屏幕的电池条的显示方向，而且你还可以强制设置他的显示方向，通过设置这个属性就OK了，可以选择是否动画改变电池条方向。有了这两个那我们就可以任意的改变我们想要的显示方式了。</p>

<ul>
<li>1.获取当前电池条的方向</li>
</ul>


<p><code>
UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation
</code></p>

<ul>
<li>2.获取当前屏幕的大小</li>
</ul>


<p><code>
CGRect frame = [UIScreen mainScreen].applicationFrame;
</code></p>

<ul>
<li>3.设置我们的View的中心点</li>
</ul>


<p>```</p>

<pre><code>CGPoint center = CGPointMake(frame.origin.x + ceil(frame.size.width/2), frame.origin.y + ceil(frame.size.height/2));
</code></pre>

<p>```</p>

<ul>
<li>4.根据当前电池条的方向，获取需要旋转的角度的大小。通常</li>
</ul>


<p>```</p>

<pre><code>if (orientation == UIInterfaceOrientationLandscapeLeft) {
    return CGAffineTransformMakeRotation(M_PI*1.5);
} else if (orientation == UIInterfaceOrientationLandscapeRight) {
    return CGAffineTransformMakeRotation(M_PI/2);
} else if (orientation == UIInterfaceOrientationPortraitUpsideDown) {
    return CGAffineTransformMakeRotation(-M_PI);
} else {
    return CGAffineTransformIdentity;
}
</code></pre>

<p>```</p>

<ul>
<li>5.可以动画的改变我们view的显示方式了</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIApplication sharedApplication] setStatusBarOrientation:UIDeviceOrientationLandscapeRight animated:YES];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>CGFloat duration = [UIApplication sharedApplication].statusBarOrientationAnimationDuration;（获取当前电池条动画改变的时间）
</span><span class='line'>[UIView beginAnimations:nil context:nil];
</span><span class='line'>[UIView setAnimationDuration:duration];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>//在这里设置view.transform需要匹配的旋转角度的大小就可以了。
</span><span class='line'>[UIView commitAnimations];&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>第二种：通过setOrientation:的办法强制性的旋转到一个特定的方向。</h3>

<p>   注意：Apple在3.0以后都不支持这个办法了，这个办法已经成为了私有的了，但是要跳过App Stroe的审核，需要一点巧妙的办法。</p>

<p>   不要直接调用<code>[[UIDevice currentDevice] setOrientation: UIInterfaceOrientationLandscapeRight]</code>这样的办法来强制性的横屏，这样导致你的程序是很难通过App Store审核的。但是你可以选择使用performSelector的办法来调用它。具体就几行代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//强制横屏&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {
</span><span class='line'>    [[UIDevice currentDevice] performSelector:@selector(setOrientation:)
</span><span class='line'>                                   withObject:(id)UIInterfaceOrientationLandscapeRight];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 更保险的写法 add by Eric
</span><span class='line'>+ (void)changeOrientation:(UIInterfaceOrientation)toOrientation
</span><span class='line'>{
</span><span class='line'>if ([[UIDevice currentDevice] respondsToSelector:NSSelectorFromString(@"setOrientation:")]) {
</span><span class='line'>    [[UIDevice currentDevice] performSelector:NSSelectorFromString(@"setOrientation:")
</span><span class='line'>                               withObject:(id)toOrientation];
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>   总结:如果第一种办法可以满足你需要的话，最好使用第一种办法，因为那个上 App Store肯定没问问题，但是第二种的话是需要冒风险的，但是如果你的结构太复杂了，导致使用第一种办法人为很难控制的话，可以尝试简单的使用第二种办法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多参数selector]]></title>
    <link href="http://saick.net/blog/2013/10/14/duo-can-shu-selector/"/>
    <updated>2013-10-14T16:09:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/14/duo-can-shu-selector</id>
    <content type="html"><![CDATA[<p>Selector是Objective-C一个非常强大的特性，合理使用Selector可以大大简化实现并避免重复代码。但NSObject提供 的performSelector最多只支持两个参数，对于两个以上的参数就无能为力了。一番调查后针对NSObject增加了如下扩展，使得 performSelector可以支持传入参数数组。多个参数就不再是问题了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSObject (Addition)
</span><span class='line'>&ndash; (id)performSelector:(SEL)selector withObjects:(NSArray *)objects;
</span><span class='line'>@end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@implementation NSObject (Addition)
</span><span class='line'>&ndash; (id)performSelector:(SEL)selector withObjects:(NSArray *)objects {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>NSMethodSignature *signature = [self methodSignatureForSelector:selector]; 
</span><span class='line'>if (signature) { 
</span><span class='line'>    NSInvocation* invocation = [NSInvocation invocationWithMethodSignature:signature]; 
</span><span class='line'>    [invocation setTarget:self]; 
</span><span class='line'>    [invocation setSelector:selector]; 
</span><span class='line'>
</span><span class='line'>    for(int i = 0; i &amp;lt; [objects count]; i++){ 
</span><span class='line'>        id object = [objects objectAtIndex:i]; 
</span><span class='line'>        [invocation setArgument:&amp;object atIndex: (i + 2)];        
</span><span class='line'>    } 
</span><span class='line'>
</span><span class='line'>    [invocation invoke]; 
</span><span class='line'>
</span><span class='line'>    if (signature.methodReturnLength) { 
</span><span class='line'>        id anObject; 
</span><span class='line'>        [invocation getReturnValue:&amp;anObject]; 
</span><span class='line'>        return anObject; 
</span><span class='line'>    } else { 
</span><span class='line'>        return nil; 
</span><span class='line'>    } 
</span><span class='line'>} else { 
</span><span class='line'>    return nil; 
</span><span class='line'>} 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>本文出自 “林家男孩” 博客，请务必保留此出处<a href="http://bj007.blog.51cto.com/1701577/538995">http://bj007.blog.51cto.com/1701577/538995</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 初步适配，与iOS6共存]]></title>
    <link href="http://saick.net/blog/2013/10/14/ios7-chu-bu-gua-pei-%2Cyu-ios6gong-cun/"/>
    <updated>2013-10-14T15:43:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/14/ios7-chu-bu-gua-pei-,yu-ios6gong-cun</id>
    <content type="html"><![CDATA[<h4>状态栏隐藏问题</h4>

<p><strong>使用代码</strong>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&ndash; (BOOL)prefersStatusBarHidden
</span><span class='line'>{
</span><span class='line'>  return _isStatusHidden;//隐藏为YES，显示为NO
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>(void)hideStatusBar:(BOOL)isHidden
</span><span class='line'>{
</span><span class='line'>if ([self respondsToSelector:@selector(setNeedsStatusBarAppearanceUpdate)]) {
</span><span class='line'>  // iOS 7
</span><span class='line'>  _isStatusHidden = isHidden;
</span><span class='line'>  [self performSelector:@selector(setNeedsStatusBarAppearanceUpdate)];
</span><span class='line'>} else {
</span><span class='line'>  [[UIApplication sharedApplication] setStatusBarHidden:isHidden];
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p><strong>Catagory</strong> 此处与root ViewController有关，不一定这样解决
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation UINavigationController (StatusBar)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>&lt;p>(UIStatusBarStyle)preferredStatusBarStyle
</span><span class='line'>{
</span><span class='line'>return UIStatusBarStyleLightContent;
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>(BOOL)prefersStatusBarHidden
</span><span class='line'>{
</span><span class='line'>if ([[self topViewController] isKindOfClass:[MovieDetailViewController class]]) {
</span><span class='line'>  MovieDetailViewController &lt;em>movieVC = (MovieDetailViewController &lt;/em>)[self topViewController];
</span><span class='line'>  return [movieVC prefersStatusBarHidden];
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>return NO;
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>@end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>与iOS6 共存问题</h4>

<p><strong>旋转方面还是iOS6里面那些改动，iOS7基本上没啥变化</strong></p>

<p>主要区别就是相对坐标问题，简单处理如下：</p>

<p>定义全局父类，使得所有ViewController处理些事件。<em>每个都加显然很麻烦的啦</em></p>

<p>```
//global_Header.h中相关的定义</p>

<h1>define kOSVersion (double)([[[UIDevice currentDevice] systemVersion] length] > 0 ? \</h1>

<p>(double)[[[UIDevice currentDevice] systemVersion] doubleValue] : (double)kMinOSVersion)
```</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>//
</span><span class='line'>//  UniversalViewController.m
</span><span class='line'>//  BFServiceStation
</span><span class='line'>//
</span><span class='line'>//  Created by Eric on 10/7/13.
</span><span class='line'>//  Copyright &copy; 2013 Baofeng. All rights reserved.
</span><span class='line'>//&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>import &ldquo;UniversalViewController.h&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>import &ldquo;global_Header.h&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>@interface UniversalViewController ()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@implementation UniversalViewController&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>&lt;p>(id)initWithNibName:(NSString &lt;em>)nibNameOrNil bundle:(NSBundle &lt;/em>)nibBundleOrNil
</span><span class='line'>{
</span><span class='line'>self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
</span><span class='line'>if (self) {
</span><span class='line'>  // Custom initialization
</span><span class='line'>}
</span><span class='line'>return self;
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>(void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>[super viewDidLoad];
</span><span class='line'>  // Do any additional setup after loading the view.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>if (kOSVersion >= 7.0f) {
</span><span class='line'>  self.automaticallyAdjustsScrollViewInsets = NO;
</span><span class='line'>  [self setEdgesForExtendedLayout:UIRectEdgeNone];
</span><span class='line'>}
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>(void)didReceiveMemoryWarning
</span><span class='line'>{
</span><span class='line'>[super didReceiveMemoryWarning];
</span><span class='line'>// Dispose of any resources that can be recreated.
</span><span class='line'>}&lt;/p>&lt;/li>
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>@end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>// 引用自CocoaChina</p>

<ul>
<li>1、如果设置了self.navigationController.navigationBar 设置了UIBarMetricsLandscapePhone的背景;而没有设置UIBarMetricsDefault的背景，navigationBar会变透明</li>
</ul>


<p>如图所示： navigationBar透明</p>

<p><img class="<a" src="href="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=177bc31d0ef3d7ca08f63f73c224cf34/730e0cf3d7ca7bcb851f430cbc096b63f624a8a9.jpg?referer=3f277b9367380cd7bf0997dd0867&amp;x=.jpg">http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=177bc31d0ef3d7ca08f63f73c224cf34/730e0cf3d7ca7bcb851f430cbc096b63f624a8a9.jpg?referer=3f277b9367380cd7bf0997dd0867&amp;x=.jpg</a>"></p>

<ul>
<li>2、上图还出现了一个问题，如果没有设置self.automaticallyAdjustsScrollViewInsets = NO，那么iOS7下会自动让scrollView滑动多次，以满足UITableView第一行的显示需要，这又带来了另外一个问题，下拉刷新的View的frame也随之发生了改变，导致整个下拉刷新不可用了</li>
<li>3、self.automaticallyAdjustsScrollViewInsets 这个属性是IOS7才有的新方法，目的就是为了让scrollView自动适应屏幕，如果self.automaticallyAdjustsScrollViewInsets = NO，那么效果会变成下图所示：</li>
</ul>


<p><img class="<a" src="href="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=e257bde0d5ca7bcb797bc72a8e321a5e/0df3d7ca7bcb0a4662460f1a6963f6246b60afa9.jpg?referer=5ad9d42b0ed79123b9f7a1440967&amp;x=.jpg">http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=e257bde0d5ca7bcb797bc72a8e321a5e/0df3d7ca7bcb0a4662460f1a6963f6246b60afa9.jpg?referer=5ad9d42b0ed79123b9f7a1440967&amp;x=.jpg</a>"></p>

<p>我的ViewController继承的是UITableViewController, 所以TableView是随系统而产生的，在IOS7之前，tableView的Frame的起始点是(0, 20),在IOS7之后，它的起始点变成了(0,0),这个时候如果为了让下拉刷新能正常工作，必须设置self.edgesForExtendedLayout = UIRectEdgeNone
（这种情况适用于容器建立在UINavigationController）.</p>

<ul>
<li>4、如果设置了self.navigationController.navigationBar 设置UIBarMetricsDefault的背景为空，则默认的是IOS7上边栏平铺效果，如果设置了图片，并且这个图片高度保持在44（88）,那么IOS5,6,7的效果是一致的。</li>
<li>5、iOS7中的StatusBar的没有了背景，他的UIStatusBarStyleLightContent和UIStatusBarStyleDefault只会改变StatusBar的文字，都不会有背景</li>
<li><p>6、ViewController-Based Status Bar Appearance控制了StatusBar的外观，如果设置为YES，则会调用preferredStatusBarStyle。如果为NO,则通过传统方式来控制</p>

<p>下图示IOS6，7上的正常情况</p></li>
</ul>


<p><img class="<a" src="href="http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=d9ddefcc8fb1cb133a693c16ed6f2773/5fdf8db1cb134954e4566c47544e9258d1094a4d.jpg?referer=57d47c02708b47109738c8fcb643&amp;x=.jpg">http://f.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=d9ddefcc8fb1cb133a693c16ed6f2773/5fdf8db1cb134954e4566c47544e9258d1094a4d.jpg?referer=57d47c02708b47109738c8fcb643&amp;x=.jpg</a>"></p>

<p><img class="<a" src="href="http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9ec7af048882b90139adc33643b6d84a/1f178a82b9014a90a738c29eab773912b31bee8b.jpg?referer=40e418ff881363274cfaf7034a89&amp;x=.jpg">http://b.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=9ec7af048882b90139adc33643b6d84a/1f178a82b9014a90a738c29eab773912b31bee8b.jpg?referer=40e418ff881363274cfaf7034a89&amp;x=.jpg</a>"></p>

<p><img class="<a" src="href="http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=f3066050af4bd11300cdb7376a94d532/d043ad4bd11373f0b991ebbca60f4bfbfbed0462.jpg?referer=888f3612a38b87d609559e2f6421&amp;x=.jpg">http://d.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=f3066050af4bd11300cdb7376a94d532/d043ad4bd11373f0b991ebbca60f4bfbfbed0462.jpg?referer=888f3612a38b87d609559e2f6421&amp;x=.jpg</a>"></p>

<p>7、在IOS7下，如果不设置navigationBar的背景图片，而且设置[navigationBar setBarStyle:UIBarStyleBlackTranslucent];可以获取默认的黑色毛玻璃效果哟</p>

<p>如果大家还有遇到一些奇怪的问题，欢迎大家来补充</p>

<p><img class="<a" src="href="http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=f5b2e0c983cb39dbc5c06753e02d7819/50da81cb39dbb6fd7a1061050b24ab18972b374d.jpg?referer=aa507eef1c178a82972b4a907144&amp;x=.jpg">http://a.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=f5b2e0c983cb39dbc5c06753e02d7819/50da81cb39dbb6fd7a1061050b24ab18972b374d.jpg?referer=aa507eef1c178a82972b4a907144&amp;x=.jpg</a>"></p>

<p>本文参考文档:</p>

<p><a href="http://blog.jaredsinclair.com/post/61507315630/wrestling-with-status-bars-and-navigation-bars-on-ios-7">http://blog.jaredsinclair.com/post/61507315630/wrestling-with-status-bars-and-navigation-bars-on-ios-7</a>
<a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/TransitionGuide/index.html">https://developer.apple.com/library/ios/documentation/userexperience/conceptual/TransitionGuide/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给xcode工程做命令行build]]></title>
    <link href="http://saick.net/blog/2013/10/14/gei-xcodegong-cheng-zuo-ming-ling-xing-build/"/>
    <updated>2013-10-14T14:59:00+08:00</updated>
    <id>http://saick.net/blog/2013/10/14/gei-xcodegong-cheng-zuo-ming-ling-xing-build</id>
    <content type="html"><![CDATA[<p>XCode工程其实是可以用命令行来build的，这样就可以用命令行编译出.app的文件，然后就可以打成ipa包。整个流程做到自动化后，就可以方便的做每日的daily build，便于产品和测试同事跟进进度，随时获得最新版本的ipa文件。</p>

<p>XCode工程的命令行Build命令是 xcodebuild，用 &mdash;help 可以看到一些有用的参数。常用的是xcodebuild -configuration Release 指定用Release方式编译。</p>

<p>另外，将.app文件转成ipa包的方式也相当简单。具体方式是将 .app文件拷贝到一个名为 ipa/Payload的目录下，然后将ipa下的所有内容用zip打包即可：</p>

<p>```</p>

<pre><code>  mkdir -p ipa/Payload
  cp -r ./Release-iphoneos/PRODUCT_NAME.app  ./ipa/Payload/
  cd ipa
  zip -r $FILE_NAME *
</code></pre>

<p>```</p>

<p>如果要将打好的ipa包上传到服务器上面去，再加一些脚本即可，我们是放到一个再windows共享的web server目录下，于是可以用smbclient来连接windows共享和上传ipa包：</p>

<p>```</p>

<pre><code>  echo "put FILE_NAME.ipa" | smbclient //主机名 -U 用户名%密码
</code></pre>

<p>```</p>

<p>附上所有想着的XCode命令</p>

<h6>1.查看xcode的版本号和build版本</h6>

<p><code>
$ xcodebuild -version
</code></p>

<p>显示内容：</p>

<p><code>
Xcode 4.2Build version 4D199
</code></p>

<h6>2.显示当前系统的sdk、及其版本</h6>

<p><code>
$ xcodebuild -showsdks
</code></p>

<p>显示内容：</p>

<p><code>
Mac OS X SDKs:    Mac OS X 10.6                     -sdk macosx10.6    Mac OS X 10.7                     -sdk macosx10.7iOS SDKs:    iOS 5.0                           -sdk iphoneos5.0iOS Simulator SDKs:    Simulator - iOS 5.0               -sdk iphonesimulator5.0
</code></p>

<h6>3.显示工程项目信息</h6>

<p>先cd到工程目录下（有＊.xcodeproj的目录，比如MakeFileTest.xcodeproj），然后输入命令
<code>
$ xcodebuild -list
</code></p>

<p>显示内容</p>

<p><code>
Information about project "MakeFileTest":    
Targets:        MakeFileTest    
Build Configurations:        Debug        Release    If no build configuration is specified and -scheme is not passed then "Release" is used.    
Schemes:        MakeFileTest
</code></p>

<p>如果未指定Configurations，默认为release</p>

<h6>4.xcodebuild用法：</h6>

<h6>#1）用ios5.0模拟器（iphonesimulator5.0）建立工程</h6>

<p><code>
$ xcodebuild -sdk iphonesimulator5.0
</code></p>

<p>输出一堆编译过程，最后输出<strong> BUILD SUCCEEDED </strong>表示创建成功；
若输出<strong> BUILD FAILED </strong>表示创建失败
成功后会在当前工程目录下创建build目录，结构如下：</p>

<p><img class="<a" src="href="http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=15fd0cff0afa513d55aa6cdb0d5624c6/a1ec08fa513d2697dd9c917e57fbb2fb4316d842.jpg?referer=dfc765f917ce36d3fb13b6001840&amp;x=.jpg">http://e.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=15fd0cff0afa513d55aa6cdb0d5624c6/a1ec08fa513d2697dd9c917e57fbb2fb4316d842.jpg?referer=dfc765f917ce36d3fb13b6001840&amp;x=.jpg</a>"></p>

<p>MakeFileTest.app就是编译生成的可执行文件，
而MakeFileTest.build文件夹下是一些中间文件</p>

<p><img class="<a" src="href="http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=a14904c0ff1f4134e437057b1524e4f7/a9d3fd1f4134970a3719890c97cad1c8a7865dae.jpg?referer=869c95c8b4fd5266fe3c09249b64&amp;x=.jpg">http://h.hiphotos.bdimg.com/album/s%3D550%3Bq%3D90%3Bc%3Dxiangce%2C100%2C100/sign=a14904c0ff1f4134e437057b1524e4f7/a9d3fd1f4134970a3719890c97cad1c8a7865dae.jpg?referer=869c95c8b4fd5266fe3c09249b64&amp;x=.jpg</a>"></p>

<h6>#2）默认是Release工程，要设置成Debug模式如下：</h6>

<p><code>
$ xcodebuild -sdk iphonesimulator5.0 -configuration Debug
</code></p>

<h6>#3）clean创建的工程</h6>

<p><code>
$ xcodebuild clean -sdk iphonesimulator5.0 -configuration Debug
</code>
成功输出<strong>CLEAN SUCCEEDED</strong></p>

<h6>5.xcodebuild的编译参数</h6>

<p>下面说运行从命令行中运行应用程序:</p>

<p>需要一个小工具iphonesim,从 <a href="https://github.com/hborders/iphonesim/">https://github.com/hborders/iphonesim/</a> 下载后编译成为一个可执行文件,用它来启动iphone模拟器.
由于模拟器不支持多个实例,所以运行前记得先把模拟器给关掉。按照以下命令来执行吧!</p>

<p><code>
iphonesim launch /Users/TadoSoft/Library/Application\ Support/iPhone\ Simulator/4.3.2/Applications/ED845558-5168-45C0-BA98-43AB3C238E9F/Krowdit.app/
</code></p>
]]></content>
  </entry>
  
</feed>
