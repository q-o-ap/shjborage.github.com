<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-01-18T16:52:06+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auto Layout by Example]]></title>
    <link href="http://saick.net/blog/2014/01/18/auto-layout-by-example/"/>
    <updated>2014-01-18T16:21:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/18/auto-layout-by-example</id>
    <content type="html"><![CDATA[<p>Autolayout 博大精深，以前转过一篇，可是用的时候还是不会用。没办法只能看苹果官方的文档，发现除了讲基本的使用（XCode5中的一些操作已不太一样）外，还有这么个例子，主要解决了屏幕大小不同适配的问题，真是不错。摘录下来，希望对大家有用。</p>

<p>如果某个地方看不明白可以留言给我，我翻译并给大家讲。</p>

<p>ScrollView这块我暂时没有用，没细看，下面Size适配那个我试了，并且写了Demo，大家感兴趣下文下载研究。</p>

<p>Auto Layout makes it easy to solve many complex layout problems automatically, without the need for manual view manipulation. By creating the right combination of constraints, you can create layouts that are traditionally difficult to manage in code, such as equally spaced views that adjust to changes in orientation or size, elements inside scroll views that affect the size of the scrolling content, or elements inside scroll views that don’t scroll with the rest of the contents.</p>

<!-- more -->


<h3>Using Scroll Views with Auto Layout</h3>

<p>When you are creating an app using Auto Layout, scroll views can present a unique challenge. The size of the scrolling content must be set correctly so that the user can scroll through all of the available content, for example, and if you need to lock a contextual view in place on top of a scroll view, such as the scale and legend for a map, it’s difficult to ensure that the element doesn’t scroll with the rest of the content.</p>

<h4>Controlling Scroll View Content Size</h4>

<p>The size of the content inside of a scroll view is determined by the constraints of its descendants.</p>

<p><em>To set the size of a scroll view</em></p>

<ul>
<li>Create the scroll view.</li>
<li>Place the UI element inside it.</li>
<li>Create constraints that fully define the width and height of the scroll view content.</li>
</ul>


<p>You must make sure you create constraints for all the subviews inside a scroll view. For example, when defining the constraints for a view that doesn’t have an intrinsic content size, you’ll need more than just a leading edge constraint—you must also create trailing edge, width, and height constraints. There cannot be any missing constraints, starting from one edge of the scroll view to the other.</p>

<h4>Creating Anchored Views Inside a Scroll View</h4>

<p>You may find you want to create an area inside a scroll view that doesn’t move when a user scrolls the contents of the scroll view. You accomplish this by using a separate <strong>container view</strong>.</p>

<p><em>To lock a view inside a scroll view</em>
*   Create a container view to hold the scroll view.
*   Create the scroll view and place it in the container view with all edges equal to zero points.
*   Create and place a subview inside of the scroll view.
*   Create constraints from the subview to the container view.</p>

<p>The following example uses the steps in the above task to show how to position a text view inside of a scroll view. In this example, the text view stays at the bottom of the scroll view and doesn’t move when the scroll view contents are moved.</p>

<p>First, create the container view that will contain the scroll view. Set the size of the container view equal to the desired size of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008276023/player/b1ddbeff09" height="500" width="291"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After the container view is created, create a scroll view and place it inside of the container view. Resize the scroll view so that all of the edges are flush with the container view’s edges, by setting the distance to 0.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810786/player/1202126aa8" height="500" width="290"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create another view and place it inside of the scroll view. In this example, a text view is placed inside of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999315/player/ddc38c3ea6" height="500" width="288"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After placing the text view, create constraints from the text view to the container view. Creating constraints that anchor the text view to the container view (skipping the scroll view) anchors the text view relative to the container view, which ensures that the scroll view won’t scroll the text view.</p>

<p>To create a constraint that crosses multiple views in the view hierarchy, it is generally easier to Control-drag from the view to the container view in the Interface Builder outline view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810736/player/e32e620ff4" height="298" width="270"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In the constraint overlay that appears, set the required constraints for the view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275923/player/194c48615c" height="273" width="158"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In this example, constraints are created from the leading, trailing, and bottom edges of the text view to the container view. The height of the text view is also constrained.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810686/player/bdc0cae834" height="500" width="287"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>The following two figures show the app in iOS Simulator, both in normal and landscape positions. The text view is constrained at the bottom of the scroll view and doesn’t move as the scroll view is moved.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999185/player/a051895080" height="296" width="495"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12007999135/player/4f87b36fa7" height="495" width="296"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>Spacing and Wrapping</h3>

<p>Auto Layout provides several techniques for automatically spacing views and resizing items based on their content. The following sections describe how to create constraints that keep visible views proportionally spaced based on the orientation of the device.</p>

<h4>Creating Equal Spacing Between Views</h4>

<p>To lay out several views that are proportionally spaced based on the orientation of a device, create spacer views between the visible views. Set the constraints of these spacer views correctly to ensure that the visible views are able to stay spaced apart based on the orientation of the device.</p>

<p><em>To space views proportionally</em>
*   Create the visible views.
*   Create the spacer views equal to the number of visible views plus one.
*   Alternate placing your views, starting with a spacer view.</p>

<pre><code>To space two visible views, place all of the views in the following pattern, starting from the left side of the screen and moving right:
</code></pre>

<p><code>spacer1 | view1 | spacer2 | view2 | spacer3.</code></p>

<ul>
<li>Constrain the spacer views so that their lengths are equal to each other.</li>
</ul>


<p><code>
Note: The height of the spacer views can be any value, including 0. However, you must create constraints for the height of the views—don’t leave the height ambiguous.
Create a leading constraint from the first spacer view to the container view.
</code></p>

<ul>
<li>Create a trailing constraint from the last spacer view to the container view.</li>
<li>Create constraints between the spacer views and the visible views.</li>
</ul>


<p><code>
Note: When spacing views vertically, start from the top of the screen and place each view below the previous view. Set the heights of the spacer views equal to each other.
The following example uses the steps in the above task to show how to position two views proportionally spaced. The spacer views are annotated for the example, but are normally left empty with no background. First, create the two views and place them in the storyboard.
</code></p>

<iframe src="https://www.flickr.com/photos/shjborage/12008351964/player/6cff17637e" height="310" width="236"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Add the three spacer views—one to the left of the leftmost view, one between the two views, and one to the right of the rightmost view. The spacer views don’t have to be the same size at this time because their size will be set through constraints.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275823/player/bdda53d7d0" height="310" width="235"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create the following constraints for the spacer views:</p>

<ul>
<li>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1.</li>
<li>Constrain the width of spacer view 1 to be greater than or equal to the minimum desired width.</li>
<li>Create a Leading Space to Container constraint from spacer view 1 to the container.</li>
<li>Create a Horizontal Spacing constraint from spacer view 1 to view 1. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create Horizontal Spacing constraints from spacer view 2 to view 1 and view 2. Set these constraints to be a less-than-or-equal-to constraint with a priority of 999.</li>
<li>Create a Horizontal Spacing constraint from spacer view 3 to view 2. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create a Trailing Space to Container constraint from spacer view 3 to the container.</li>
</ul>


<p>These constraints create two visible views and three invisible views (spacer views). These spacer views automatically resize as the orientation of the device changes, keeping the visible views proportionally spaced, as shown in the following two figures:</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275833/player/7290ca4711" height="337" width="261"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12008351904/player/a2b7a82a10" height="261" width="337"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p><a href="https://www.dropbox.com/s/23vrbep9khfyvb6/AutoLayoutDemo.zip">Demo</a></p>

<h3>Animating Changes Made by Auto Layout</h3>

<p>If you need full control over animating changes made by Auto Layout, you must make your constraint changes programmatically. The basic concept is the same for both iOS and OS X, but there are a few minor differences.</p>

<p>In an iOS app, your code would look something like the following:</p>

<p>```
[containerView layoutSubtreeIfNeeded]; // Ensures that all pending layout operations have been completed
[UIView animateWithDuration:1.0 animations:^{</p>

<pre><code> // Make all constraint changes here
 [containerView layoutSubtreeIfNeeded]; // Forces the layout of the subtree animation block and then captures all of the frame changes
</code></pre>

<p>}];
```</p>

<p>In OS X, use the following code when using layer-backed animations:</p>

<p>```
[containterView layoutIfNeeded];
NSAnimationContext runAnimationGroup:^(NSAnimationContext *context) {</p>

<pre><code> [context setAllowsImplicitAnimation: YES];
 // Make all constraint changes here
 [containerView layoutIfNeeded];
</code></pre>

<p>}];
```</p>

<p>When you aren’t using layer-backed animations, you must animate the constant using the constraint’s animator:</p>

<p><code>
[[constraint animator] setConstant:42];
</code></p>

<h3>个人总结</h3>

<ol>
<li>所有相关Contraints都加好后再自动让XCode补全，或者干脆在没问题的时候忽略警告</li>
<li><code>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1</code>. 这意思是让三个视频的width相等，并不是给他们三个都加上width的Contraints。</li>
<li>最后是在3.5寸屏幕下开发，再适应4寸，这样直接拉开。（在开发时，点那个大小切换那个可能会带来Contraints警告，要小心。不行就Commond+Z）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iOS报错libc++abi.dylib handler threw exception]]></title>
    <link href="http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception/"/>
    <updated>2014-01-03T23:57:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception</id>
    <content type="html"><![CDATA[<p>这个错有时很奇怪，有时比较正常的情况也会报这个，可能与XCode版本有关。
下文列举一些情况吧</p>

<!-- more -->


<h3>可能引起的情况</h3>

<ul>
<li>如果是多语言的话，要查看xib是否支持改语言～就是要在xib里面的Localiztion选项里面检查。（至少xcode4.5里面是这样的，或许对someone 有帮助）</li>
<li>因为子类需要横屏，父类没设置横屏，所以爆出异常来。Supported orientations has no common orientation with the application, and shouldAutorotate is returning YES</li>
<li>@｛｝ 语法糖，数据出错后也会报这个错</li>
<li>数据越界</li>
</ul>


<h3>定位异常的方法</h3>

<p><code>
@try {  
}  
@catch(NSException *exception) {  
  NSLog(@"exception:%@", exception);  
}
@finally {            
}  
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库不同平台合并 lipo命令使用]]></title>
    <link href="http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong/"/>
    <updated>2013-12-17T23:54:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>查看<em>lipo</em>详解</p>

<p><code>
man lipo
</code></p>

<p><strong>lipo &ndash; create or operate on universal files</strong></p>

<!-- more -->


<h3>Usage</h3>

<h4>Simple</h4>

<p><strong>lipo -create xxx_arm.a xxx_i386.a -output xxx_universal.a</strong></p>

<p>Example:</p>

<p><code>
lipo -create /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphonesimulator/libPrint.a  /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphoneos/libPrint.a  -output /Users/pjk1129/Desktop/libPrint.a
</code></p>

<h4>Shell</h4>

<p><em>libevent.sh</em>
```</p>

<h1>! /bin/sh</h1>

<p>mkdir universal
lipo -create simulator/libevent.a device/libevent.a -o universal/libevent.a
lipo -create simulator/libevent_extra.a device/libevent_extra.a -o universal/libevent_extra.a
lipo -create simulator/libevent_core.a device/libevent_core.a -o universal/libevent_core.a
lipo -create simulator/libevent_pthreads.a device/libevent_pthreads.a -o universal/libevent_pthreads.a
```</p>

<h3>Review Info</h3>

<p><strong>lipo -info xxx_universal.a</strong></p>

<p>Example:</p>

<p><code>
lipo -info /Users/pjk1129/Desktop/libPrint.a
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite(FMDB) 线程安全 - 多线程处理]]></title>
    <link href="http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li/"/>
    <updated>2013-12-12T11:25:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常用到SQLite，CoreData也不错，但很多时候还是自己写sql，使用FMDB来处理。当然了，也可以不用FMDB，直接写处理，这个不解释。</p>

<p>但是，我们在数据库操作的时候，经常遇到多线程访问数据库的状况，常见的有几种处理方法：</p>

<ul>
<li>1, NSLock或类似方法加锁</li>
<li>2, FMDatabaseQueue</li>
<li>3, SQLITE_CONFIG_SERIALIZED</li>
</ul>


<p>下面我们来仔细看一下出现的问题以及相关的解决方案</p>

<!-- more -->


<h3>常见问题</h3>

<p>以使用FMDB为例：</p>

<p>The debugger says that the error occurs at [FMResultSet next] at the line, has <code>EXC_BAD_ACCESS</code></p>

<p><code>
rc = sqlite3_step(statement.statement);
</code></p>

<p>多线程访问的时候，会在这里报错。</p>

<p>如何解决呢？</p>

<h4>1. NSLock加锁（NSMutex）</h4>

<p>详见苹果官方文档：
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html">Threading Programming Guide</a></p>

<h4>2. FMDatabaseQueue</h4>

<p>这个是我在某项目中用到的，所有查询都走这里。
可能因为项目较复杂，用了这个还是会时候有问题，但稳定很多。可以有一些别的地方调用，没查清楚。</p>

<p>```
// 相关引用
_fmQueue = [FMDatabaseQueue databaseQueueWithPath:sqlitePath];</p>

<p>// 查询数据
&ndash; (FMResultSet <em>)executeQueryWithSQL:(NSString </em>)sql
{
  BFLogVerbose(@&ldquo;executeQuery: %@&rdquo;, sql);</p>

<p>  <strong>block FMResultSet *rs = nil;
  </strong>block dispatch_semaphore_t sem = dispatch_semaphore_create(0);</p>

<p>  [_fmQueue inDatabase:^(FMDatabase *fmdb){</p>

<pre><code>FMResultSet *tmpRs = [fmdb executeQuery:sql];
rs = [FMResultSet resultSetWithStatement:tmpRs.statement usingParentDatabase:fmdb];
[tmpRs close];
dispatch_semaphore_signal(sem);
</code></pre>

<p>  }];</p>

<p>  dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
  dispatch_release(sem);</p>

<p>  return rs;
}
```</p>

<h3>3. SQLITE_CONFIG_SERIALIZED</h3>

<p>SQLite provides a much simpler serialization. By just setting the sqlite_config() option SQLITE_CONFIG_SERIALIZED you will probably avoid most of these kinds of headaches. I discovered this the hard way after fighting with threading issues for a long while.</p>

<p>```
if (sqlite3_config(SQLITE_CONFIG_SERIALIZED) == SQLITE_ERROR) {</p>

<pre><code>    NSLog(@"couldn't set serialized mode");
</code></pre>

<p>}
```</p>

<p>参考：
<a href="http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0">http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode下的iOS单元测试]]></title>
    <link href="http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi/"/>
    <updated>2013-12-12T09:34:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi</id>
    <content type="html"><![CDATA[<p>XCode 内置了 OCUnit 单元测试框架，但目前最好用的测试框架应该是 GHUnit。通过 GHUnit + OCMock 组合，我们可以在 iOS 下进行较强大的单元测试功能。本文将演示如何在 XCode 4.2 下使用 OCUnit， GHUnit 和 OCMock 进行单元测试。</p>

<!-- more -->


<h3>OCUnit</h3>

<p>在 XCode 下新建一个 OCUnitProject 工程，选中 Include Unit Tests 选择框，</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332017455/" title="2013-12-12-1 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2805/11332017455_a9679dfeb5.jpg" width="500" height="337" alt="2013-12-12-1"></a></p>

<p>OCUnit 框架则会为我们自动添加 Unit Test 框架代码：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332111874/" title="2013-12-12-2 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5538/11332111874_82dae3bc52.jpg" width="430" height="381" alt="2013-12-12-2"></a></p>

<p>XCode 在 OCUnitProjectTests.m 中为我们自动生成了一个 Fail 的测试：</p>

<p>```
&ndash; (void)testExample
{</p>

<pre><code>STFail(@"Unit tests are not implemented yet in OCUnitProjectTests");
</code></pre>

<p>}
```</p>

<p>让我们来运行 Test，看看效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085666/" title="2013-12-12-3 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7321/11332085666_f398e1edd2.jpg" width="500" height="269" alt="2013-12-12-3"></a></p>

<p>从图中的红色下划线部分可以看出，测试没有通过，符合预期。我们只要像类 OCUnitProjectTests 一样编写继承自 SenTestCase 类的子类，在其中添加形式如：- (void) testXXX(); 的测试函数既可，注意必须是一个无参无返回类型且名称是以 test 为前缀的函数。
OCUnit 的有点是官方支持，于 XCode 集成的比较好。</p>

<h3>GHUnit</h3>

<p>GHUnit 是一个开源的单元测试框架，具有可视化界面，功能亦相当强大。Mark 写了一篇 OCUnit vs GHUnit 的文章，有兴趣的童鞋可以看一看。</p>

<p>OCMock 是由 Mulle Kybernetik 为 OS X 和 iOS 平台编写的遵循 mock object 理念的单元测试框架。</p>

<h4>下面来介绍如何配置 GHUnit 和 OCMock</h4>

<ul>
<li>1，首先，创建一个名为 GHUnitProject 的单视图应用程序，注意：不要选中 Include Unit Tests 选择框。然后运行，应该出现白屏。</li>
<li>2，添加新的 test target，选中左边的工程名，点击右侧的 Add Target，新增一个名为 Tests 的 Empty Application 应用程序，让其附属于 GHUnitProject注意：不要选中 Include Unit Tests 选择框。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332017205/" title="2013-12-12-4 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5477/11332017205_d39c81a057.jpg" width="500" height="346" alt="2013-12-12-4"></a>
<a href="http://www.flickr.com/photos/shjborage/11332017075/" title="2013-12-12-5 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7313/11332017075_e828e5525f.jpg" width="500" height="419" alt="2013-12-12-5"></a></p>

<ul>
<li>3，向 Tests 工程中（注意是 Tests 工程）添加 GHUnitIOS Framework。首先下载与 XCode 版本对应的 GHUnitIOS Framework。英文好的可以直接查看官方 iOS 版的安装文档：点此查看，跳过此第 3 节；否则请接着看。</li>
<li>3.1，解压 GHUnitIOS 框架到 GHUnitProject 下，让 GHUnitIOS.framework 与 Tests 在同一目录下。</li>
<li>3.2，回到 XCode，右击工程中的 Frameworks group，选中 Add Files to&hellip;菜单，选取 GHUnitIOS.framework ，注意 targets 要选择 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332111384/" title="2013-12-12-6 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7352/11332111384_e75ae2182a.jpg" width="478" height="500" alt="2013-12-12-6"></a></p>

<ul>
<li>3.3，设置 Tests 的 Build Settings：在 Other Linker Flags 中增加两个 flag： -ObjC 和 -all_load。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016815/" title="2013-12-12-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3811/11332016815_c8ba09db5d.jpg" width="500" height="316" alt="2013-12-12-7"></a></p>

<ul>
<li>3.1，删除 Tests 工程中的 UTSAppDelegate.h 和 UTSAppDelegate.m 两个文件；</li>
<li>3.2，修改 Tests 工程中的 main.m 为:</li>
</ul>


<p>```</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;GHUnitIOS/GHUnitIOSAppDelegate.h></h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>@autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([GHUnitIOSAppDelegate class]));
}
</code></pre>

<p>}
```</p>

<p>3.3，选择编译目标 Tests>iPhone 5.0 Simulator，编译运行，应该能得到如下效果。目前我们还没有编写任何实际测试，所以列表为空。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085166/" title="2013-12-12-8 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2872/11332085166_39da2998f9.jpg" width="331" height="492" alt="2013-12-12-8"></a></p>

<p>4，编写 GHUnit 测试。向 Tests 工程中添加名为 GHUnitSampleTest 的 Objective C class。其内容如下：</p>

<p>```
GHUnitSampleTest.h</p>

<h1>import &lt;GHUnitIOS/GHUnit.h></h1>

<p>@interface GHUnitSampleTest: GHTestCase
{
}
@end
GHUnitSampleTest.m</p>

<h1>import &ldquo;GHUnitSampleTest.h&rdquo;</h1>

<p>@implementation GHUnitSampleTest
&ndash; (void)testStrings
{</p>

<pre><code>NSString *string1 = @"a string";
GHTestLog(@"I can log to the GHUnit test console: %@", string1);
// Assert string1 is not NULL, with no custom error description
GHAssertNotNULL(string1, nil);
// Assert equal objects, add custom error description
NSString *string2 = @"a string";
GHAssertEqualObjects(string1, string2, @"A custom error message. string1 should be equal to: %@.", string2);
</code></pre>

<p>}
@end
```</p>

<p>然后编译运行，点击 Run，效果如下：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332159843/" title="2013-12-12-9 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3788/11332159843_1766364257.jpg" width="322" height="488" alt="2013-12-12-9"></a></p>

<p>图中的 All 栏显示所以的测试，Failed 栏显示没有通过的测试。强大吧，GHUnit。你可以向 GHUnitSampleTest 添加新的测试，比如：</p>

<p>```
&ndash; (void)testSimpleFail
{</p>

<pre><code>GHAssertTrue(NO, nil);
</code></pre>

<p>}
```</p>

<p>我们可以向 Tests 添加更多测试类，只要该类是继承自 GHTestCase，且其中的测试方法都是无参无返回值且方法名字是以 test 为前缀即可。</p>

<h3>OCMock</h3>

<p>OCMock一般用来模拟一个类，创建其对象，并设置该对象。
下面我们来添加 OCMock。</p>

<ul>
<li>1，我们只能以静态库的方式来添加 OCMock。在 GHUnitTest 目录下新建 Libraries 目录，该目录是与 Tests 目录平级的。下载静态库文件，解压头文件至该目录下。
文件下载：头文件 libOCMock.a ，framework 文件：OCMock framework ，打开下载好的ocmock-1.77.dmg，拷贝其中的‘Release/Library/Headers/OCMock’ 目录至 Libraries 下。最终目录结构如下：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084876/" title="2013-12-12-10 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3782/11332084876_6f67df9eef.jpg" width="500" height="96" alt="2013-12-12-10"></a></p>

<ul>
<li>2，在 GHUnitTest 工程中新建名为 Libraries 的 group，导入libOCMock.a 和目录 OCMock，注意 target 是 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084976/" title="2013-12-12-11 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3751/11332084976_15c36cbd88.jpg" width="479" height="500" alt="2013-12-12-11"></a></p>

<ul>
<li>3，设置 Tests 的 Build Setting。让 Libray Search Paths 包含 $(SRCROOT)/Libraries：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016595/" title="2013-12-12-12 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2879/11332016595_f7fae82fb0.jpg" width="500" height="245" alt="2013-12-12-12"></a></p>

<p>在 Header Search Paths 中增加 $(SRCROOT)/Libraries，并选中 Recursive 选择框。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332084796/" title="2013-12-12-13 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7320/11332084796_32d4115828.jpg" width="500" height="277" alt="2013-12-12-13"></a></p>

<ul>
<li>4，编写 OCMock 测试。向 Tests 工程中添加名为 OCMockSampleTest 的 Objective C class。其内容如下：</li>
</ul>


<p>```
OCMockSampleTest.h</p>

<h1>import &lt;GHUnitIOS/GHUnit.h></h1>

<p>@interface OCMockSampleTest : GHTestCase
@end
OCMockSampleTest.m</p>

<h1>import &ldquo;OCMockSampleTest.h&rdquo;</h1>

<h1>import &lt;OCMock/OCMock.h></h1>

<p>@implementation OCMockSampleTest
// simple test to ensure building, linking,
// and running test case works in the project
&ndash; (void)testOCMockPass
{</p>

<pre><code>id mock = [OCMockObject mockForClass:NSString.class];
[[[mock stub] andReturn:@"mocktest"] lowercaseString];
NSString *returnValue = [mock lowercaseString];
GHAssertEqualObjects(@"mocktest", returnValue,
@"Should have returned the expected string.");
</code></pre>

<p>}
&ndash; (void)testOCMockFail
{</p>

<pre><code>id mock = [OCMockObject mockForClass:NSString.class];
[[[mock stub] andReturn:@"mocktest"] lowercaseString];
NSString *returnValue = [mock lowercaseString];
GHAssertEqualObjects(@"thisIsTheWrongValueToCheck",
returnValue, @"Should have returned the expected string.");
</code></pre>

<p>}
@end
```</p>

<p>编译运行，点击 Run，效果如下图。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332016435/" title="2013-12-12-14 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5507/11332016435_6afa1b6912.jpg" width="322" height="480" alt="2013-12-12-14"></a></p>

<p>至此，iOS 下的OCUnit，GHUnit，OCMock 单元测试介绍就到此结束了。当然还有其他一些测试框架，比如 google 出品的 GTM。</p>

<p>参考资料：</p>

<p>OCMock: <a href="http://ocmock.org/">http://ocmock.org/</a></p>

<p>Unit Testing in Xcode 4- use OCUnit and SenTest instead of GHUnit</p>

<p>GHUnit Reference: <a href="http://gabriel.github.com/gh-unit/">http://gabriel.github.com/gh-unit/</a></p>

<p>转自：<a href="http://www.uml.org.cn/mobiledev/201201093.asp">http://www.uml.org.cn/mobiledev/201201093.asp</a></p>
]]></content>
  </entry>
  
</feed>
