<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2013-09-02T09:07:15+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义UITabbarController引发的血案]]></title>
    <link href="http://saick.net/blog/2013/09/02/zi-ding-yi-uitabbarcontrolleryin-fa-de-xie-an/"/>
    <updated>2013-09-02T09:05:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/02/zi-ding-yi-uitabbarcontrolleryin-fa-de-xie-an</id>
    <content type="html"><![CDATA[<p>转自：<a href="http://www.cnblogs.com/chen1987lei/archive/2012/05/19/2509057.html">http://www.cnblogs.com/chen1987lei/archive/2012/05/19/2509057.html</a></p>

<p>nested push animation can result in corrupted navigation bar 嵌套的navigation动画会造成 navigation bar 错误， 具体表现为上一层的titleview 和这一层重叠， navigationbaritem 维持上一层的左按钮， 右按钮 、、、系统警告提示nested push animation can result in corrupted navigation bar ， 大家遇到过这种情况吗？？
嵌套的动画， 是什么意思呢， 为什么会这样， 要怎么解决</p>

<p>结贴~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>有一天，从头到尾分析了整个项目的代码， 最后确认问题根源——自定义UITabbarController引发的血案
项目中使用了自定义的UITabbarController ，修改里面的tabbar视图， 在这个UITabbarController 中实现了viewWillAppear方法， 里面没有加super viewWillAppear ， 结果导致了这一连串的问题，
整个软件里面，都会出现弹一次模态窗口，导航视图就会动画乱序，
导航视图前进后退过快， 导致导航栏嵌套， 一个上面覆盖另一个。</p>

<p>扩展阅读：
<a href="http://stackoverflow.com/questions/5525519/iphone-uinavigation-issue-nested-push-animation-can-result-in-corrupted-naviga">http://stackoverflow.com/questions/5525519/iphone-uinavigation-issue-nested-push-animation-can-result-in-corrupted-naviga</a></p>

<p>其实主要还是在用户看不到的时候，多次使用Animate=YES</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hybird App研究]]></title>
    <link href="http://saick.net/blog/2013/09/02/hybird-appyan-jiu/"/>
    <updated>2013-09-02T09:02:00+08:00</updated>
    <id>http://saick.net/blog/2013/09/02/hybird-appyan-jiu</id>
    <content type="html"><![CDATA[<h4>hybrid App</h4>

<p>“云”时代的来临正在改变App和运营团队之间的关系，一场不能避免的变革正在进行。鉴于移动终端的局限性，移动终端上的APP由本地化应用(Native App)，到混合型应用（Hybrid APP），再到基于WEB的应用Web App，这一连串的变化都源于技术的更新和市场的需要。</p>

<p>Hybrid App是指介于web-app、native-app这两者之间的app,它虽然看上去是一个Native App，但只有一个UI WebView，里面访问的是一个Web App，比如街旁网最开始的应用就是包了个客户端的壳，其实里面是HTML5的网页，后来才推出真正的原生应用。再彻底一点的，如掌上百度和淘宝客户端Android版，走的也是Hybrid App的路线，不过掌上百度里面封装的不是WebView，而是自己的浏览内核，所以体验上更像客户端，更高效。</p>

<p>汽车有混合动力Hybrid，移动应用同样也有混合模式。Hybrid App（混合模式移动应用）兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。很多人不知道市场上一些主流移动应用都是基于Hybrid App的方式开发，比如国外有Facebook、国内有百度搜索等。但究竟什么是Hybrid App？如何定义？</p>

<p>Hybrid App：Hybrid App is a mobile application that is coded in both browser-supported language and computer language. They are available through application distribution platforms such as the Apple App Store, Google Play etc. Usually, they are downloaded from the platform to a target device, such as iPhone, Android phone or Windows Phone. The subscribers need to install to run them.</p>

<p>我们来拆解一下里面的含义：</p>

<ul>
<li>1、mobile application：Hybrid App就是一个移动应用</li>
<li>2、both browser-supported language and computer language：同时使用网页语言与程序语言编写</li>
<li>3、available through application distribution platforms：通过应用商店进行分发</li>
<li>4、a target device：区分目标平台</li>
<li>5、install to run：用户需要安装使用</li>
<li><p>综合一下就是：“Hybrid App同时使用网页语言与程序语言开发，通过应用商店区分移动操作系统分发，用户需要安装使用的移动应用”。总体特性更接近Native App但是和Web App区别较大。只是因为同时使用了网页语言编码，所以开发成本和难度比Native App要小很多。因此说，Hybrid App兼具了Native App的所有优势，也兼具了Web App使用HTML5跨平台开发低成本的优势</p></li>
</ul>


<h4>Hybrid App为什么会兴起</h4>

<p>Hybrid App的兴起是现阶段移动互联网产业的一种偶然。移动互联网的热潮刮起后，众多公司前赴后继的进入。但是很快发现移动应用的开发人员太少，所以导致疯狂的人才争夺。市场机制下移动应用开发人才的待遇扶摇直上，最终变成众多企业无法负担养一个具备跨平台开发能力的专业移动应用开发团队。而HTML5的出现让Web App露出曙光，HTML5开发移动应用的跨平台和廉价优势让众多想进入移动互联网领域的公司开始心动。可是当下基于HTML5的Web App更是雾里看花，在用户入口习惯、分发渠道和应用体验这三个核心问题没解决之前，Web App也很难得以爆发。正是在这样是机缘巧合下，基于HTML5低成本跨平台开发优势又兼具Native App特质的Hybrid App技术杀入混战，并且很快吸引了众人的目光。大幅的降低了移动应用的开发成本，可以通过现有应用商店模式发行，在用户桌面形成独立入口等等这些，让Hybrid App成为解决移动应用开发困境不错的选择，也成为现阶段Web App的代言人。Hybrid App像刺客一样，在Native App和Web App混战之时，偶然间的在移动应用开发领域占有了一席之地。</p>

<p>如何实现网页语言与程序语言的混合</p>

<p>Hybrid App通常分为三种类型：多View混合型，单View混合型，Web主体型。</p>

<h5>多View混合型</h5>

<p>即Native View和Web View独立展示，交替出现。目前常见的Hybrid App是Native View与WebView交替的场景出现。这种应用混合逻辑相对简单。即在需要的时候，将WebView当成一个独立的View（Activity）运行起来，在WebView内完成相关的展示操作。这种移动应用主体通常是Native App，Web技术只是起到补充作用。开发难度和Native App基本相当。</p>

<h5>单View混合型</h5>

<p>即在同一个View内，同时包括Native View和Web View。互相之间是覆盖（层叠）的关系。这种Hybrid App的开发成本较高，开发难度较大，但是体验较好。如百度搜索为代表的单View混合型移动应用，既可以实现充分的灵活性，又能实现较好的用户体验。</p>

<h5>Web主体型</h5>

<p>即移动应用的主体是Web View，主要以网页语言编写，穿插Native功能的Hybrid App开发类型。这种类型开发的移动应用体验相对而言存在缺陷，但整体开发难度大幅降低，并且基本可以实现跨平台。Web主体型的移动应用用户体验的好坏，主要取决于底层中间件的交互与跨平台的能力。国外的appMobi、PhoneGap国内的AppCan和Rexsee都属于Web主体型移动应用中间件。其中Rexsee不支持跨平台开发。appMobi和PhoneGap除基础的底层能力更多是通过插件（Plugins）扩展的机制实现Hybrid。而AppCan除了插件机制，还提供了大量的单View混合型的接口来完善和弥补Web主体型Hybrid App体验差的问题，接近Native App的体验。</p>

<p>从分析可见，Hybrid App中的Web主体型只要能够解决用户体验差的问题，就可以变成最佳Hybrid App解决方案类型。</p>

<h4>Hybrid App的瓶颈与未来</h4>

<p>国内外Hybrid App的开发框架众多。如何选择又成为一个难题。下面对开发者比较关心的集中知名跨平台开发移动应用中间件进行列表和对比，以便选择最适合您的移动应用中间件。</p>

<p>Hybrid App的瓶颈与未来</p>

<p>国内外Hybrid App的开发框架众多。如何选择又成为一个难题。下面对开发者比较关心的集中知名跨平台开发移动应用中间件进行列表和对比，以便选择最适合您的移动应用中间件。</p>

<p>PhoneGap是相对比较早进入公众视线的一种选择。但是，开发者简单的基于PhoneGap来开发移动应用肯定会发现结果和Web App比较差的用户体验类似。这也是为什么基于PhoneGap有实用性的移动应用主要集中在iOS上。可是PhoneGap这种现状弱化了HTML5的跨平台价值。</p>

<p>AppCan在技术架构上和PhoneGap类似是Web主体型中间件，但是通过结合了一些原生交互效果能够达到iOS、Android平台都比较一致的用户体验。但是相比PhoneGap的开源，AppCan相对封闭的路线显得过于谨慎。</p>

<p>Titanium是一种基于翻译机制的跨平台中间件，能够开发出具有Native体验的移动应用，但是因为翻译机制的限制导致移动应用开发不能像真正的HTML5开发一样灵活。哪怕一个按钮也不能像普通HTML一样来编写，而必须按照Titanium约定的特定格式。</p>

<p>Salama是全新研发的一套Hybrid APP和云端服务整合的开发套件。在终端，一共有三种开发模式：高度混合模式、JS模式和低度混合模式。在低度混合模式下，需要追求终端速度和显示效果的开发者，可以在不改变原有的构架思路的前提下进行开发。在JS模式下，所有的画面显示及业务逻辑均由JS程序实现，对于原来的基于WEB的开发者，只要熟悉JS、CSS、HTML的前端工程师就可以轻松构建自己的应用。在高度混合模式下，原生和HTML5可以随意组合，可以为开发者在进行大型商业软件开发的过程中提供最高的性价比。不仅如此，在云端Salama还提供了一整套云服务，涵盖了业务处理、数据库操作、文件等资源的存储分发等服务。Salama已经为多家公司提供了方案，知名客户有TOSHIBA-AIRCON、GEDORE等品牌商，同时也在Salama平台上构造了Ishow企业电子目录产品服务。[1-2]</p>

<p>Hybrid App这个领域虽然还处于比较初期的阶段，但是已经有很多优秀的公司和技术团队在致力于跨平台开发移动应用中间件技术的研究，给了开发者众多选择。开发者可以根据实际的项目需求来选择中间件。Web App虽被浏览器厂商和搜索引擎公司所推崇，但存在用户体验差、盈利模式不明确等现阶段无法解决的问题，或最终夭折。Hybrid App正在被越来越多的公司和开发者所认同，势必会成为新世界的王。</p>

<p><a href="http://baike.baidu.com/view/8488720.htm">http://baike.baidu.com/view/8488720.htm</a></p>

<p>Web App和Native App 谁将是未来:
<a href="http://www.cnblogs.com/mofish/archive/2011/07/18/2109565.html">http://www.cnblogs.com/mofish/archive/2011/07/18/2109565.html</a></p>

<p>国内领先的Hybrid App框架 AppCan:   <a href="http://www.appcan.cn/">http://www.appcan.cn/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ iOS 权限管理-Best Practices for Maintaining User Privacy 本地与Push通知检测研究]]></title>
    <link href="http://saick.net/blog/2013/08/22/ios-quan-xian-guan-li-best-practices-for-maintaining-user-privacy/"/>
    <updated>2013-08-22T14:58:00+08:00</updated>
    <id>http://saick.net/blog/2013/08/22/ios-quan-xian-guan-li-best-practices-for-maintaining-user-privacy</id>
    <content type="html"><![CDATA[<p>从Notification的开关入手，发现了统一给出的入口。
从iOS7 beta的文档中获得，但目测还是老的。（关于MircoPhone的控制还没有）</p>

<p>来正文</p>

<h4>Best Practices for Maintaining User Privacy</h4>

<p>Maintaining user privacy should be an important consideration when designing your app. Most iOS devices contain user and device data that users might not want to expose to apps or external entities. If your app uses user or device data in an unexpected way, the user might delete your app rather than trust it to use the data in an appropriate way.</p>

<p>You should access user or device data only with the user’s informed consent obtained in accordance with applicable law. In addition, you should take appropriate steps to protect user and device data and be transparent about how you use it. Here are some best practices that you can take:</p>

<p>Review guidelines from government or industry sources, including the following documents:</p>

<p>The Federal Trade Commission’s report on mobile privacy: Mobile Privacy Disclosures: Building Trust Through Transparency.</p>

<p>The EU Data Protection Commissioners’ Opinion on data protection for Mobile Apps: <a href="http://ec.europa.eu/justice/data-protection/article-29/documentation/opinion-recommendation/files/2013/wp202_en.pdf">http://ec.europa.eu/justice/data-protection/article-29/documentation/opinion-recommendation/files/2013/wp202_en.pdf</a></p>

<p>The California State Attorney General’s recommendations for mobile privacy: Privacy on the Go: Recommendations for the Mobile Ecosystem</p>

<p>These reports provide helpful recommendations for protecting user privacy. You should also review these documents with your company’s legal counsel.
Request access to user or device data that is protected by the iOS system authorization settings at the time the data is needed. Consider supplying a usage description string in your app’s Info.plist file explaining why your app needs that data. Data protected by iOS system authorization settings includes location data, contacts, calendar events, reminders, photos, and media; see Table 1-1. Provide reasonable fallback behavior in situations where the user does not grant access to the requested data.</p>

<p>Be transparent with users about how their data is going to be used. For example, you should specify a URL for your privacy policy or statement with your iTunes Connect metadata when you submit your app, and you might also want to summarize that policy in your app description.
For more information about providing your app’s privacy policy in iTunes Connect, see “Adding New Apps” in iTunes Connect Developer Guide</p>

<p>Give the user control over their user or device data. Provide settings so that the user can disable access to certain types of sensitive information as needed.
Request and use the minimum amount of user or device data needed to accomplish a given task. Do not seek access to or collect data for non obvious reasons, for unnecessary reasons, or because you think it might be useful later.
Take reasonable steps to protect the user and device data that you collect in your apps. When storing such information locally, try to use the iOS data protection feature (described in “Protecting Data Using On-Disk Encryption”) to store it in an encrypted format. And try to use HTTPS when sending user or device data over the network.</p>

<p>If your app uses the ASIdentifierManager class, you must respect the value of its advertisingTrackingEnabled property. And if that property is set to NO by the user, then use the ASIdentifierManager class only for the following purposes: frequency capping, conversion events, estimating the number of unique users, security and fraud detection, and debugging. Remember the ASIdentifierManager class is to be used only for the purposes of serving advertising. Do not use it as a general advertising cookie or for any other purposes.</p>

<p>If you have not already done so, stop using the unique device identifier (UDID) provided by the uniqueIdentifier property of the UIDevice class. That property was deprecated in iOS 5.0, and starting May 1, 2013 the App Store will no longer accept new apps or app updates that use that identifier. Instead, apps should use the identifierForVendor property of the UIDevice class or the advertisingIdentifier property of the ASIdentifierManager class, as appropriate.</p>

<p>Table 1-1 lists the types of data authorizations supported by iOS and how you can determine if your app is authorized to use that data. You should view this table as a starting point for your app’s own privacy behaviors and not as a finite checklist. The contents of this table may evolve over time.</p>

<p>Table 1-1  Data protected by system authorization settings</p>

<p><img class="<a" src="href="http://www.saick.net/images/blog/2013-08-22-ios-quan-xian-guan-li-best-practices-for-maintaining-user-privacy.png">http://www.saick.net/images/blog/2013-08-22-ios-quan-xian-guan-li-best-practices-for-maintaining-user-privacy.png</a>"></p>

<h4>本地与Push通知检测研究</h4>

<p>enabledRemoteNotificationTypes
Returns the types of notifications the application accepts.</p>

<p><em>&ndash; (UIRemoteNotificationType)enabledRemoteNotificationTypes</em></p>

<p>Return Value
A bit mask whose values indicate the types of notifications the user has requested for the application. See UIRemoteNotificationType for valid bit-mask values.</p>

<p>Discussion
The values in the returned bit mask indicate the types of notifications currently enabled for the application. These types are first set when the application calls the registerForRemoteNotificationTypes: method to register itself with Apple Push Notification Service. Thereafter, the user may modify these accepted notification types in the Notifications preference of the Settings application. This method returns those initial or modified values. iOS does not display or play notification types specified in the notification payload that are not one of the enabled types. For example, the application might accept icon-badging as a form of notification, but might reject sounds and alert messages, even if they are specified in the notification payload.</p>

<p>Availability
Available in iOS 3.0 and later.
See Also
– unregisterForRemoteNotifications
Declared In
UIApplication.h</p>

<p>返回结果强调，用位与判断某个功能是否打开。</p>

<p>```
NSUInteger rntypes = [[UIApplication sharedApplication] enabledRemoteNotificationTypes];</p>

<p>BOOL isBadge = rntypes &amp; UIRemoteNotificationTypeBadge;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa 自省机制]]></title>
    <link href="http://saick.net/blog/2013/08/01/cocoa-zi-sheng-ji-zhi/"/>
    <updated>2013-08-01T16:30:00+08:00</updated>
    <id>http://saick.net/blog/2013/08/01/cocoa-zi-sheng-ji-zhi</id>
    <content type="html"><![CDATA[<h3>内省</h3>

<p>内省（Introspection）是面向对象语言和环境的一个强大特性，Objective-C和Cocoa在这个方面尤其的丰富。内省是对象揭示自己作为一个运行时对象的详细信息的一种能力。这些详细信息包括对象在继承树上的位置，对象是否遵循特定的协议，以及是否可以响应特定的消息。NSObject协议和类定义了很多内省方法，用于查询运行时信息，以便根据对象的特征进行识别。</p>

<p>明智地使用内省可以使面向对象的程序更加高效和强壮。它有助于避免错误地进行消息派发、错误地假设对象相等、以及类似的问题。下面的部分将介绍如何在代码中有效地使用NSObject的内省方法。</p>

<p><strong><em>本部分包括如下内容：</em></strong></p>

<ul>
<li>评估继承关系</li>
<li>方法实现和协议遵循</li>
<li>对象的比较</li>
</ul>


<h4>评估继承关系</h4>

<p>一旦您知道一个对象属于什么类，就可能已经相当了解这个对象了。您可以知道它具有什么能力、哪些属性、以及可以响应哪些消息。即使在内省之后不能了解对象所属的类，也可以知道该对象不能响应特定的消息。</p>

<p>NSObject协议声明了几个方法，用于确定对象在类层次中的位置。这些方法在不同粒度上进行操作，比如class和superclass实例方法分别返回代表类和超类的Class对象。使用这些方法需要将一个Class对象和另一个进行对比。列表2-7给出了一个简单（可能是没有价值）的用法实例。</p>

<p>列表2-7  使用类和超类的方法</p>

<p>```
// &hellip;
while ( id anObject = [objectEnumerator nextObject] ) {</p>

<pre><code>if ( [self class] == [anObject superclass] ) {
    // do something appropriate...
}
</code></pre>

<p>}
```
请注意：有些时候您需要通过class或superclass方法得到正确的类消息接收者。
更加常见的是检查对象类的从属关系，这种情况下您需要向该对象发送isKindOfClass:或isMemberOfClass:消息。前一个方法返回接收者是否为给定类或其继承类的实例，isMemberOfClass:消息则告诉您接收者是否为指定类的实例。isKindOfClass: 方法通常更有用，因为通过它可以知道是否可以向该对象发送一系列消息。考虑列表2-8中的代码片断：</p>

<p>列表2-8  使用isKindOfClass:方法</p>

<p>```
if ([item isKindOfClass:[NSData class]]) {</p>

<pre><code>const unsigned char *bytes = [item bytes];
unsigned int length = [item length];
// ...
</code></pre>

<p>}
```
确定tem对象是NSData类的继承类的实例之后，代码就知道可以向它发送NSData的bytes和length消息。假定item是NSMutableData类的一个实例，则isKindOfClass:和isMemberOfClass:之间的差别就变得更加明显。如果您调用的是isMemberOfClass:，而不是isKindOfClass:，条件控制块中的代码将永远不会被执行，因为item并不是NSData类的实例，而是其子类NSMutableData的实例。</p>

<h4>方法实现和协议遵循</h4>

<p>NSObject还有两个功能更加强大的内省方法，即respondsToSelector:和conformsToProtocol:。这两个方法分别告诉您一个对象是否实现特定的方法，以及是否遵循指定的正式协议（即该对象是否采纳了该协议，且实现了该协议的所有方法）。</p>

<p>在代码中，您可以在类似的情况下使用这些方法。通过这些方法，您可以在将消息或消息集合发送给某些潜在的匿名对象之前，确定它们是否可以正确地进行响应。在发送消息之前进行检查可以避免由不能识别的选择器引起的运行时例外。在实现非正式协议（这种协议是委托技术的基础）时，Application Kit就是在调用委托方法之前检查委托对象是否实现该方法（通过respondsToSelector:方法）。</p>

<p>列表2-9显示了如何在代码中使用respondsToSelector:方法。</p>

<p>列表2-9  使用respondsToSelector:方法
```
&ndash; (void)doCommandBySelector:(SEL)aSelector {</p>

<pre><code>if ([self respondsToSelector:aSelector]) {
    [self performSelector:aSelector withObject:nil];
} else {
    [_client doCommandBySelector:aSelector];
}
</code></pre>

<p>}
```
列表2-10显示如何在代码中使用conformsToProtocol:方法：</p>

<p>列表2-10  使用conformsToProtocol:方法</p>

<p>```
// &hellip;
if (!([((id)testObject) conformsToProtocol:@protocol(NSMenuItem)])) {</p>

<pre><code>NSLog(@"Custom MenuItem, '%@', not loaded; it must conform to the
    'NSMenuItem' protocol.\n", [testObject class]);
[testObject release];
testObject = nil;
</code></pre>

<p>}
```</p>

<h4>对象的比较</h4>

<p>hash和isEqual:方法虽然不是严格的内省方法，但是可以发挥类似的作用，是进行对象的识别和比较时不可或缺的运行时工具。它们并不向运行环境查询对象信息，而是依赖于具体类的比较逻辑。</p>

<p>hash和isEqual:方法都在NSObject协议中声明，且彼此关系紧密。实现hash方法必须返回一个整型数，作为哈希表结构中的表地址。两个对象相等（isEqual:方法的判断结果）意味着它们有相同的哈希值。如果您的对象可能被包含在象NSSet这样的集合中，则需要定义hash方法，并确保该方法在两个对象相等的时候返回相同的哈希值。NSObject类中缺省的isEqual:实现只是简单地检查指针是否相等。</p>

<p>isEqual:的使用相当直接，它将消息的接收者和通过参数传入的对象进行比较。对象的比较常常可以在运行时决定应该对对象做些什么。如列表2-11所示，您可以通过isEqual:来确定是否执行某一个动作。在这个例子中，动作是指保存被修改了的预置信息。</p>

<p>列表2-11  使用isEqual:方法
```
&ndash; (void)saveDefaults {</p>

<pre><code>NSDictionary *prefs = [self preferences];
if (![origValues isEqual:prefs]) 
    [Preferences savePreferencesToDefaults:prefs];
</code></pre>

<p>}
```
如果您正在创建子类，则可能需要重载isEqual:方法，以进一步检查对象是否相等。子类可能定义额外的属性，当两个实例被认为相等时，属性的值必须相同。举例来说，假定您创建一个名为MyWidget的NSObject子类，类中包含两个实例变量：name和data。当MyWidget的两个实例被认为是相等时，这些变量必须具有相同的值。列表2-12显示如何在MyWidget类中实现isEqual:方法。</p>

<p>列表 2-12  重载isEqual:方法
```
&ndash; (BOOL)isEqual:(id)other {</p>

<pre><code>if (other == self) 
    return YES;
if (!other || ![other isKindOfClass:[self class]]) 
    return NO;
return [self isEqualToWidget:other];
</code></pre>

<p>}</p>

<ul>
<li>(BOOL)isEqualToWidget:(MyWidget *)aWidget {
  if (self == aWidget)
      return YES;
  if (![(id)[self name] isEqual:[aWidget name]])
      return NO;
  if (![[self data] isEqualToData:[aWidget data]])
      return NO;
  return YES;
}
```
isEqual:方法首先检查指针的等同性，然后是类的等同性，最后调用对象的比较器进行比较。比较器的名称指示出参与比较的对象的类名称。这种类型的比较器对传入的对象进行强制类型检查，是Cocoa中常见的约定，NSString的isEqualToString:和NSTimeZone的isEqualToTimeZone:就是两个这样的例子。特定类的比较器（在这个例子中是isEqualToWidget:）负责执行name和data变量的等同性。</li>
</ul>


<p>在Cocoa框架的所有isEqualToType:方法中，nil都不是正当的参数，这些方法的实现在接收到nil参数时会抛出例外。然而为了向后兼容，Cocoa框架中的isEqual:方法可以接收nil值，在这种情况下返回NO。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property 使用注意事项]]></title>
    <link href="http://saick.net/blog/2013/05/28/propertyshi-yong-zhu-yi-shi-xiang/"/>
    <updated>2013-05-28T11:04:00+08:00</updated>
    <id>http://saick.net/blog/2013/05/28/propertyshi-yong-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<ul>
<li>NSString property的属性必须是copy</li>
<li>delegate property的属性是assign</li>
<li>dealloc 时，如果有delegate，要把delegate置成nilj,避免收到消息等</li>
<li>init 和dealloc中不要用self.XX=;</li>
</ul>


<h4>NSCoping</h4>

<p>Any object that you wish to set for a copy property must support NSCopying, which means that it should conform to the NSCopying protocol.</p>

<p>If you need to set a copy property’s instance variable directly, for example in an initializer method, don’t forget to set a copy of the original object:</p>

<p>```
&ndash; (id)initWithSomeOriginalString:(NSString *)aString {</p>

<pre><code>self = [super init];
if (self) {
    _instanceVariableForCopyProperty = [aString copy];
}
return self;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
