<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Saick Blog]]></title>
  <link href="http://saick.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-01-08T22:45:29+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决iOS报错libc++abi.dylib handler threw exception]]></title>
    <link href="http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception/"/>
    <updated>2014-01-03T23:57:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception</id>
    <content type="html"><![CDATA[<p>这个错有时很奇怪，有时比较正常的情况也会报这个，可能与XCode版本有关。
下文列举一些情况吧</p>

<!-- more -->


<h3>可能引起的情况</h3>

<ul>
<li>如果是多语言的话，要查看xib是否支持改语言～就是要在xib里面的Localiztion选项里面检查。（至少xcode4.5里面是这样的，或许对someone 有帮助）</li>
<li>因为子类需要横屏，父类没设置横屏，所以爆出异常来。Supported orientations has no common orientation with the application, and shouldAutorotate is returning YES</li>
<li>@｛｝ 语法糖，数据出错后也会报这个错</li>
<li>数据越界</li>
</ul>


<h3>定位异常的方法</h3>

<p><code>
@try {  
}  
@catch(NSException *exception) {  
  NSLog(@"exception:%@", exception);  
}
@finally {            
}  
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库不同平台合并 lipo命令使用]]></title>
    <link href="http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong/"/>
    <updated>2013-12-17T23:54:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>查看<em>lipo</em>详解</p>

<p><code>
man lipo
</code></p>

<p><strong>lipo &ndash; create or operate on universal files</strong></p>

<!-- more -->


<h3>Usage</h3>

<h4>Simple</h4>

<p><strong>lipo -create xxx_arm.a xxx_i386.a -output xxx_universal.a</strong></p>

<p>Example:</p>

<p><code>
lipo -create /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphonesimulator/libPrint.a  /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphoneos/libPrint.a  -output /Users/pjk1129/Desktop/libPrint.a
</code></p>

<h4>Shell</h4>

<p><em>libevent.sh</em>
```</p>

<h1>! /bin/sh</h1>

<p>mkdir universal
lipo -create simulator/libevent.a device/libevent.a -o universal/libevent.a
lipo -create simulator/libevent_extra.a device/libevent_extra.a -o universal/libevent_extra.a
lipo -create simulator/libevent_core.a device/libevent_core.a -o universal/libevent_core.a
lipo -create simulator/libevent_pthreads.a device/libevent_pthreads.a -o universal/libevent_pthreads.a
```</p>

<h3>Review Info</h3>

<p><strong>lipo -info xxx_universal.a</strong></p>

<p>Example:</p>

<p><code>
lipo -info /Users/pjk1129/Desktop/libPrint.a
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite(FMDB) 线程安全 - 多线程处理]]></title>
    <link href="http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li/"/>
    <updated>2013-12-12T11:25:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常用到SQLite，CoreData也不错，但很多时候还是自己写sql，使用FMDB来处理。当然了，也可以不用FMDB，直接写处理，这个不解释。</p>

<p>但是，我们在数据库操作的时候，经常遇到多线程访问数据库的状况，常见的有几种处理方法：</p>

<ul>
<li>1, NSLock或类似方法加锁</li>
<li>2, FMDatabaseQueue</li>
<li>3, SQLITE_CONFIG_SERIALIZED</li>
</ul>


<p>下面我们来仔细看一下出现的问题以及相关的解决方案</p>

<!-- more -->


<h3>常见问题</h3>

<p>以使用FMDB为例：</p>

<p>The debugger says that the error occurs at [FMResultSet next] at the line, has <code>EXC_BAD_ACCESS</code></p>

<p><code>
rc = sqlite3_step(statement.statement);
</code></p>

<p>多线程访问的时候，会在这里报错。</p>

<p>如何解决呢？</p>

<h4>1. NSLock加锁（NSMutex）</h4>

<p>详见苹果官方文档：
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html">Threading Programming Guide</a></p>

<h4>2. FMDatabaseQueue</h4>

<p>这个是我在某项目中用到的，所有查询都走这里。
可能因为项目较复杂，用了这个还是会时候有问题，但稳定很多。可以有一些别的地方调用，没查清楚。</p>

<p>```
// 相关引用
_fmQueue = [FMDatabaseQueue databaseQueueWithPath:sqlitePath];</p>

<p>// 查询数据
&ndash; (FMResultSet <em>)executeQueryWithSQL:(NSString </em>)sql
{
  BFLogVerbose(@&ldquo;executeQuery: %@&rdquo;, sql);</p>

<p>  <strong>block FMResultSet *rs = nil;
  </strong>block dispatch_semaphore_t sem = dispatch_semaphore_create(0);</p>

<p>  [_fmQueue inDatabase:^(FMDatabase *fmdb){</p>

<pre><code>FMResultSet *tmpRs = [fmdb executeQuery:sql];
rs = [FMResultSet resultSetWithStatement:tmpRs.statement usingParentDatabase:fmdb];
[tmpRs close];
dispatch_semaphore_signal(sem);
</code></pre>

<p>  }];</p>

<p>  dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
  dispatch_release(sem);</p>

<p>  return rs;
}
```</p>

<h3>3. SQLITE_CONFIG_SERIALIZED</h3>

<p>SQLite provides a much simpler serialization. By just setting the sqlite_config() option SQLITE_CONFIG_SERIALIZED you will probably avoid most of these kinds of headaches. I discovered this the hard way after fighting with threading issues for a long while.</p>

<p>```
if (sqlite3_config(SQLITE_CONFIG_SERIALIZED) == SQLITE_ERROR) {</p>

<pre><code>    NSLog(@"couldn't set serialized mode");
</code></pre>

<p>}
```</p>

<p>参考：
<a href="http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0">http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode下的iOS单元测试]]></title>
    <link href="http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi/"/>
    <updated>2013-12-12T09:34:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi</id>
    <content type="html"><![CDATA[<p>XCode 内置了 OCUnit 单元测试框架，但目前最好用的测试框架应该是 GHUnit。通过 GHUnit + OCMock 组合，我们可以在 iOS 下进行较强大的单元测试功能。本文将演示如何在 XCode 4.2 下使用 OCUnit， GHUnit 和 OCMock 进行单元测试。</p>

<!-- more -->


<h3>OCUnit</h3>

<p>在 XCode 下新建一个 OCUnitProject 工程，选中 Include Unit Tests 选择框，</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332017455/" title="2013-12-12-1 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2805/11332017455_a9679dfeb5.jpg" width="500" height="337" alt="2013-12-12-1"></a></p>

<p>OCUnit 框架则会为我们自动添加 Unit Test 框架代码：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332111874/" title="2013-12-12-2 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5538/11332111874_82dae3bc52.jpg" width="430" height="381" alt="2013-12-12-2"></a></p>

<p>XCode 在 OCUnitProjectTests.m 中为我们自动生成了一个 Fail 的测试：</p>

<p>```
&ndash; (void)testExample
{</p>

<pre><code>STFail(@"Unit tests are not implemented yet in OCUnitProjectTests");
</code></pre>

<p>}
```</p>

<p>让我们来运行 Test，看看效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085666/" title="2013-12-12-3 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7321/11332085666_f398e1edd2.jpg" width="500" height="269" alt="2013-12-12-3"></a></p>

<p>从图中的红色下划线部分可以看出，测试没有通过，符合预期。我们只要像类 OCUnitProjectTests 一样编写继承自 SenTestCase 类的子类，在其中添加形式如：- (void) testXXX(); 的测试函数既可，注意必须是一个无参无返回类型且名称是以 test 为前缀的函数。
OCUnit 的有点是官方支持，于 XCode 集成的比较好。</p>

<h3>GHUnit</h3>

<p>GHUnit 是一个开源的单元测试框架，具有可视化界面，功能亦相当强大。Mark 写了一篇 OCUnit vs GHUnit 的文章，有兴趣的童鞋可以看一看。</p>

<p>OCMock 是由 Mulle Kybernetik 为 OS X 和 iOS 平台编写的遵循 mock object 理念的单元测试框架。</p>

<h4>下面来介绍如何配置 GHUnit 和 OCMock</h4>

<ul>
<li>1，首先，创建一个名为 GHUnitProject 的单视图应用程序，注意：不要选中 Include Unit Tests 选择框。然后运行，应该出现白屏。</li>
<li>2，添加新的 test target，选中左边的工程名，点击右侧的 Add Target，新增一个名为 Tests 的 Empty Application 应用程序，让其附属于 GHUnitProject注意：不要选中 Include Unit Tests 选择框。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332017205/" title="2013-12-12-4 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5477/11332017205_d39c81a057.jpg" width="500" height="346" alt="2013-12-12-4"></a>
<a href="http://www.flickr.com/photos/shjborage/11332017075/" title="2013-12-12-5 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7313/11332017075_e828e5525f.jpg" width="500" height="419" alt="2013-12-12-5"></a></p>

<ul>
<li>3，向 Tests 工程中（注意是 Tests 工程）添加 GHUnitIOS Framework。首先下载与 XCode 版本对应的 GHUnitIOS Framework。英文好的可以直接查看官方 iOS 版的安装文档：点此查看，跳过此第 3 节；否则请接着看。</li>
<li>3.1，解压 GHUnitIOS 框架到 GHUnitProject 下，让 GHUnitIOS.framework 与 Tests 在同一目录下。</li>
<li>3.2，回到 XCode，右击工程中的 Frameworks group，选中 Add Files to&hellip;菜单，选取 GHUnitIOS.framework ，注意 targets 要选择 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332111384/" title="2013-12-12-6 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7352/11332111384_e75ae2182a.jpg" width="478" height="500" alt="2013-12-12-6"></a></p>

<ul>
<li>3.3，设置 Tests 的 Build Settings：在 Other Linker Flags 中增加两个 flag： -ObjC 和 -all_load。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016815/" title="2013-12-12-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3811/11332016815_c8ba09db5d.jpg" width="500" height="316" alt="2013-12-12-7"></a></p>

<ul>
<li>3.1，删除 Tests 工程中的 UTSAppDelegate.h 和 UTSAppDelegate.m 两个文件；</li>
<li>3.2，修改 Tests 工程中的 main.m 为:</li>
</ul>


<p>```</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;GHUnitIOS/GHUnitIOSAppDelegate.h></h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>@autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([GHUnitIOSAppDelegate class]));
}
</code></pre>

<p>}
```</p>

<p>3.3，选择编译目标 Tests>iPhone 5.0 Simulator，编译运行，应该能得到如下效果。目前我们还没有编写任何实际测试，所以列表为空。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085166/" title="2013-12-12-8 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2872/11332085166_39da2998f9.jpg" width="331" height="492" alt="2013-12-12-8"></a></p>

<p>4，编写 GHUnit 测试。向 Tests 工程中添加名为 GHUnitSampleTest 的 Objective C class。其内容如下：</p>

<p>```
GHUnitSampleTest.h</p>

<h1>import &lt;GHUnitIOS/GHUnit.h></h1>

<p>@interface GHUnitSampleTest: GHTestCase
{
}
@end
GHUnitSampleTest.m</p>

<h1>import &ldquo;GHUnitSampleTest.h&rdquo;</h1>

<p>@implementation GHUnitSampleTest
&ndash; (void)testStrings
{</p>

<pre><code>NSString *string1 = @"a string";
GHTestLog(@"I can log to the GHUnit test console: %@", string1);
// Assert string1 is not NULL, with no custom error description
GHAssertNotNULL(string1, nil);
// Assert equal objects, add custom error description
NSString *string2 = @"a string";
GHAssertEqualObjects(string1, string2, @"A custom error message. string1 should be equal to: %@.", string2);
</code></pre>

<p>}
@end
```</p>

<p>然后编译运行，点击 Run，效果如下：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332159843/" title="2013-12-12-9 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3788/11332159843_1766364257.jpg" width="322" height="488" alt="2013-12-12-9"></a></p>

<p>图中的 All 栏显示所以的测试，Failed 栏显示没有通过的测试。强大吧，GHUnit。你可以向 GHUnitSampleTest 添加新的测试，比如：</p>

<p>```
&ndash; (void)testSimpleFail
{</p>

<pre><code>GHAssertTrue(NO, nil);
</code></pre>

<p>}
```</p>

<p>我们可以向 Tests 添加更多测试类，只要该类是继承自 GHTestCase，且其中的测试方法都是无参无返回值且方法名字是以 test 为前缀即可。</p>

<h3>OCMock</h3>

<p>OCMock一般用来模拟一个类，创建其对象，并设置该对象。
下面我们来添加 OCMock。</p>

<ul>
<li>1，我们只能以静态库的方式来添加 OCMock。在 GHUnitTest 目录下新建 Libraries 目录，该目录是与 Tests 目录平级的。下载静态库文件，解压头文件至该目录下。
文件下载：头文件 libOCMock.a ，framework 文件：OCMock framework ，打开下载好的ocmock-1.77.dmg，拷贝其中的‘Release/Library/Headers/OCMock’ 目录至 Libraries 下。最终目录结构如下：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084876/" title="2013-12-12-10 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3782/11332084876_6f67df9eef.jpg" width="500" height="96" alt="2013-12-12-10"></a></p>

<ul>
<li>2，在 GHUnitTest 工程中新建名为 Libraries 的 group，导入libOCMock.a 和目录 OCMock，注意 target 是 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084976/" title="2013-12-12-11 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3751/11332084976_15c36cbd88.jpg" width="479" height="500" alt="2013-12-12-11"></a></p>

<ul>
<li>3，设置 Tests 的 Build Setting。让 Libray Search Paths 包含 $(SRCROOT)/Libraries：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016595/" title="2013-12-12-12 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2879/11332016595_f7fae82fb0.jpg" width="500" height="245" alt="2013-12-12-12"></a></p>

<p>在 Header Search Paths 中增加 $(SRCROOT)/Libraries，并选中 Recursive 选择框。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332084796/" title="2013-12-12-13 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7320/11332084796_32d4115828.jpg" width="500" height="277" alt="2013-12-12-13"></a></p>

<ul>
<li>4，编写 OCMock 测试。向 Tests 工程中添加名为 OCMockSampleTest 的 Objective C class。其内容如下：</li>
</ul>


<p>```
OCMockSampleTest.h</p>

<h1>import &lt;GHUnitIOS/GHUnit.h></h1>

<p>@interface OCMockSampleTest : GHTestCase
@end
OCMockSampleTest.m</p>

<h1>import &ldquo;OCMockSampleTest.h&rdquo;</h1>

<h1>import &lt;OCMock/OCMock.h></h1>

<p>@implementation OCMockSampleTest
// simple test to ensure building, linking,
// and running test case works in the project
&ndash; (void)testOCMockPass
{</p>

<pre><code>id mock = [OCMockObject mockForClass:NSString.class];
[[[mock stub] andReturn:@"mocktest"] lowercaseString];
NSString *returnValue = [mock lowercaseString];
GHAssertEqualObjects(@"mocktest", returnValue,
@"Should have returned the expected string.");
</code></pre>

<p>}
&ndash; (void)testOCMockFail
{</p>

<pre><code>id mock = [OCMockObject mockForClass:NSString.class];
[[[mock stub] andReturn:@"mocktest"] lowercaseString];
NSString *returnValue = [mock lowercaseString];
GHAssertEqualObjects(@"thisIsTheWrongValueToCheck",
returnValue, @"Should have returned the expected string.");
</code></pre>

<p>}
@end
```</p>

<p>编译运行，点击 Run，效果如下图。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332016435/" title="2013-12-12-14 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5507/11332016435_6afa1b6912.jpg" width="322" height="480" alt="2013-12-12-14"></a></p>

<p>至此，iOS 下的OCUnit，GHUnit，OCMock 单元测试介绍就到此结束了。当然还有其他一些测试框架，比如 google 出品的 GTM。</p>

<p>参考资料：</p>

<p>OCMock: <a href="http://ocmock.org/">http://ocmock.org/</a></p>

<p>Unit Testing in Xcode 4- use OCUnit and SenTest instead of GHUnit</p>

<p>GHUnit Reference: <a href="http://gabriel.github.com/gh-unit/">http://gabriel.github.com/gh-unit/</a></p>

<p>转自：<a href="http://www.uml.org.cn/mobiledev/201201093.asp">http://www.uml.org.cn/mobiledev/201201093.asp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用icon font及自定义字体]]></title>
    <link href="http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font/"/>
    <updated>2013-12-11T21:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font</id>
    <content type="html"><![CDATA[<p>在开发阿里数据iOS版客户端的时候，由于项目进度很紧，项目里的所有图标都是用最平常的背景图片方案来实现。而为了要兼容普通屏与Retina屏的设备，苹果要求每个背景图都要以两种尺寸存(a.png和<a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#97;&#x40;&#x32;&#x78;&#46;&#x70;&#110;&#x67;">&#x61;&#x40;&#50;&#120;&#x2e;&#112;&#x6e;&#x67;</a>)，这让设计师们增加了成本，因为他们每次都得出两份背景图标。</p>

<p>现在在web开发上，icon font技术的应用很广泛，它不仅在解决多分辨率显示问题上很有成效，而且在使用它的时候还能降低不少设计和开发成本。</p>

<p>那么它能不能应用到ios开发上来呢？带着这个疑问，我在github上找到了FontasticIcons和ios-fontawesome，但是这两个OC包对icon资源封装都有限，而且扩展也不是很方便。</p>

<p>既然能在ios上使用icon font，那么怎么用呢？经过一番摸索，发现使用原理和自定义字体差不多，只有个别操作不太一样，接下来我给大家详细介绍一下。</p>

<!-- more -->


<h3>如何使用自定义字体</h3>

<p>在讲icon font之前，首先先来看看普通自定义字体是如何在ios中使用的，两个原理是一样的。这里以KaushanScript-Regular为例：</p>

<h4>Step 1: 导入字体文件</h4>

<p>将字体文件拖入项目（ios支持的字体格式有：.ttf、.otf，其他格式不确定）：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323775276/" title="2013-12-11-01 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2846/11323775276_b14a547aa1.jpg" width="500" height="354" alt="2013-12-11-01"></a></p>

<p>然后再在项目的资源池中确认字体文件是否加入项目，打开xcode项目的Build Phases中查看：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323859283/" title="2013-12-11-02 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3816/11323859283_dff602ee81.jpg" width="500" height="249" alt="2013-12-11-02"></a></p>

<h4>Step 2: 配置.plist文件</h4>

<p>在.plist文件中注册新加入的字体，.plist文件往往以“[appname]-Info.plist”的形式存在于“Supporting Files”文件夹内。 在.plist文件中添加新属性“Fonts provided by application”，该属性的值是一个数组，这意味着可以在这里注册多个字体。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323790974/" title="2013-12-11-03 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3692/11323790974_9beda31ccb.jpg" width="500" height="209" alt="2013-12-11-03"></a></p>

<h4>Step 3: 找到字体集名称</h4>

<p>注册完，我们需要检测是否注册成功且取得新字体名称，检测方法就是把所有安装了的字体都打印出来，看看新注册的字体是否在里面：</p>

<p>```
for (NSString* family in [UIFont familyNames])
{</p>

<pre><code>NSLog(@"%@", family); 
for (NSString* name in [UIFont fontNamesForFamilyName: family]) 
{ 
     NSLog(@"  %@", name); 
} 
</code></pre>

<p>}
```</p>

<p>运行完，查看控制台里打印出的所有字体集中是否有新注册的字体，如果有，说明注册成功，并将字体名（在这里是“Kaushan Script”）记住留到后面用。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323787836/" title="2013-12-11-04 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5481/11323787836_e8fc5ed22a.jpg" width="500" height="392" alt="2013-12-11-04"></a></p>

<h3>Step 4: 使用新字体</h3>

<p>最后，就是使用你最新加入的字体啦：</p>

<p><code>
UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)];
label.font = [UIFont fontWithName:@"Kaushan Script" size:35];
label.text = @"icon font";
label.textColor = UIColorFromRGB(0xFF7300);
[self.view addSubview:label];
</code></p>

<p>效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323858493/" title="2013-12-11-05 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5471/11323858493_39eaf9269b.jpg" width="276" height="113" alt="2013-12-11-05"></a></p>

<h3>开始使用icon font</h3>

<p>图标字体也是字体，使用方式和上面所说的差不多，只是在套用上有些差别；这里拿fontello的图标字体库为例。</p>

<ul>
<li>1.选择需要的图标
在fontello的图标字体库选择自己需要的图标，并下载生成的字体文件。</li>
<li>2.按照上面的步骤将图标字体注册到项目中</li>
<li>3.找到图标对应的unicode码
使用FontLab Studio 5工具打开字体文件（比如fontello.ttf），就可以看到图标与unicode码之间的对应关系啦。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323774246/" title="2013-12-11-06 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2824/11323774246_65813b1aab.jpg" width="500" height="126" alt="2013-12-11-06"></a></p>

<ul>
<li>4.使用图标</li>
</ul>


<p><code>
UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)];
label.font = [UIFont fontWithName:@"fontello" size:35];
label.text = @"\U0000E802 \U0000E801 \U0000E803 \U0000E804 \U0000E805 \U0000E81A";
label.textColor = UIColorFromRGB(0xFF7300);
[self.view addSubview:label];
</code></p>

<p>在Objective-C中，自定义的unicode码需要以“\U0000E802”这样的格式存在。</p>

<ul>
<li>5.使用emoji表情库
这里还可以使用苹果emoji表情库的图标，这里不需要新加字体库，只要找到emoji图标和unicode之间的对应关系就好，但是这些图标都不是矢量图，缩放请自重。</li>
</ul>


<p><code>
UILabel *label5 = [[UILabel alloc] initWithFrame:CGRectMake(10, 480, 300, 50)];
label5.text = @"\U0000e42a\U0000e525\U0000e41c";
[self.view addSubview:label5];
</code></p>

<ul>
<li>6.效果</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323858703/" title="2013-12-11-07 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5526/11323858703_820c5b3eef.jpg" width="366" height="500" alt="2013-12-11-07"></a></p>

<ul>
<li>7.使用自制图标字体</li>
<li><p>如果上面介绍的图标库还满足不了你的需求，或者需要的图标分布在多个图标库而不能集中到一个字体文件中；那么你可能需要自己去制作图标字体文件了。</p></li>
</ul>


<h3>总结</h3>

<p>这样，在iOS开发上，不仅可以直接去开源图标库找现成的图标用到项目中，而且还可以轻松地改变图标的颜色、大小，相信可以解放不少设计师和工程师的工作量。</p>

<p>图标字体库
<a href="http://fontello.com/">fontello</a>
etao图标字体库（这里有个问题要注意，etao的图标字体名为“Untitled1”，是不是生成字体的同学疏忽啦？）
IcoMoon
<a href="http://www.easyapns.com/iphone-emoji-alerts">emoji表情库</a></p>

<p>参考资料</p>

<p><a href="http://codewithchris.com/common-mistakes-with-adding-custom-fonts-to-your-ios-app/">Common Mistakes With Adding Custom Fonts to Your iOS App</a></p>

<p><a href="http://ux.etao.com/posts/401">Icon font 实践</a></p>

<p>FontasticIcons</p>

<p>ios-fontawesome</p>

<p><a href="https://coderwall.com/p/wrb3pw">Custom Unicode Characters in Objective-C</a></p>

<p><a href="http://www.qianduan.net/css3-icon-font-guide.html">CSS3 icon font完全指南</a></p>

<p>《转》</p>
]]></content>
  </entry>
  
</feed>
