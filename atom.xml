<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Saick Blog]]></title>
  <link href="http://saick.net/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-02-17T01:05:30+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C&amp;XCode注释的正确写法]]></title>
    <link href="http://saick.net/blog/2014/02/07/objective-c-and-xcodezhu-shi-de-zheng-que-xie-fa/"/>
    <updated>2014-02-07T18:02:00+08:00</updated>
    <id>http://saick.net/blog/2014/02/07/objective-c-and-xcodezhu-shi-de-zheng-que-xie-fa</id>
    <content type="html"><![CDATA[<p>注释对于C体系的同学来说还是不太规范，对于XCode的文档系统来说，规范还是有帮助的，能在QuickHelp等提示中反应出来。所以还是多注意下会比较好。</p>

<p>推荐以下两种写法(主是方法注释，其它的以后遇到再补充吧)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *    @brief update table
</span><span class='line'> *
</span><span class='line'> *    @param  model   you want to update the entity
</span><span class='line'> *    @param  where   can use NSString or NSDictionary or nil
</span><span class='line'>                    when "where" is nil : update the value based on rowid column or primary key column
</span><span class='line'> *
</span><span class='line'> *    @return the updated was successful
</span><span class='line'> */
</span><span class='line'>-(BOOL)updateToDB:(NSObject *)model where:(id)where;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> @brief   每个Section的高度，默认为 0
</span><span class='line'> @param   niDropDown: NIDropDown，用于区分不同的NI
</span><span class='line'> @param   indexPath:  定位Section
</span><span class='line'> @return  高度
</span><span class='line'> */
</span><span class='line'>- (CGFloat)niDropDown:(NIDropDown *)niDropDown heightForHeaderInSection:(NSInteger)section;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中签名相关-MD5-sha1-10进制与16进制互转]]></title>
    <link href="http://saick.net/blog/2014/01/21/ioszhong-qian-ming-xiang-guan-md5-sha1-10jin-zhi-yu-16jin-zhi-hu-zhuan/"/>
    <updated>2014-01-21T21:32:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/21/ioszhong-qian-ming-xiang-guan-md5-sha1-10jin-zhi-yu-16jin-zhi-hu-zhuan</id>
    <content type="html"><![CDATA[<p>费话少说，直接上代码</p>

<h4>md5, sha1</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSString *)md5:(NSString *)str
</span><span class='line'>{
</span><span class='line'>  if ([str length] == 0)
</span><span class='line'>    return @"";
</span><span class='line'>  
</span><span class='line'>  unsigned char result[CC_MD5_DIGEST_LENGTH];
</span><span class='line'>  CC_MD5([str UTF8String], (CC_LONG)strlen([str UTF8String]) , result);
</span><span class='line'>  NSMutableString *digest = [NSMutableString string];
</span><span class='line'>  for (int i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++)
</span><span class='line'>    [digest appendFormat:@"%02X", result[i]];
</span><span class='line'>  return [digest lowercaseString];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (NSString *)sha1:(NSString *)input
</span><span class='line'>{
</span><span class='line'>  if ([input length] == 0)
</span><span class='line'>    return @"";
</span><span class='line'>  
</span><span class='line'>  const char *cstr = [input cStringUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>  NSData *data = [NSData dataWithBytes:cstr length:input.length];
</span><span class='line'>  
</span><span class='line'>  uint8_t digest[CC_SHA1_DIGEST_LENGTH];
</span><span class='line'>  
</span><span class='line'>  CC_SHA1(data.bytes, data.length, digest);
</span><span class='line'>  
</span><span class='line'>  NSMutableString *output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];
</span><span class='line'>  
</span><span class='line'>  for(int i=0; i&lt;CC_SHA1_DIGEST_LENGTH; i++) {
</span><span class='line'>    [output appendFormat:@"%02X", digest[i]];
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return output;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>10进制转16进制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *num16Str = [NSString stringWithFormat:@"%x", numBase10];</span></code></pre></td></tr></table></div></figure>


<h4>16进制转10进制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *num10Str = [NSString stringWithFormat:@"%d", strtoul([numBase16 UTF8String], 0, 16)]; </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 UI兼容 导航栏按钮边框 UINavigationItem left and right padding]]></title>
    <link href="http://saick.net/blog/2014/01/20/ios7-uijian-rong-dao-hang-lan-an-niu-bian-kuang-uinavigationitem-left-and-right-padding/"/>
    <updated>2014-01-20T23:16:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/20/ios7-uijian-rong-dao-hang-lan-an-niu-bian-kuang-uinavigationitem-left-and-right-padding</id>
    <content type="html"><![CDATA[<p>iOS7之前的UI为：</p>

<iframe src="https://www.flickr.com/photos/shjborage/12052252814/player/120d793b08" height="44" width="324"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>而在iOS7中，由于设计方面的原因，使得UI变为:</p>

<iframe src="https://www.flickr.com/photos/shjborage/12052149003/player/bb36320bc9" height="44" width="322"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<!-- more -->


<p>修改的方法重写UINavigationItem的setLeftBarButtonItem和setRightBarButtonItem方法，使之与之前版本兼容；</p>

<p>代码如下：</p>

<p><em>UINavigationItem+margin.h</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  UINavigationItem+margin.h
</span><span class='line'>//
</span><span class='line'>//  Created by shjborage on 1/20/14.
</span><span class='line'>//  Copyright (c) 2014 Saick. All rights reserved.
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface UINavigationItem (margin)
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p><em>UINavigationItem+margin.m</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  UINavigationItem+margin.m
</span><span class='line'>//
</span><span class='line'>//  Created by shjborage on 1/20/14.
</span><span class='line'>//  Copyright (c) 2014 Saick. All rights reserved.
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>#import "UINavigationItem+margin.h"
</span><span class='line'>
</span><span class='line'>@implementation UINavigationItem (margin)
</span><span class='line'>
</span><span class='line'>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_6_1
</span><span class='line'>
</span><span class='line'>- (void)setLeftBarButtonItem:(UIBarButtonItem *)_leftBarButtonItem
</span><span class='line'>{
</span><span class='line'>  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>    negativeSeperator.width = -10.0f;
</span><span class='line'>    
</span><span class='line'>    if (_leftBarButtonItem) {
</span><span class='line'>      [self setLeftBarButtonItems:@[negativeSeperator, _leftBarButtonItem]];
</span><span class='line'>    } else {
</span><span class='line'>      [self setLeftBarButtonItems:@[negativeSeperator]];
</span><span class='line'>    }
</span><span class='line'>  } else {
</span><span class='line'>    [self setLeftBarButtonItem:_leftBarButtonItem animated:NO];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//- (void)setLeftBarButtonItems:(NSArray *)leftBarButtonItems
</span><span class='line'>//{
</span><span class='line'>//  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>//    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>//    negativeSeperator.width = -10.0f;
</span><span class='line'>//    
</span><span class='line'>//    if ([_leftBarButtonItems count] &gt; 0) {
</span><span class='line'>//      NSMutableArray *items = [NSMutableArray arrayWithArray:leftBarButtonItems];
</span><span class='line'>//      [items insertObject:negativeSeperator atIndex:0];
</span><span class='line'>//      [self setLeftBarButtonItems:items animated:NO];
</span><span class='line'>//    } else {
</span><span class='line'>//      [self setLeftBarButtonItems:leftBarButtonItems animated:NO];
</span><span class='line'>//    }
</span><span class='line'>//  } else {
</span><span class='line'>//    [self setLeftBarButtonItems:leftBarButtonItems animated:NO];
</span><span class='line'>//  }
</span><span class='line'>//}
</span><span class='line'>
</span><span class='line'>- (void)setRightBarButtonItem:(UIBarButtonItem *)_rightBarButtonItem
</span><span class='line'>{
</span><span class='line'>  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>    negativeSeperator.width = -10.0f;
</span><span class='line'>    
</span><span class='line'>    if (_rightBarButtonItem) {
</span><span class='line'>      [self setRightBarButtonItems:@[negativeSeperator, _rightBarButtonItem]];
</span><span class='line'>    } else {
</span><span class='line'>      [self setRightBarButtonItems:@[negativeSeperator]];
</span><span class='line'>    }
</span><span class='line'>  } else {
</span><span class='line'>    [self setRightBarButtonItem:_rightBarButtonItem animated:NO];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//- (void)setRightBarButtonItems:(NSArray *)rightBarButtonItems
</span><span class='line'>//{
</span><span class='line'>//  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>//    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>//    negativeSeperator.width = -10.0f;
</span><span class='line'>//    
</span><span class='line'>//    if ([_leftBarButtonItems count] &gt; 0) {
</span><span class='line'>//      NSMutableArray *items = [NSMutableArray arrayWithArray:rightBarButtonItems];
</span><span class='line'>//      [items insertObject:negativeSeperator atIndex:0];
</span><span class='line'>//      [self setRightBarButtonItems:items animated:NO];
</span><span class='line'>//    } else {
</span><span class='line'>//      [self setRightBarButtonItems:rightBarButtonItems animated:NO];
</span><span class='line'>//    }
</span><span class='line'>//  } else {
</span><span class='line'>//    [self setRightBarButtonItems:rightBarButtonItems animated:NO];
</span><span class='line'>//  }
</span><span class='line'>//}
</span><span class='line'>
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>项目源码不做任何修改，问题解决；</p>

<p>添加Button：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *leftBarItem = [[UIBarButtonItem alloc] initWithCustomView:btnBack];
</span><span class='line'>self.navigationItem.leftBarButtonItem = leftBarItem;
</span><span class='line'>[leftBarItem release];</span></code></pre></td></tr></table></div></figure>


<p>如果原来项目中有使用<code>self.navigationItem.leftBarButtonItems</code>或<code>self.navigationItem.rightBarButtonItems</code>可参考注释部分内容。如果都是多个的，那么直接换把注释解开，把单个的给注释掉。<strong>搞懂原理才是重要的</strong></p>

<p><a href="http://www.cnblogs.com/maxfong/p/3375167.html">原文地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS客户端的gzip处理-gzip-ungzip]]></title>
    <link href="http://saick.net/blog/2014/01/20/ioske-hu-duan-de-gzipchu-li-gzip-ungzip/"/>
    <updated>2014-01-20T20:28:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/20/ioske-hu-duan-de-gzipchu-li-gzip-ungzip</id>
    <content type="html"><![CDATA[<p>服务端使用gzip压缩，可以大幅度减小传输包的体积，加快客户端网络请求速度，为用户节省流量。当服务器返回的httpHeader的&#8221;Content-Encoding&#8221; 属性的值是gzip时，数据会自动被解压缩，但有时候在客户端还没拿到数据的时候，就已经被某些网关解压了，这样gzip就没有起到作用。因此可以约定其他策略，防止网关解压，例如在别的头属性中标记gzip。</p>

<!-- more -->


<p>如此，就需要我们自己来解压gzip数据。方法如下：添加framework库中的libbz2.1.0.dylib；</p>

<p>添加以下静态方法：</p>

<h4>gzip解压：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSData *)ungzipData:(NSData *)compressedData
</span><span class='line'>{
</span><span class='line'>  if ([compressedData length] == 0)
</span><span class='line'>    return compressedData;
</span><span class='line'>  
</span><span class='line'>  unsigned full_length = [compressedData length];
</span><span class='line'>  unsigned half_length = [compressedData length] / 2;
</span><span class='line'>  
</span><span class='line'>  NSMutableData *decompressed = [NSMutableData dataWithLength: full_length + half_length];
</span><span class='line'>  BOOL done = NO;
</span><span class='line'>  int status;
</span><span class='line'>  
</span><span class='line'>  z_stream strm;
</span><span class='line'>  strm.next_in = (Bytef *)[compressedData bytes];
</span><span class='line'>  strm.avail_in = [compressedData length];
</span><span class='line'>  strm.total_out = 0;
</span><span class='line'>  strm.zalloc = Z_NULL;
</span><span class='line'>  strm.zfree = Z_NULL;
</span><span class='line'>  if (inflateInit2(&strm, (15+32)) != Z_OK)
</span><span class='line'>    return nil;
</span><span class='line'>  
</span><span class='line'>  while (!done) {
</span><span class='line'>    // Make sure we have enough room and reset the lengths.
</span><span class='line'>    if (strm.total_out &gt;= [decompressed length]) {
</span><span class='line'>      [decompressed increaseLengthBy: half_length];
</span><span class='line'>    }
</span><span class='line'>    strm.next_out = [decompressed mutableBytes] + strm.total_out;
</span><span class='line'>    strm.avail_out = [decompressed length] - strm.total_out;
</span><span class='line'>    // Inflate another chunk.
</span><span class='line'>    status = inflate (&strm, Z_SYNC_FLUSH);
</span><span class='line'>    if (status == Z_STREAM_END) {
</span><span class='line'>      done = YES;
</span><span class='line'>    } else if (status != Z_OK) {
</span><span class='line'>      break;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  if (inflateEnd (&strm) != Z_OK)
</span><span class='line'>    return nil;
</span><span class='line'>  // Set real length.
</span><span class='line'>  if (done) {
</span><span class='line'>    [decompressed setLength: strm.total_out];
</span><span class='line'>    return [NSData dataWithData: decompressed];
</span><span class='line'>  }
</span><span class='line'>  return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4><em>顺便附上gzip压缩：</em></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSData*)gzipData:(NSData*)pUncompressedData
</span><span class='line'>{
</span><span class='line'>  if (!pUncompressedData || [pUncompressedData length] == 0)
</span><span class='line'>  {
</span><span class='line'>    NSLog(@"%s: Error: Can't compress an empty or null NSData object.", __func__);
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  z_stream zlibStreamStruct;
</span><span class='line'>  zlibStreamStruct.zalloc    = Z_NULL; // Set zalloc, zfree, and opaque to Z_NULL so
</span><span class='line'>  zlibStreamStruct.zfree     = Z_NULL; // that when we call deflateInit2 they will be
</span><span class='line'>  zlibStreamStruct.opaque    = Z_NULL; // updated to use default allocation functions.
</span><span class='line'>  zlibStreamStruct.total_out = 0; // Total number of output bytes produced so far
</span><span class='line'>  zlibStreamStruct.next_in   = (Bytef*)[pUncompressedData bytes]; // Pointer to input bytes
</span><span class='line'>  zlibStreamStruct.avail_in  = [pUncompressedData length]; // Number of input bytes left to process
</span><span class='line'>  
</span><span class='line'>  int initError = deflateInit2(&zlibStreamStruct, Z_DEFAULT_COMPRESSION, Z_DEFLATED, (15+16), 8, Z_DEFAULT_STRATEGY);
</span><span class='line'>  if (initError != Z_OK)
</span><span class='line'>  {
</span><span class='line'>    NSString *errorMsg = nil;
</span><span class='line'>    switch (initError)
</span><span class='line'>    {
</span><span class='line'>      case Z_STREAM_ERROR:
</span><span class='line'>        errorMsg = @"Invalid parameter passed in to function.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_MEM_ERROR:
</span><span class='line'>        errorMsg = @"Insufficient memory.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_VERSION_ERROR:
</span><span class='line'>        errorMsg = @"The version of zlib.h and the version of the library linked do not match.";
</span><span class='line'>        break;
</span><span class='line'>      default:
</span><span class='line'>        errorMsg = @"Unknown error code.";
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>    NSLog(@"%s: deflateInit2() Error: \"%@\" Message: \"%s\"", __func__, errorMsg, zlibStreamStruct.msg);
</span><span class='line'>
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // Create output memory buffer for compressed data. The zlib documentation states that
</span><span class='line'>  // destination buffer size must be at least 0.1% larger than avail_in plus 12 bytes.
</span><span class='line'>  NSMutableData *compressedData = [NSMutableData dataWithLength:[pUncompressedData length] * 1.01 + 12];
</span><span class='line'>  
</span><span class='line'>  int deflateStatus;
</span><span class='line'>  do
</span><span class='line'>  {
</span><span class='line'>    // Store location where next byte should be put in next_out
</span><span class='line'>    zlibStreamStruct.next_out = [compressedData mutableBytes] + zlibStreamStruct.total_out;
</span><span class='line'>    
</span><span class='line'>    // Calculate the amount of remaining free space in the output buffer
</span><span class='line'>    // by subtracting the number of bytes that have been written so far
</span><span class='line'>    // from the buffer's total capacity
</span><span class='line'>    zlibStreamStruct.avail_out = [compressedData length] - zlibStreamStruct.total_out;
</span><span class='line'>    deflateStatus = deflate(&zlibStreamStruct, Z_FINISH);
</span><span class='line'>    
</span><span class='line'>  } while ( deflateStatus == Z_OK );
</span><span class='line'>  
</span><span class='line'>  // Check for zlib error and convert code to usable error message if appropriate
</span><span class='line'>  if (deflateStatus != Z_STREAM_END)
</span><span class='line'>  {
</span><span class='line'>    NSString *errorMsg = nil;
</span><span class='line'>    switch (deflateStatus)
</span><span class='line'>    {
</span><span class='line'>      case Z_ERRNO:
</span><span class='line'>        errorMsg = @"Error occured while reading file.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_STREAM_ERROR:
</span><span class='line'>        errorMsg = @"The stream state was inconsistent (e.g., next_in or next_out was NULL).";
</span><span class='line'>        break;
</span><span class='line'>      case Z_DATA_ERROR:
</span><span class='line'>        errorMsg = @"The deflate data was invalid or incomplete.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_MEM_ERROR:
</span><span class='line'>        errorMsg = @"Memory could not be allocated for processing.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_BUF_ERROR:
</span><span class='line'>        errorMsg = @"Ran out of output buffer for writing compressed bytes.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_VERSION_ERROR:
</span><span class='line'>        errorMsg = @"The version of zlib.h and the version of the library linked do not match.";
</span><span class='line'>        break;
</span><span class='line'>      default:
</span><span class='line'>        errorMsg = @"Unknown error code.";
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>    DDLogError(@"%s: zlib error while attempting compression: \"%@\" Message: \"%s\"", __func__, errorMsg, zlibStreamStruct.msg);
</span><span class='line'>
</span><span class='line'>    // Free data structures that were dynamically created for the stream.
</span><span class='line'>    deflateEnd(&zlibStreamStruct);
</span><span class='line'>    
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  // Free data structures that were dynamically created for the stream.
</span><span class='line'>  deflateEnd(&zlibStreamStruct);
</span><span class='line'>  [compressedData setLength: zlibStreamStruct.total_out];
</span><span class='line'>  DDLogInfo(@"%s: Compressed file from %d KB to %d KB", __func__, [pUncompressedData length]/1024, [compressedData length]/1024);
</span><span class='line'>  
</span><span class='line'>  return compressedData;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout by Example]]></title>
    <link href="http://saick.net/blog/2014/01/18/auto-layout-by-example/"/>
    <updated>2014-01-18T16:21:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/18/auto-layout-by-example</id>
    <content type="html"><![CDATA[<p>Autolayout 博大精深，以前转过一篇，可是用的时候还是不会用。没办法只能看苹果官方的文档，发现除了讲基本的使用（XCode5中的一些操作已不太一样）外，还有这么个例子，主要解决了屏幕大小不同适配的问题，真是不错。摘录下来，希望对大家有用。</p>

<p>如果某个地方看不明白可以留言给我，我翻译并给大家讲。</p>

<p>ScrollView这块我暂时没有用，没细看，下面Size适配那个我试了，并且写了Demo，大家感兴趣下文下载研究。</p>

<p>Auto Layout makes it easy to solve many complex layout problems automatically, without the need for manual view manipulation. By creating the right combination of constraints, you can create layouts that are traditionally difficult to manage in code, such as equally spaced views that adjust to changes in orientation or size, elements inside scroll views that affect the size of the scrolling content, or elements inside scroll views that don’t scroll with the rest of the contents.</p>

<!-- more -->


<h3>Using Scroll Views with Auto Layout</h3>

<p>When you are creating an app using Auto Layout, scroll views can present a unique challenge. The size of the scrolling content must be set correctly so that the user can scroll through all of the available content, for example, and if you need to lock a contextual view in place on top of a scroll view, such as the scale and legend for a map, it’s difficult to ensure that the element doesn’t scroll with the rest of the content.</p>

<h4>Controlling Scroll View Content Size</h4>

<p>The size of the content inside of a scroll view is determined by the constraints of its descendants.</p>

<p><em>To set the size of a scroll view</em></p>

<ul>
<li>Create the scroll view.</li>
<li>Place the UI element inside it.</li>
<li>Create constraints that fully define the width and height of the scroll view content.</li>
</ul>


<p>You must make sure you create constraints for all the subviews inside a scroll view. For example, when defining the constraints for a view that doesn’t have an intrinsic content size, you’ll need more than just a leading edge constraint—you must also create trailing edge, width, and height constraints. There cannot be any missing constraints, starting from one edge of the scroll view to the other.</p>

<h4>Creating Anchored Views Inside a Scroll View</h4>

<p>You may find you want to create an area inside a scroll view that doesn’t move when a user scrolls the contents of the scroll view. You accomplish this by using a separate <strong>container view</strong>.</p>

<p><em>To lock a view inside a scroll view</em>
*   Create a container view to hold the scroll view.
*   Create the scroll view and place it in the container view with all edges equal to zero points.
*   Create and place a subview inside of the scroll view.
*   Create constraints from the subview to the container view.</p>

<p>The following example uses the steps in the above task to show how to position a text view inside of a scroll view. In this example, the text view stays at the bottom of the scroll view and doesn’t move when the scroll view contents are moved.</p>

<p>First, create the container view that will contain the scroll view. Set the size of the container view equal to the desired size of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008276023/player/b1ddbeff09" height="500" width="291"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After the container view is created, create a scroll view and place it inside of the container view. Resize the scroll view so that all of the edges are flush with the container view’s edges, by setting the distance to 0.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810786/player/1202126aa8" height="500" width="290"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create another view and place it inside of the scroll view. In this example, a text view is placed inside of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999315/player/ddc38c3ea6" height="500" width="288"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After placing the text view, create constraints from the text view to the container view. Creating constraints that anchor the text view to the container view (skipping the scroll view) anchors the text view relative to the container view, which ensures that the scroll view won’t scroll the text view.</p>

<p>To create a constraint that crosses multiple views in the view hierarchy, it is generally easier to Control-drag from the view to the container view in the Interface Builder outline view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810736/player/e32e620ff4" height="298" width="270"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In the constraint overlay that appears, set the required constraints for the view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275923/player/194c48615c" height="273" width="158"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In this example, constraints are created from the leading, trailing, and bottom edges of the text view to the container view. The height of the text view is also constrained.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810686/player/bdc0cae834" height="500" width="287"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>The following two figures show the app in iOS Simulator, both in normal and landscape positions. The text view is constrained at the bottom of the scroll view and doesn’t move as the scroll view is moved.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999185/player/a051895080" height="296" width="495"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12007999135/player/4f87b36fa7" height="495" width="296"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>Spacing and Wrapping</h3>

<p>Auto Layout provides several techniques for automatically spacing views and resizing items based on their content. The following sections describe how to create constraints that keep visible views proportionally spaced based on the orientation of the device.</p>

<h4>Creating Equal Spacing Between Views</h4>

<p>To lay out several views that are proportionally spaced based on the orientation of a device, create spacer views between the visible views. Set the constraints of these spacer views correctly to ensure that the visible views are able to stay spaced apart based on the orientation of the device.</p>

<p><em>To space views proportionally</em>
*   Create the visible views.
*   Create the spacer views equal to the number of visible views plus one.
*   Alternate placing your views, starting with a spacer view.</p>

<pre><code>To space two visible views, place all of the views in the following pattern, starting from the left side of the screen and moving right:
</code></pre>

<p><code>spacer1 | view1 | spacer2 | view2 | spacer3.</code></p>

<ul>
<li>Constrain the spacer views so that their lengths are equal to each other.</li>
</ul>


<p><code>
Note: The height of the spacer views can be any value, including 0. However, you must create constraints for the height of the views—don’t leave the height ambiguous.
Create a leading constraint from the first spacer view to the container view.
</code></p>

<ul>
<li>Create a trailing constraint from the last spacer view to the container view.</li>
<li>Create constraints between the spacer views and the visible views.</li>
</ul>


<p><code>
Note: When spacing views vertically, start from the top of the screen and place each view below the previous view. Set the heights of the spacer views equal to each other.
The following example uses the steps in the above task to show how to position two views proportionally spaced. The spacer views are annotated for the example, but are normally left empty with no background. First, create the two views and place them in the storyboard.
</code></p>

<iframe src="https://www.flickr.com/photos/shjborage/12008351964/player/6cff17637e" height="310" width="236"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Add the three spacer views—one to the left of the leftmost view, one between the two views, and one to the right of the rightmost view. The spacer views don’t have to be the same size at this time because their size will be set through constraints.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275823/player/bdda53d7d0" height="310" width="235"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create the following constraints for the spacer views:</p>

<ul>
<li>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1.</li>
<li>Constrain the width of spacer view 1 to be greater than or equal to the minimum desired width.</li>
<li>Create a Leading Space to Container constraint from spacer view 1 to the container.</li>
<li>Create a Horizontal Spacing constraint from spacer view 1 to view 1. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create Horizontal Spacing constraints from spacer view 2 to view 1 and view 2. Set these constraints to be a less-than-or-equal-to constraint with a priority of 999.</li>
<li>Create a Horizontal Spacing constraint from spacer view 3 to view 2. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create a Trailing Space to Container constraint from spacer view 3 to the container.</li>
</ul>


<p>These constraints create two visible views and three invisible views (spacer views). These spacer views automatically resize as the orientation of the device changes, keeping the visible views proportionally spaced, as shown in the following two figures:</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275833/player/7290ca4711" height="337" width="261"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12008351904/player/a2b7a82a10" height="261" width="337"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p><a href="https://www.dropbox.com/s/23vrbep9khfyvb6/AutoLayoutDemo.zip">Demo</a></p>

<h3>Animating Changes Made by Auto Layout</h3>

<p>If you need full control over animating changes made by Auto Layout, you must make your constraint changes programmatically. The basic concept is the same for both iOS and OS X, but there are a few minor differences.</p>

<p>In an iOS app, your code would look something like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[containerView layoutSubtreeIfNeeded]; // Ensures that all pending layout operations have been completed
</span><span class='line'>[UIView animateWithDuration:1.0 animations:^{
</span><span class='line'>     // Make all constraint changes here
</span><span class='line'>     [containerView layoutSubtreeIfNeeded]; // Forces the layout of the subtree animation block and then captures all of the frame changes
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>In OS X, use the following code when using layer-backed animations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[containterView layoutIfNeeded];
</span><span class='line'>NSAnimationContext runAnimationGroup:^(NSAnimationContext *context) {
</span><span class='line'>     [context setAllowsImplicitAnimation: YES];
</span><span class='line'>     // Make all constraint changes here
</span><span class='line'>     [containerView layoutIfNeeded];
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>When you aren’t using layer-backed animations, you must animate the constant using the constraint’s animator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[constraint animator] setConstant:42];</span></code></pre></td></tr></table></div></figure>


<h3>个人总结</h3>

<ol>
<li>所有相关Contraints都加好后再自动让XCode补全，或者干脆在没问题的时候忽略警告</li>
<li><code>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1</code>. 这意思是让三个视频的width相等，并不是给他们三个都加上width的Contraints。</li>
<li>最后是在3.5寸屏幕下开发，再适应4寸，这样直接拉开。（在开发时，点那个大小切换那个可能会带来Contraints警告，要小心。不行就Commond+Z）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iOS报错libc++abi.dylib handler threw exception]]></title>
    <link href="http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception/"/>
    <updated>2014-01-03T23:57:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception</id>
    <content type="html"><![CDATA[<p>这个错有时很奇怪，有时比较正常的情况也会报这个，可能与XCode版本有关。
下文列举一些情况吧</p>

<!-- more -->


<h3>可能引起的情况</h3>

<ul>
<li>如果是多语言的话，要查看xib是否支持改语言～就是要在xib里面的Localiztion选项里面检查。（至少xcode4.5里面是这样的，或许对someone 有帮助）</li>
<li>因为子类需要横屏，父类没设置横屏，所以爆出异常来。Supported orientations has no common orientation with the application, and shouldAutorotate is returning YES</li>
<li>@｛｝ 语法糖，数据出错后也会报这个错</li>
<li>数据越界</li>
</ul>


<h3>定位异常的方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@try {  
</span><span class='line'>}  
</span><span class='line'>@catch(NSException *exception) {  
</span><span class='line'>  NSLog(@"exception:%@", exception);  
</span><span class='line'>}
</span><span class='line'>@finally {            
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SDK Manager更新检测失败解决]]></title>
    <link href="http://saick.net/blog/2013/12/31/android-sdk-managergeng-xin-jian-ce-shi-bai-jie-jue/"/>
    <updated>2013-12-31T13:39:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/31/android-sdk-managergeng-xin-jian-ce-shi-bai-jie-jue</id>
    <content type="html"><![CDATA[<p>好久没弄Eclipse开发Android了，最近弄了个天猫的盒子，就拿出来玩玩，没想到新的SDK下不下来，悲剧。</p>

<h3>Ｑ：</h3>

<p>Failed to fetch URL <a href="https://dl-ssl.google.com/android/repository/repository.xml,">https://dl-ssl.google.com/android/repository/repository.xml,</a>
reason: HTTPS SSL error. You might want to force download through HTTP
in the settings.</p>

<h3>A:</h3>

<p>Check file <code>~/.android/androidtool.cfg</code></p>

<p>try to create it manually and add one line to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sdkman.force.http=true </span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://groups.google.com/forum/#!topic/android-developers/Y6RBY6jQfNk">https://groups.google.com/forum/#!topic/android-developers/Y6RBY6jQfNk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synergy on Mavericks (OSX 10.9) and enable assistive devices]]></title>
    <link href="http://saick.net/blog/2013/12/26/synergy-on-mavericks-osx-10-dot-9-and-enable-assistive-devices/"/>
    <updated>2013-12-26T10:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/26/synergy-on-mavericks-osx-10-dot-9-and-enable-assistive-devices</id>
    <content type="html"><![CDATA[<p><a href="http://superuser.com/questions/656912/synergy-on-mavericks-osx-10-9-and-enable-assistive-devices">Origin</a></p>

<h3>Question</h3>

<p>Mavericks handles accessibility on a per-application basis, so instead of enabling assistive devices (option does not even exist) carte-blanche, the app which makes the request shows up in a list in System Preferences > Security &amp; Privacy > Privacy where you can enable the access it&rsquo;s looking for.</p>

<p>Synergy, however, makes a check for the old style of assistive devices setting and fails to start.</p>

<!-- more -->


<h3>Answer</h3>

<p>From a terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo open /Applications/Synergy.app/Contents/MacOS/Synergy</span></code></pre></td></tr></table></div></figure>


<p>Then open OSX <em>System Preferences</em> and click <strong>Security and Privacy</strong>, then <strong>Accessibility</strong></p>

<p>Check the checkbox on for <strong>Terminal</strong> and <strong>Synergy</strong>.</p>

<p>You can then close Synergy and start it again in the background through the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Synergy.app/Contents/MacOS/Synergy &</span></code></pre></td></tr></table></div></figure>


<p>I expect this will be fixed in the next release (1.4.16 Beta)</p>

<p><a href="http://synergy-foss.org/osqa/questions/1999/error-1410-on-mac-1081">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX Server - Message Server 研究与故障解决方案]]></title>
    <link href="http://saick.net/blog/2013/12/21/osx-server-message-server-yan-jiu-yu-gu-zhang-jie-jue-fang-an/"/>
    <updated>2013-12-21T00:50:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/21/osx-server-message-server-yan-jiu-yu-gu-zhang-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>OSX Server是个出色的小团队服务端解决方案，前两个月发邮件说这个可以让我使用兑换券免费下一个，一定不能错过的机会，平时可是会卖很贵的啊</p>

<p>特分享一下使用的相关事项吧</p>

<!-- more -->


<h3>简介</h3>

<p>详见<a href="http://www.apple.com/cn/osx/server/">官方介绍</a></p>

<h3>使用过的服务</h3>

<ul>
<li>Message Server</li>
<li>DNS</li>
<li>FileShare</li>
<li>WebServer</li>
<li>Wiki</li>
<li>。。。</li>
</ul>


<p>可以说每个都能解决我们的某些需求，但是这些东西呢，没有OSX Server我们一样能找到替代方案。 但是苹果就是能在易用性上能帮我们做一些事。比如这个Wiki就比较简单实用</p>

<p>但是呢,有些也做的不是太好，比如Message Server</p>

<h3>Message Server</h3>

<h4>用户</h4>

<p>最开始在10.8上面直接搞上了，但是不知道怎么建用户（第一次玩Jabber，XMPP）
帮助文档不太好找，上链接，有写用户的使用。</p>

<p><a href="https://help.apple.com/advancedserveradmin/mac/3.0/#apd447EC2A9-7F7E-49B1-AEDD-144C189926C7">https://help.apple.com/advancedserveradmin/mac/3.0/#apd447EC2A9-7F7E-49B1-AEDD-144C189926C7</a>
见这段<em>Understand Messages screen names</em></p>

<h4>登录</h4>

<p>无论如何都登录不了，这个更是愁人。。。
也在上面的帮助文档里有说明，见这段<em>Server-to-server federation</em></p>

<p>需要在设置中把自己的域名也加进去（最好配置DNS，否则需要自己改hosts文件）</p>

<h4>还是登录不了。。</h4>

<p>自己的Mavericks（10.9）还是登录不了，可能是域名设来设去的吧，无论如何也搞不定，查Google也不太好找，找了一些检索词，最后还是放弃，自己搞。
看文档，日志会写入<strong>system.log</strong>, 打开Console，看到报错如下:</p>

<p><em>SASL callback for non-existing host&#8221;</em></p>

<p>Google之，解决方案如下</p>

<p><a href="https://discussions.apple.com/message/23948580#23948580">https://discussions.apple.com/message/23948580#23948580</a></p>

<p>这里面说的两个文件的路径还不太对，在这个目录下找那俩文件修改相关域名即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Library/Server/Messages/Config/jabberd</span></code></pre></td></tr></table></div></figure>


<h3>Message Server OK</h3>

<p>可以使用Mac 上面的Message直接登录，团队其它直接使用Server的DNS，这样就不用绑hosts了，然后使用rooms聊天室，这样系统内置了Message，而且还会比较及时的通知到，非常方便。</p>

<p><em>远离QQ吧。</em>  Good night!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库不同平台合并 lipo命令使用]]></title>
    <link href="http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong/"/>
    <updated>2013-12-17T23:54:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>查看<em>lipo</em>详解</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man lipo</span></code></pre></td></tr></table></div></figure>


<p><strong>lipo &ndash; create or operate on universal files</strong></p>

<!-- more -->


<h3>Usage</h3>

<h4>Simple</h4>

<p><strong>lipo -create xxx_arm.a xxx_i386.a -output xxx_universal.a</strong></p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lipo -create /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphonesimulator/libPrint.a  /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphoneos/libPrint.a  -output /Users/pjk1129/Desktop/libPrint.a</span></code></pre></td></tr></table></div></figure>


<h4>Shell</h4>

<p><em>libevent.sh</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>mkdir universal
</span><span class='line'>lipo -create simulator/libevent.a device/libevent.a -o universal/libevent.a
</span><span class='line'>lipo -create simulator/libevent_extra.a device/libevent_extra.a -o universal/libevent_extra.a
</span><span class='line'>lipo -create simulator/libevent_core.a device/libevent_core.a -o universal/libevent_core.a
</span><span class='line'>lipo -create simulator/libevent_pthreads.a device/libevent_pthreads.a -o universal/libevent_pthreads.a</span></code></pre></td></tr></table></div></figure>


<h3>Review Info</h3>

<p><strong>lipo -info xxx_universal.a</strong></p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lipo -info /Users/pjk1129/Desktop/libPrint.a </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite(FMDB) 线程安全 - 多线程处理]]></title>
    <link href="http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li/"/>
    <updated>2013-12-12T11:25:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常用到SQLite，CoreData也不错，但很多时候还是自己写sql，使用FMDB来处理。当然了，也可以不用FMDB，直接写处理，这个不解释。</p>

<p>但是，我们在数据库操作的时候，经常遇到多线程访问数据库的状况，常见的有几种处理方法：</p>

<ul>
<li>1, NSLock或类似方法加锁</li>
<li>2, FMDatabaseQueue</li>
<li>3, SQLITE_CONFIG_SERIALIZED</li>
</ul>


<p>下面我们来仔细看一下出现的问题以及相关的解决方案</p>

<!-- more -->


<h3>常见问题</h3>

<p>以使用FMDB为例：</p>

<p>The debugger says that the error occurs at [FMResultSet next] at the line, has <code>EXC_BAD_ACCESS</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rc = sqlite3_step(statement.statement);</span></code></pre></td></tr></table></div></figure>


<p>多线程访问的时候，会在这里报错。</p>

<p>如何解决呢？</p>

<h4>1. NSLock加锁（NSMutex）</h4>

<p>详见苹果官方文档：
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html">Threading Programming Guide</a></p>

<h4>2. FMDatabaseQueue</h4>

<p>这个是我在某项目中用到的，所有查询都走这里。
可能因为项目较复杂，用了这个还是会时候有问题，但稳定很多。可以有一些别的地方调用，没查清楚。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 相关引用
</span><span class='line'>_fmQueue = [FMDatabaseQueue databaseQueueWithPath:sqlitePath];
</span><span class='line'>
</span><span class='line'>// 查询数据
</span><span class='line'>- (FMResultSet *)executeQueryWithSQL:(NSString *)sql
</span><span class='line'>{
</span><span class='line'>  BFLogVerbose(@"executeQuery: %@", sql);
</span><span class='line'>  
</span><span class='line'>  __block FMResultSet *rs = nil;
</span><span class='line'>  __block dispatch_semaphore_t sem = dispatch_semaphore_create(0);
</span><span class='line'>  
</span><span class='line'>  [_fmQueue inDatabase:^(FMDatabase *fmdb){
</span><span class='line'>    FMResultSet *tmpRs = [fmdb executeQuery:sql];
</span><span class='line'>    rs = [FMResultSet resultSetWithStatement:tmpRs.statement usingParentDatabase:fmdb];
</span><span class='line'>    [tmpRs close];
</span><span class='line'>    dispatch_semaphore_signal(sem);
</span><span class='line'>  }];
</span><span class='line'>  
</span><span class='line'>  dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
</span><span class='line'>  dispatch_release(sem);
</span><span class='line'>  
</span><span class='line'>  return rs;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>3. SQLITE_CONFIG_SERIALIZED</h3>

<p>SQLite provides a much simpler serialization. By just setting the sqlite_config() option SQLITE_CONFIG_SERIALIZED you will probably avoid most of these kinds of headaches. I discovered this the hard way after fighting with threading issues for a long while.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (sqlite3_config(SQLITE_CONFIG_SERIALIZED) == SQLITE_ERROR) {
</span><span class='line'>        NSLog(@"couldn't set serialized mode");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参考：
<a href="http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0">http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode下的iOS单元测试]]></title>
    <link href="http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi/"/>
    <updated>2013-12-12T09:34:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi</id>
    <content type="html"><![CDATA[<p>XCode 内置了 OCUnit 单元测试框架，但目前最好用的测试框架应该是 GHUnit。通过 GHUnit + OCMock 组合，我们可以在 iOS 下进行较强大的单元测试功能。本文将演示如何在 XCode 4.2 下使用 OCUnit， GHUnit 和 OCMock 进行单元测试。</p>

<!-- more -->


<h3>OCUnit</h3>

<p>在 XCode 下新建一个 OCUnitProject 工程，选中 Include Unit Tests 选择框，</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332017455/" title="2013-12-12-1 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2805/11332017455_a9679dfeb5.jpg" width="500" height="337" alt="2013-12-12-1"></a></p>

<p>OCUnit 框架则会为我们自动添加 Unit Test 框架代码：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332111874/" title="2013-12-12-2 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5538/11332111874_82dae3bc52.jpg" width="430" height="381" alt="2013-12-12-2"></a></p>

<p>XCode 在 OCUnitProjectTests.m 中为我们自动生成了一个 Fail 的测试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testExample
</span><span class='line'>{
</span><span class='line'>    STFail(@"Unit tests are not implemented yet in OCUnitProjectTests");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>让我们来运行 Test，看看效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085666/" title="2013-12-12-3 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7321/11332085666_f398e1edd2.jpg" width="500" height="269" alt="2013-12-12-3"></a></p>

<p>从图中的红色下划线部分可以看出，测试没有通过，符合预期。我们只要像类 OCUnitProjectTests 一样编写继承自 SenTestCase 类的子类，在其中添加形式如：- (void) testXXX(); 的测试函数既可，注意必须是一个无参无返回类型且名称是以 test 为前缀的函数。
OCUnit 的有点是官方支持，于 XCode 集成的比较好。</p>

<h3>GHUnit</h3>

<p>GHUnit 是一个开源的单元测试框架，具有可视化界面，功能亦相当强大。Mark 写了一篇 OCUnit vs GHUnit 的文章，有兴趣的童鞋可以看一看。</p>

<p>OCMock 是由 Mulle Kybernetik 为 OS X 和 iOS 平台编写的遵循 mock object 理念的单元测试框架。</p>

<h4>下面来介绍如何配置 GHUnit 和 OCMock</h4>

<ul>
<li>1，首先，创建一个名为 GHUnitProject 的单视图应用程序，注意：不要选中 Include Unit Tests 选择框。然后运行，应该出现白屏。</li>
<li>2，添加新的 test target，选中左边的工程名，点击右侧的 Add Target，新增一个名为 Tests 的 Empty Application 应用程序，让其附属于 GHUnitProject注意：不要选中 Include Unit Tests 选择框。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332017205/" title="2013-12-12-4 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5477/11332017205_d39c81a057.jpg" width="500" height="346" alt="2013-12-12-4"></a>
<a href="http://www.flickr.com/photos/shjborage/11332017075/" title="2013-12-12-5 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7313/11332017075_e828e5525f.jpg" width="500" height="419" alt="2013-12-12-5"></a></p>

<ul>
<li>3，向 Tests 工程中（注意是 Tests 工程）添加 GHUnitIOS Framework。首先下载与 XCode 版本对应的 GHUnitIOS Framework。英文好的可以直接查看官方 iOS 版的安装文档：点此查看，跳过此第 3 节；否则请接着看。</li>
<li>3.1，解压 GHUnitIOS 框架到 GHUnitProject 下，让 GHUnitIOS.framework 与 Tests 在同一目录下。</li>
<li>3.2，回到 XCode，右击工程中的 Frameworks group，选中 Add Files to&hellip;菜单，选取 GHUnitIOS.framework ，注意 targets 要选择 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332111384/" title="2013-12-12-6 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7352/11332111384_e75ae2182a.jpg" width="478" height="500" alt="2013-12-12-6"></a></p>

<ul>
<li>3.3，设置 Tests 的 Build Settings：在 Other Linker Flags 中增加两个 flag： -ObjC 和 -all_load。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016815/" title="2013-12-12-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3811/11332016815_c8ba09db5d.jpg" width="500" height="316" alt="2013-12-12-7"></a></p>

<ul>
<li>3.1，删除 Tests 工程中的 UTSAppDelegate.h 和 UTSAppDelegate.m 两个文件；</li>
<li>3.2，修改 Tests 工程中的 main.m 为:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;GHUnitIOS/GHUnitIOSAppDelegate.h&gt;
</span><span class='line'>int main(int argc, char *argv[])
</span><span class='line'>{
</span><span class='line'>    @autoreleasepool {
</span><span class='line'>        return UIApplicationMain(argc, argv, nil, NSStringFromClass([GHUnitIOSAppDelegate class]));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>3.3，选择编译目标 Tests>iPhone 5.0 Simulator，编译运行，应该能得到如下效果。目前我们还没有编写任何实际测试，所以列表为空。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085166/" title="2013-12-12-8 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2872/11332085166_39da2998f9.jpg" width="331" height="492" alt="2013-12-12-8"></a></p>

<p>4，编写 GHUnit 测试。向 Tests 工程中添加名为 GHUnitSampleTest 的 Objective C class。其内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GHUnitSampleTest.h
</span><span class='line'>#import &lt;GHUnitIOS/GHUnit.h&gt;
</span><span class='line'>@interface GHUnitSampleTest: GHTestCase
</span><span class='line'>{
</span><span class='line'>}
</span><span class='line'>@end
</span><span class='line'>GHUnitSampleTest.m
</span><span class='line'>#import "GHUnitSampleTest.h"
</span><span class='line'>@implementation GHUnitSampleTest
</span><span class='line'>- (void)testStrings
</span><span class='line'>{
</span><span class='line'>    NSString *string1 = @"a string";
</span><span class='line'>    GHTestLog(@"I can log to the GHUnit test console: %@", string1);
</span><span class='line'>    // Assert string1 is not NULL, with no custom error description
</span><span class='line'>    GHAssertNotNULL(string1, nil);
</span><span class='line'>    // Assert equal objects, add custom error description
</span><span class='line'>    NSString *string2 = @"a string";
</span><span class='line'>    GHAssertEqualObjects(string1, string2, @"A custom error message. string1 should be equal to: %@.", string2);
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>然后编译运行，点击 Run，效果如下：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332159843/" title="2013-12-12-9 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3788/11332159843_1766364257.jpg" width="322" height="488" alt="2013-12-12-9"></a></p>

<p>图中的 All 栏显示所以的测试，Failed 栏显示没有通过的测试。强大吧，GHUnit。你可以向 GHUnitSampleTest 添加新的测试，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testSimpleFail
</span><span class='line'>{
</span><span class='line'>    GHAssertTrue(NO, nil);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>我们可以向 Tests 添加更多测试类，只要该类是继承自 GHTestCase，且其中的测试方法都是无参无返回值且方法名字是以 test 为前缀即可。</p>

<h3>OCMock</h3>

<p>OCMock一般用来模拟一个类，创建其对象，并设置该对象。
下面我们来添加 OCMock。</p>

<ul>
<li>1，我们只能以静态库的方式来添加 OCMock。在 GHUnitTest 目录下新建 Libraries 目录，该目录是与 Tests 目录平级的。下载静态库文件，解压头文件至该目录下。
文件下载：头文件 libOCMock.a ，framework 文件：OCMock framework ，打开下载好的ocmock-1.77.dmg，拷贝其中的‘Release/Library/Headers/OCMock’ 目录至 Libraries 下。最终目录结构如下：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084876/" title="2013-12-12-10 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3782/11332084876_6f67df9eef.jpg" width="500" height="96" alt="2013-12-12-10"></a></p>

<ul>
<li>2，在 GHUnitTest 工程中新建名为 Libraries 的 group，导入libOCMock.a 和目录 OCMock，注意 target 是 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084976/" title="2013-12-12-11 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3751/11332084976_15c36cbd88.jpg" width="479" height="500" alt="2013-12-12-11"></a></p>

<ul>
<li>3，设置 Tests 的 Build Setting。让 Libray Search Paths 包含 $(SRCROOT)/Libraries：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016595/" title="2013-12-12-12 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2879/11332016595_f7fae82fb0.jpg" width="500" height="245" alt="2013-12-12-12"></a></p>

<p>在 Header Search Paths 中增加 $(SRCROOT)/Libraries，并选中 Recursive 选择框。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332084796/" title="2013-12-12-13 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7320/11332084796_32d4115828.jpg" width="500" height="277" alt="2013-12-12-13"></a></p>

<ul>
<li>4，编写 OCMock 测试。向 Tests 工程中添加名为 OCMockSampleTest 的 Objective C class。其内容如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OCMockSampleTest.h
</span><span class='line'>#import &lt;GHUnitIOS/GHUnit.h&gt;
</span><span class='line'>@interface OCMockSampleTest : GHTestCase
</span><span class='line'>@end
</span><span class='line'>OCMockSampleTest.m
</span><span class='line'>#import "OCMockSampleTest.h"
</span><span class='line'>#import &lt;OCMock/OCMock.h&gt;
</span><span class='line'>@implementation OCMockSampleTest
</span><span class='line'>// simple test to ensure building, linking,
</span><span class='line'>// and running test case works in the project
</span><span class='line'>- (void)testOCMockPass
</span><span class='line'>{
</span><span class='line'>    id mock = [OCMockObject mockForClass:NSString.class];
</span><span class='line'>    [[[mock stub] andReturn:@"mocktest"] lowercaseString];
</span><span class='line'>    NSString *returnValue = [mock lowercaseString];
</span><span class='line'>    GHAssertEqualObjects(@"mocktest", returnValue,
</span><span class='line'>    @"Should have returned the expected string.");
</span><span class='line'>}
</span><span class='line'>- (void)testOCMockFail
</span><span class='line'>{
</span><span class='line'>    id mock = [OCMockObject mockForClass:NSString.class];
</span><span class='line'>    [[[mock stub] andReturn:@"mocktest"] lowercaseString];
</span><span class='line'>    NSString *returnValue = [mock lowercaseString];
</span><span class='line'>    GHAssertEqualObjects(@"thisIsTheWrongValueToCheck",
</span><span class='line'>    returnValue, @"Should have returned the expected string.");
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>编译运行，点击 Run，效果如下图。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332016435/" title="2013-12-12-14 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5507/11332016435_6afa1b6912.jpg" width="322" height="480" alt="2013-12-12-14"></a></p>

<p>至此，iOS 下的OCUnit，GHUnit，OCMock 单元测试介绍就到此结束了。当然还有其他一些测试框架，比如 google 出品的 GTM。</p>

<p>参考资料：</p>

<p>OCMock: <a href="http://ocmock.org/">http://ocmock.org/</a></p>

<p>Unit Testing in Xcode 4- use OCUnit and SenTest instead of GHUnit</p>

<p>GHUnit Reference: <a href="http://gabriel.github.com/gh-unit/">http://gabriel.github.com/gh-unit/</a></p>

<p>转自：<a href="http://www.uml.org.cn/mobiledev/201201093.asp">http://www.uml.org.cn/mobiledev/201201093.asp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用icon font及自定义字体]]></title>
    <link href="http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font/"/>
    <updated>2013-12-11T21:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font</id>
    <content type="html"><![CDATA[<p>在开发阿里数据iOS版客户端的时候，由于项目进度很紧，项目里的所有图标都是用最平常的背景图片方案来实现。而为了要兼容普通屏与Retina屏的设备，苹果要求每个背景图都要以两种尺寸存(a.png和<a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#64;&#50;&#120;&#46;&#x70;&#110;&#x67;">&#x61;&#x40;&#x32;&#120;&#46;&#x70;&#x6e;&#103;</a>)，这让设计师们增加了成本，因为他们每次都得出两份背景图标。</p>

<p>现在在web开发上，icon font技术的应用很广泛，它不仅在解决多分辨率显示问题上很有成效，而且在使用它的时候还能降低不少设计和开发成本。</p>

<p>那么它能不能应用到ios开发上来呢？带着这个疑问，我在github上找到了FontasticIcons和ios-fontawesome，但是这两个OC包对icon资源封装都有限，而且扩展也不是很方便。</p>

<p>既然能在ios上使用icon font，那么怎么用呢？经过一番摸索，发现使用原理和自定义字体差不多，只有个别操作不太一样，接下来我给大家详细介绍一下。</p>

<!-- more -->


<h3>如何使用自定义字体</h3>

<p>在讲icon font之前，首先先来看看普通自定义字体是如何在ios中使用的，两个原理是一样的。这里以KaushanScript-Regular为例：</p>

<h4>Step 1: 导入字体文件</h4>

<p>将字体文件拖入项目（ios支持的字体格式有：.ttf、.otf，其他格式不确定）：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323775276/" title="2013-12-11-01 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2846/11323775276_b14a547aa1.jpg" width="500" height="354" alt="2013-12-11-01"></a></p>

<p>然后再在项目的资源池中确认字体文件是否加入项目，打开xcode项目的Build Phases中查看：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323859283/" title="2013-12-11-02 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3816/11323859283_dff602ee81.jpg" width="500" height="249" alt="2013-12-11-02"></a></p>

<h4>Step 2: 配置.plist文件</h4>

<p>在.plist文件中注册新加入的字体，.plist文件往往以“[appname]-Info.plist”的形式存在于“Supporting Files”文件夹内。 在.plist文件中添加新属性“Fonts provided by application”，该属性的值是一个数组，这意味着可以在这里注册多个字体。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323790974/" title="2013-12-11-03 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3692/11323790974_9beda31ccb.jpg" width="500" height="209" alt="2013-12-11-03"></a></p>

<h4>Step 3: 找到字体集名称</h4>

<p>注册完，我们需要检测是否注册成功且取得新字体名称，检测方法就是把所有安装了的字体都打印出来，看看新注册的字体是否在里面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (NSString* family in [UIFont familyNames]) 
</span><span class='line'>{ 
</span><span class='line'>  NSLog(@"%@", family); 
</span><span class='line'>  for (NSString* name in [UIFont fontNamesForFamilyName: family]) 
</span><span class='line'>  { 
</span><span class='line'>         NSLog(@"  %@", name); 
</span><span class='line'>    } 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>运行完，查看控制台里打印出的所有字体集中是否有新注册的字体，如果有，说明注册成功，并将字体名（在这里是“Kaushan Script”）记住留到后面用。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323787836/" title="2013-12-11-04 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5481/11323787836_e8fc5ed22a.jpg" width="500" height="392" alt="2013-12-11-04"></a></p>

<h3>Step 4: 使用新字体</h3>

<p>最后，就是使用你最新加入的字体啦：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)]; 
</span><span class='line'>label.font = [UIFont fontWithName:@"Kaushan Script" size:35]; 
</span><span class='line'>label.text = @"icon font"; 
</span><span class='line'>label.textColor = UIColorFromRGB(0xFF7300); 
</span><span class='line'>[self.view addSubview:label]; </span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323858493/" title="2013-12-11-05 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5471/11323858493_39eaf9269b.jpg" width="276" height="113" alt="2013-12-11-05"></a></p>

<h3>开始使用icon font</h3>

<p>图标字体也是字体，使用方式和上面所说的差不多，只是在套用上有些差别；这里拿fontello的图标字体库为例。</p>

<ul>
<li>1.选择需要的图标
在fontello的图标字体库选择自己需要的图标，并下载生成的字体文件。</li>
<li>2.按照上面的步骤将图标字体注册到项目中</li>
<li>3.找到图标对应的unicode码
使用FontLab Studio 5工具打开字体文件（比如fontello.ttf），就可以看到图标与unicode码之间的对应关系啦。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323774246/" title="2013-12-11-06 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2824/11323774246_65813b1aab.jpg" width="500" height="126" alt="2013-12-11-06"></a></p>

<ul>
<li>4.使用图标</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)]; 
</span><span class='line'>label.font = [UIFont fontWithName:@"fontello" size:35]; 
</span><span class='line'>label.text = @"\U0000E802 \U0000E801 \U0000E803 \U0000E804 \U0000E805 \U0000E81A"; 
</span><span class='line'>label.textColor = UIColorFromRGB(0xFF7300); 
</span><span class='line'>[self.view addSubview:label]; </span></code></pre></td></tr></table></div></figure>


<p>在Objective-C中，自定义的unicode码需要以“\U0000E802”这样的格式存在。</p>

<ul>
<li>5.使用emoji表情库
这里还可以使用苹果emoji表情库的图标，这里不需要新加字体库，只要找到emoji图标和unicode之间的对应关系就好，但是这些图标都不是矢量图，缩放请自重。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label5 = [[UILabel alloc] initWithFrame:CGRectMake(10, 480, 300, 50)]; 
</span><span class='line'>label5.text = @"\U0000e42a\U0000e525\U0000e41c"; 
</span><span class='line'>[self.view addSubview:label5]; </span></code></pre></td></tr></table></div></figure>


<ul>
<li>6.效果</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323858703/" title="2013-12-11-07 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5526/11323858703_820c5b3eef.jpg" width="366" height="500" alt="2013-12-11-07"></a></p>

<ul>
<li>7.使用自制图标字体</li>
<li><p>如果上面介绍的图标库还满足不了你的需求，或者需要的图标分布在多个图标库而不能集中到一个字体文件中；那么你可能需要自己去制作图标字体文件了。</p></li>
</ul>


<h3>总结</h3>

<p>这样，在iOS开发上，不仅可以直接去开源图标库找现成的图标用到项目中，而且还可以轻松地改变图标的颜色、大小，相信可以解放不少设计师和工程师的工作量。</p>

<p>图标字体库
<a href="http://fontello.com/">fontello</a>
etao图标字体库（这里有个问题要注意，etao的图标字体名为“Untitled1”，是不是生成字体的同学疏忽啦？）
IcoMoon
<a href="http://www.easyapns.com/iphone-emoji-alerts">emoji表情库</a></p>

<p>参考资料</p>

<p><a href="http://codewithchris.com/common-mistakes-with-adding-custom-fonts-to-your-ios-app/">Common Mistakes With Adding Custom Fonts to Your iOS App</a></p>

<p><a href="http://ux.etao.com/posts/401">Icon font 实践</a></p>

<p>FontasticIcons</p>

<p>ios-fontawesome</p>

<p><a href="https://coderwall.com/p/wrb3pw">Custom Unicode Characters in Objective-C</a></p>

<p><a href="http://www.qianduan.net/css3-icon-font-guide.html">CSS3 icon font完全指南</a></p>

<p>《转》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制iOS 7中的导航栏和状态栏]]></title>
    <link href="http://saick.net/blog/2013/12/08/ding-zhi-ios-7zhong-de-dao-hang-lan-he-zhuang-tai-lan/"/>
    <updated>2013-12-08T02:30:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/08/ding-zhi-ios-7zhong-de-dao-hang-lan-he-zhuang-tai-lan</id>
    <content type="html"><![CDATA[<p>近期，跟大多数开发者一样，我也正忙于对程序进行升级以适配iOS 7。最新的iOS 7外观上有大量的改动。从开发者的角度来看，导航栏和状态栏就发生了明显的变化。状态栏现在是半透明的了，这也就意味着导航栏会显示在状态栏后面。有些情况下，导航栏的背景图片可以延伸显示到状态栏后面。</p>

<p>之前我曾经写过一篇关于如何定制导航栏的文章。
不过现在是时候对其进行更新了。下面就是本文将要介绍的内容：</p>

<ul>
<li>iOS 7中默认的导航栏</li>
<li>设置导航栏的背景颜色</li>
<li>在导航栏中使用背景图片</li>
<li>定制返回按钮的颜色</li>
<li>修改导航栏标题的字体</li>
<li>修改导航栏标题为图片</li>
<li>添加多个按钮</li>
<li>修改状态栏的风格</li>
<li>隐藏状态栏</li>
<li>总结</li>
</ul>


<!-- more -->


<p><a href="http://www.flickr.com/photos/shjborage/11263366886/" title="2013-12-08-1 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5537/11263366886_50b10421ff.jpg" width="500" height="473" alt="2013-12-08-1"></a></p>

<p>本文提供的代码需要用Xcode 5来执行。如果你还在使用老版本的Xcode，那么在运行示例之前请将Xcode升级到Xcode 5。</p>

<h3>iOS 7中默认的导航栏</h3>

<p>在开始定制之前，我们先来看看iOS 7中默认导航栏的外观。通过Xcode用Single View Controller模板创建一个工程。然后将view controller嵌入到一个navigation controller中。如果你不想从头开始，那么也可以在这里下载到这个<a href="https://dl.dropboxusercontent.com/u/2857188/NavigationBarDemo.zip">示例工程</a>。Xcode 5包含有iOS 6和iOS 7模拟器，我们可以在这两个不同的模拟器版本中运行示例程序，进行对比，如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263379574/" title="2013-12-08-2 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5478/11263379574_391625e690.jpg" width="500" height="144" alt="2013-12-08-2"></a></p>

<p>如上图所示，在iOS 7中的导航栏默认情况下跟状态栏是交织在一起的，并且它的颜色也被修改为亮灰色。</p>

<h3>设置导航栏的背景颜色</h3>

<p>在iOS 7中，不再使用tintColor属性来设置导航栏的颜色，而是使用barTintColor属性来修改背景色。我们可以在AppDelegate.m文件中的方法didFinishLaunchingWithOptions:里面添加如下代码来修改颜色：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UINavigationBar appearance] setBarTintColor:[UIColor yellowColor]]; </span></code></pre></td></tr></table></div></figure>


<p>效果如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263420823/" title="2013-12-08-3 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3775/11263420823_9eb0bab4f9.jpg" width="500" height="242" alt="2013-12-08-3"></a></p>

<p>一般情况，我们都会使用自己的颜色，下面这个宏用来设置RGB颜色非常方便：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue & 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0] </span></code></pre></td></tr></table></div></figure>


<p>将上面这个宏放到AppDelegate.m文件中，然后通过这个宏来创建一个UIColor对象(根据指定的RGB)。如下示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UINavigationBar appearance] setBarTintColor:UIColorFromRGB(0x067AB5)]; </span></code></pre></td></tr></table></div></figure>


<p>默认情况下，导航栏的translucent属性为YES。另外，系统还会对所有的导航栏做模糊处理，这样可以让iOS 7中导航栏的颜色更加饱和。如下图，是translucent值为NO和YES的对比效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263366646/" title="2013-12-08-4 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3749/11263366646_9f55687f4e.jpg" width="500" height="109" alt="2013-12-08-4"></a></p>

<p>要想禁用translucent属性，可以在Storyboard中选中导航栏，然后在Attribute Inspectors中，取消translucent的勾选。</p>

<h3>在导航栏中使用背景图片</h3>

<p>如果希望在导航栏中使用一个图片当做背景，那么你需要提供一个稍微高一点的图片(这样可以延伸到导航栏背后)。导航栏的高度从44 points(88 pixels)变为了64 points(128 pixels)。我们依然可以使用setBackgroundImage:方法为导航栏设置自定义图片。如下代码所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UINavigationBar appearance] setBackgroundImage:[UIImage imageNamed:@"nav_bg.png"] forBarMetrics:UIBarMetricsDefault]; </span></code></pre></td></tr></table></div></figure>


<p>示例工程中提供了两个背景图片：nav_bg.png 和 nav_bg_ios7.png。运行一下试试看吧，如下效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263366636/" title="2013-12-08-5 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3822/11263366636_79a3394899.jpg" width="500" height="155" alt="2013-12-08-5"></a></p>

<h3>定制返回按钮的颜色</h3>

<p>在iOS 7中，所有的按钮都是无边框的。其中返回按钮会有一个V型箭头，以及上一个屏幕中的标题(如果上一屏幕的标题是空，那么就显示”返回”)。要想给返回按钮着色，可以使用tintColor属性。如下代码所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UINavigationBar appearance] setTintColor:[UIColor whiteColor]]; </span></code></pre></td></tr></table></div></figure>


<p>除了返回按钮，tintColor属性会影响到所有按钮标题和图片。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263366586/" title="2013-12-08-6 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2824/11263366586_d932478c3e.jpg" width="500" height="102" alt="2013-12-08-6"></a></p>

<p>如果想要用自己的图片替换V型，可以设置图片的backIndicatorImage和backIndicatorTransitionMaskImage。如下代码所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UINavigationBar appearance] setBackIndicatorImage:[UIImage imageNamed:@"back_btn.png"]]; 
</span><span class='line'>[[UINavigationBar appearance] setBackIndicatorTransitionMaskImage:[UIImage imageNamed:@"back_btn.png"]]; </span></code></pre></td></tr></table></div></figure>


<p>图片的颜色是由tintColor属性控制的。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263366576/" title="2013-12-08-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3679/11263366576_708e24cb31.jpg" width="500" height="102" alt="2013-12-08-7"></a></p>

<h3>修改导航栏标题的字体</h3>

<p>跟iOS 6一样，我们可以使用导航栏的titleTextAttributes属性来定制导航栏的文字风格。在text attributes字典中使用如下一些key，可以指定字体、文字颜色、文字阴影色以及文字阴影偏移量：
UITextAttributeFont – 字体key
UITextAttributeTextColor – 文字颜色key
UITextAttributeTextShadowColor – 文字阴影色key
UITextAttributeTextShadowOffset – 文字阴影偏移量key</p>

<p>如下代码所示，对导航栏的标题风格做了修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSShadow *shadow = [[NSShadow alloc] init]; 
</span><span class='line'>    shadow.shadowColor = [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.8]; 
</span><span class='line'>    shadow.shadowOffset = CGSizeMake(0, 1); 
</span><span class='line'>    [[UINavigationBar appearance] setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys: 
</span><span class='line'>                                                           [UIColor colorWithRed:245.0/255.0 green:245.0/255.0 blue:245.0/255.0 alpha:1.0], NSForegroundColorAttributeName, 
</span><span class='line'>                                                           shadow, NSShadowAttributeName, 
</span><span class='line'>                                                           [UIFont fontWithName:@"HelveticaNeue-CondensedBlack" size:21.0], NSFontAttributeName, nil]]; </span></code></pre></td></tr></table></div></figure>


<p>运行效果如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263330475/" title="2013-12-08-8 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5491/11263330475_6a2fa2d7a0.jpg" width="500" height="199" alt="2013-12-08-8"></a></p>

<h3>修改导航栏标题为图片</h3>

<p>如果要想将导航栏标题修改为一个图片或者logo，那么只需要使用下面这行代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.navigationItem.titleView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"appcoda-logo.png"]]; </span></code></pre></td></tr></table></div></figure>


<p>上面的代码简单的修改了titleView属性，将一个图片赋值给它。 注意：这不是iOS 7中的新功能，之前的iOS版本就可以已经有了。具体效果如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263420343/" title="2013-12-08-9 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5536/11263420343_e744b52709.jpg" width="500" height="194" alt="2013-12-08-9"></a></p>

<h3>添加多个按钮</h3>

<p>同样，这个技巧也不是iOS 7的，开发者经常会在导航栏中添加多个按钮，所以我决定在这里进行介绍。我们可以在导航栏左边或者右边添加多个按钮。例如，我们希望在导航栏右边添加一个照相机和分享按钮，那只需要使用下面的代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *shareItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAction target:self action:nil]; 
</span><span class='line'>UIBarButtonItem *cameraItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCamera target:self action:nil];  
</span><span class='line'>NSArray *actionButtonItems = @[shareItem, cameraItem]; 
</span><span class='line'>self.navigationItem.rightBarButtonItems = actionButtonItems; </span></code></pre></td></tr></table></div></figure>


<p>如下效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263379424/" title="2013-12-08-10 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2810/11263379424_d57a82b2a7.jpg" width="500" height="171" alt="2013-12-08-10"></a></p>

<h3>修改状态栏的风格</h3>

<p>在老版本的iOS中，状态栏永远都是白色风格。而在iOS 7中，我们可以修改每个view controller中状态栏的外观。通过UIStatusBarStyle常量可以指定状态栏的内容是暗色或亮色。默认情况下，状态栏的显示是暗色。也就是说，状态栏上的时间、电池指示器和Wi-Fi信号显示为暗色。如果导航栏中使用暗色为背景，那么看起来的效果如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263366266/" title="2013-12-08-11 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7447/11263366266_e0161eb7bf.jpg" width="500" height="174" alt="2013-12-08-11"></a></p>

<p>如上图这种情况下，我们可能希望将导航栏的风格修改为亮色。这里有两个方法可以实现。在iOS 7中，我们可以在每个view controller中overridingpreferredStatusBarStyle:方法，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(UIStatusBarStyle)preferredStatusBarStyle 
</span><span class='line'>{ 
</span><span class='line'>    return UIStatusBarStyleLightContent; 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>上面代码的效果如下图所示：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11263330045/" title="2013-12-08-12 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3745/11263330045_77ed88449d.jpg" width="500" height="173" alt="2013-12-08-12"></a></p>

<p>在iOS 7中，通过上面的方法来修改状态栏风格非常的棒。另外，我们也可以使用UIApplication的statusBarStyle方法来设置状态栏，不过，首先需要停止使用View controller-based status bar appearance。在project target的Info tab中，插入一个新的key，名字为View controller-based status bar appearance，并将其值设置为NO。</p>

<p>然后就可以使用下面的代码来设置状态栏风格了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent]; </span></code></pre></td></tr></table></div></figure>


<h3>隐藏状态栏</h3>

<p>有时候我们需要隐藏状态栏，那么此时我们在view controller中override方法prefersStatusBarHidden:即可，如下代码所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)prefersStatusBarHidden 
</span><span class='line'>{ 
</span><span class='line'>    return YES; 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>iOS 7给开发者提供了一些新的自由度来定制导航栏和状态栏的外观。希望上面的这些技巧能对你有用。这里可以下载到<a href="https://dl.dropboxusercontent.com/u/2857188/NavigationBarDemo.zip">示例工程源码</a>。只需要取消相关代码注释即可进行测试。</p>

<p>来源：破船的博客
原文：<a href="http://www.appcoda.com/customize-navigation-status-bar-ios-7/">Customizing Navigation Bar and Status Bar in iOS 7</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does ARC support dispatch queues?]]></title>
    <link href="http://saick.net/blog/2013/12/01/does-arc-support-dispatch-queues/"/>
    <updated>2013-12-01T01:48:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/01/does-arc-support-dispatch-queues</id>
    <content type="html"><![CDATA[<p><strong>If your deployment target is lower than iOS 6.0 or Mac OS X 10.8</strong></p>

<p>You need to use dispatch_retain and dispatch_release on your queue. ARC does not manage them.</p>

<p><strong>If your deployment target is iOS 6.0 or Mac OS X 10.8 or later</strong></p>

<p>ARC will manage your queue for you. You do not need to (and cannot) use dispatch_retain or dispatch_release if ARC is enabled.</p>

<!-- more -->


<p>Details</p>

<p>Starting in the iOS 6.0 SDK and the Mac OS X 10.8 SDK, every dispatch object (including a dispatch_queue_t) is also an Objective-C object. This is documented in the &lt;os/object.h> header file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> * By default, libSystem objects such as GCD and XPC objects are declared as
</span><span class='line'> * Objective-C types when building with an Objective-C compiler. This allows
</span><span class='line'> * them to participate in ARC, in RR management by the Blocks runtime and in
</span><span class='line'> * leaks checking by the static analyzer, and enables them to be added to Cocoa
</span><span class='line'> * collections.
</span><span class='line'> *
</span><span class='line'> * NOTE: this requires explicit cancellation of dispatch sources and xpc
</span><span class='line'> *       connections whose handler blocks capture the source/connection object,
</span><span class='line'> *       resp. ensuring that such captures do not form retain cycles (e.g. by
</span><span class='line'> *       declaring the source as __weak).
</span><span class='line'> *
</span><span class='line'> * To opt-out of this default behavior, add -DOS_OBJECT_USE_OBJC=0 to your
</span><span class='line'> * compiler flags.
</span><span class='line'> *
</span><span class='line'> * This mode requires a platform with the modern Objective-C runtime, the
</span><span class='line'> * Objective-C GC compiler option to be disabled, and at least a Mac OS X 10.8
</span><span class='line'> * or iOS 6.0 deployment target.</span></code></pre></td></tr></table></div></figure>


<p>This means you can store your queue in an NSArray or NSDictionary, or in a property with one of the strong, weak, unsafe_unretained, assign, or retain attributes. It also means that if you refer to your queue from a block, the block will retain the queue automatically.</p>

<p>So <strong>if your deployment target is at least iOS 6.0 or Mac OS X 10.8</strong>, and you have <em>ARC enabled</em>, ARC will retain and release your queue, and the compiler will flag any attempt to use dispatch_retain or dispatch_release as an error.</p>

<p><strong>If your deployment target is at least iOS 6.0 or Mac OS X 10.8</strong>, and you have <em>ARC disabled</em>, you must manually retain and release your queue, either by calling dispatch_retain and dispatch_release, or by sending the queue retain and release messages (like [queue retain] and [queue release]).</p>

<p>For compatibility with old codebases, you can prevent the compiler from seeing your queue as an Objective-C object by defining OS_OBJECT_USE_OBJC to 0. For example, you can put this in your .pch file (before any #import statements):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define OS_OBJECT_USE_OBJC 0</span></code></pre></td></tr></table></div></figure>


<p>or you can add OS_OBJECT_USE_OBJC=0 as a preprocessor macro in your build settings. If you set OS_OBJECT_USE_OBJC to 0, ARC will not retain or release your queue for you, and you will have to do it yourself using dispatch_retain and dispatch_release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Crash:nested pop animation can result in corrupted navigation bar nested pop animation can result in ..]]></title>
    <link href="http://saick.net/blog/2013/12/01/ios-crash-nested-pop-animation-can-result-in-corrupted-navigation-bar-nested-pop-animation-can-result-in/"/>
    <updated>2013-12-01T01:37:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/01/ios-crash-nested-pop-animation-can-result-in-corrupted-navigation-bar-nested-pop-animation-can-result-in</id>
    <content type="html"><![CDATA[<p><a href="http://yul100887.blog.163.com/blog/static/20033613520137205121620/">Origin</a></p>

<p>Nested pop animation can result in corrupted navigation bar</p>

<p>Finishing up a navigation transition in an unexpected state. Navigation Bar subview tree might get corrupted.</p>

<h3>【情况一】</h3>

<p>出现此问题的原因是在A界面弹出B界面完成后，又掉A界面POP出栈，这必然导致以上问题。如下，在弹出personalController后面，又在后面调用了[self.navigationController popViewControllerAnimated:YES];将自己弹出！解决方法，还用说吗？｛删除最后一行代码，要弹出此界面，自然有自己的返回按钮来处理｝，至少在B界面未POP以前，A界面是无论如何也不能将自己POP去消毁！</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *memberId = [dictionary objectForKey:@"PlayerNo"];
</span><span class='line'>PersonalInfoViewController* personalController = [[PersonalInfoViewController alloc] init];
</span><span class='line'>[personalController.navigationItems etHidesBackButton:YES];
</span><span class='line'>[personalController setMemberId:memberId];
</span><span class='line'>[self.navigationController pushViewController:personalController animated:YES];
</span><span class='line'>[personalController release];
</span><span class='line'>[self.navigationController popViewControllerAnimated:YES];</span></code></pre></td></tr></table></div></figure>


<h3>【情况二】</h3>

<p>nested push animation can result in corrupted navigation bar <br/>
嵌套的navigation动画会造成  navigation bar 错误<br/>
具体表现为上一层的titleview 和这一层重叠， navigationbaritem维持上一层的左按钮,右按钮,系统警告提示nested push animation can result in corrupted navigation bar</p>

<p>从头到尾分析了整个项目的代码， 最后确认问题根源——<strong>自定义UITabbarController</strong>引发的血案
项目中使用了自定义的UITabbarController ，修改里面的tabbar视图， 在这个UITabbarController 中实现了viewWillAppear方法， 里面没有加super viewWillAppear ， 结果导致了这一连串的问题，</p>

<ul>
<li>整个软件里面，都会出现弹一次模态窗口，导航视图就会动画乱序，</li>
<li>导航视图前进后退过快， 导致导航栏嵌套， 一个上面覆盖另一个。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewWillAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>    [super viewWillAppear:animated];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7教程：浅析Text Kit]]></title>
    <link href="http://saick.net/blog/2013/11/23/ios-7jiao-cheng-qian-xi-text-kit/"/>
    <updated>2013-11-23T22:06:00+08:00</updated>
    <id>http://saick.net/blog/2013/11/23/ios-7jiao-cheng-qian-xi-text-kit</id>
    <content type="html"><![CDATA[<p>转自<a href="http://beyondvincent.com/blog/2013/11/12/121-brief-analysis-text-kit/">破船</a>的博客</p>

<p>Text Kit是iOS 7中引入的一个新功能，非常值得开发者使用，下面先看看本文的目录结构：</p>

<ul>
<li>什么是Text Kit</li>
<li>Text Kit架构</li>
<li>Text Kit特点</li>
<li>Text Kit功能概述</li>
<li>Text Kit中重要的一些对象</li>
<li>Text Kit示例</li>
<li>小结</li>
<li>推荐Text Kit学习资源</li>
</ul>


<!-- more -->


<h3>什么是Text Kit</h3>

<p>在iOS7中，苹果引入了Text Kit&mdash;Text Kit是一个快速而又现代化的文字排版和渲染引擎。Text Kit在UIKit framework中的定义了一些类和相关协议，它最主要的作用就是为程序提供文字排版和渲染的功能。在程序中，通过Text Kit可以对文字进行存储(store)、布局(lay out)，以及用最精细的排版方式(例如文字间距、换行和对齐等)来显示文本内容。 苹果引入Text Kit的目的并非要取代已有的Core Text，Core Text的主要作用也是用于文字的排版和渲染中，它是一种先进而又处于底层技术，如果我们需要将文本内容直接渲染到图形上下文(Graphics context)时，从性能和易用性来考虑，最佳方案就是使用Core Text。而如果我们直接利用苹果提供的一些控件(例如UITextView、UILabel和UITextField等)对文字进行排版，无疑就是借助于UIkit framework中Text Kit提供的API。</p>

<h3>Text Kit架构</h3>

<p>下面，我们通过图1(此图来自WWDC2013 Session 210)来了解一下Text Kit的架构。图1是基于iOS 7绘制的，从图中，我们可以看到Text Kit是基于Core Text构建的，它通过Core Text与Core Graphics进行交互。而UI控件(UILabel、UITextField和UITextView)则构建于Text Kit之上，可见这些文本控件可以利用Text Kit提供的API来对文字进行排版和渲染处理。 从图中我们也可以看到SDK提供的UIWebView是基于WebKit的，它不能使用Text Kit提供的功能。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11028898935/" title="2013-11-24-1 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7439/11028898935_e836a8c934.jpg" width="500" height="211" alt="2013-11-24-1"></a></p>

<p>图1 Text Kit在iOS 7 SDK中的位置</p>

<p>我们再来看看图1中的相关组件在iOS6里面是如何对应的，如图2所示，可以看出在iOS 6中是没有Text Kit，并且UILabel、UIText和UITextView是基于String Drawing和WebKit构建的。其中String Drawing是与Core Graphics直接通讯。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029000326/" title="2013-11-24-2 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7430/11029000326_f1345af879.jpg" width="500" height="242" alt="2013-11-24-2"></a></p>

<p>图2 在iOS 6中并没有Text Kit</p>

<h3>Text Kit特点</h3>

<p>从上面的介绍中，我们可以了解到Text Kit在UIKit中的作用非常重要。Text Kit在实际开发中具有如下特点：</p>

<ul>
<li>1.在UI控件中Text Kit完全掌控着文字的排版和渲染</li>
<li>2.UITextView、UITextField和UILabel是构建于Text Kit之上的</li>
<li>3.能够与动画、UICollectionView和UITableView做到无缝集成</li>
<li>4.Text Kit具有这样一些能力：Subclassing、Delegation和Notifcation。</li>
</ul>


<h3>Text Kit功能概述</h3>

<p>下面我们看看通过Text Kit，都能实现那些功能(这里列出了是一些常用和重要功能)：</p>

<ul>
<li>1.对文字进行分页或多列排版</li>
<li>2.支持文字的换行、折叠和着色等处理</li>
<li>3.可以调整字与字之间的距离、行间距、文字大小、指定特定的字体</li>
<li>4.支持富文本编辑，可以自定义文字截断</li>
<li>5.支持凸版印刷效果(letterpress)</li>
<li>6.支持数据类型的检测(例如链接、附件等)</li>
</ul>


<p>如图3，是利用Text Kit对文字做的分页排版</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11028898985/" title="2013-11-24-3 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7420/11028898985_e42af249cf.jpg" width="500" height="303" alt="2013-11-24-3"></a></p>

<p>图3 利用Text Kit做的分页排版效果</p>

<p>再看图4，是利用Text Kit做的换行处理，其中对某个路径范围做了排除。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029105983/" title="2013-11-24-4 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5530/11029105983_dba9ffd9fb.jpg" width="500" height="359" alt="2013-11-24-4"></a></p>

<p>图4 利用Text Kit做的换行处理效果</p>

<p>再来看看利用Text Kit做的凸版印刷效果，如图5所示</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029054444/" title="2013-11-24-5 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2885/11029054444_fd67572185.jpg" width="500" height="365" alt="2013-11-24-5"></a></p>

<p>图5 利用Text Kit做的凸版印刷效果</p>

<h3>Text Kit中重要的一些对象</h3>

<p>下面我们来看看Text Kit中重要的几个对象。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029054134/" title="2013-11-24-6 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2849/11029054134_87158b12d4.jpg" width="500" height="293" alt="2013-11-24-6"></a></p>

<p>图6 Text Kit中重要的几个对象</p>

<p>如图6所示，Text Kit中主要有4个重要的对象。</p>

<ul>
<li>1.Text View是用来显示文本内容的控件，主要包括UILabel、UITextView和UITextField。</li>
<li>2.Text containers对应着NSTextContainer类。NSTextContainer定义了文本可以排版的区域。一般来说，都是矩形区域，当然，也可以根据需求，通过子类化NSTextContainer来创建别的一些形状，例如圆形、不规则的形状等。NSTextContainer不仅可以创建文本可以填充的区域，它还维护着一个数组——该数组定义了一个区域，排版的时候文字不会填充该区域，因此，我们可以在排版文字的时候，填充非文本元素(例如图片，如图4所示)。</li>
<li>3.Layout manager对应着NSLayoutManager类。该类负责对文字进行编辑排版处理——通过将存储在NSTextStorage中的数据转换为可以在视图控件中显示的文本内容，并把统一的字符编码映射到对应的字形(glyphs)上，然后将字形排版到NSTextContainer定义的区域中。</li>
<li>4.Text storage对应着NSTextStorage类。该类定义了Text Kit扩展文本处理系统中的基本存储机制。NSTextStorage继承自NSmutableAttributedString，主要用来存储文本的字符和相关属性。另外，当NSTextStorage中的字符或属性发生了改变，会通知NSLayoutManager，进而做到文本内容的显示更新。</li>
</ul>


<p>通常情况下，NSTextStorage、NSLayoutManager和NSTextContainer是一一对应的。如图7所示关系：</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11028999346/" title="2013-11-24-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3722/11028999346_3d78e9639e.jpg" width="500" height="41" alt="2013-11-24-7"></a></p>

<p>图7 普通排版</p>

<p>当然，如果需要将文字显示为多列，或多页，可以按照如图8所示关系——使用多个NSTextContainer。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029104793/" title="2013-11-24-8 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5472/11029104793_ed7de38158.jpg" width="500" height="64" alt="2013-11-24-8"></a></p>

<p>图8 多页或者多列排版</p>

<p>如果针对不同的排版方式，则可以使用多个NSLayoutManager，如图9所示</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029104933/" title="2013-11-24-9 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3826/11029104933_824d194d5f.jpg" width="500" height="59" alt="2013-11-24-9"></a></p>

<p>图9 不同的排版方式</p>

<p>如图10所示，通过形象的方式，对UITextView的组成做了分解。通常，我们在设备上只能看到最右边的文本显示界面，而内部的NSTextStorage、NSLayoutManager和NSTextContainer是看不出来的。通常由NSLayoutManager从NSTextStorage中读取出文本数据，然后根据一定的排版方式，将文本排版到NSTextContainer中，再由NSTextContainer结合UITextView将最终效果显示出来。</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11029105053/" title="2013-11-24-10 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7294/11029105053_875c954204.jpg" width="500" height="319" alt="2013-11-24-10"></a></p>

<p>图10 UITextView的分解</p>

<h3>Text Kit示例</h3>

<p>前面对Text Kit做了一些介绍，下面我们配合一个例子(图文排版)，来进一步加深对Text Kit的认识。具体实现步骤如下：</p>

<ul>
<li>1.打开Xcode 5，新建一个Single View Application模板的程序，将工程命名为ExclusionPath。</li>
<li>2.打开Main.storyboard文件，然后再默认View Controller的View里面分别添加一个UITextView和UIImageView。并将这两个控件连接到ViewController.h中(名称分别为textView何imageView)。然后给textView设置一些字符串，imageView设置一个图片。</li>
<li>3.打开ViewController.m文件，找到viewDidLoad方法，用如下代码替换该方法：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad 
</span><span class='line'>{ 
</span><span class='line'>    [super viewDidLoad]; 
</span><span class='line'>  
</span><span class='line'>    //创建一个平移手势对象，该对象可以调用imagePanned：方法 
</span><span class='line'>    UIPanGestureRecognizer *panGes = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(imagePanned:)]; 
</span><span class='line'>    [self.imageView addGestureRecognizer:panGes]; 
</span><span class='line'>  
</span><span class='line'>    self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]]; 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，给imageView添加了一个平移手势。另外通过调用translatedBezierPath方法，给textView的textContainer设置exclusionPaths属性值。表示需要排除的区域（也就是图片在排版中显示的位置）。</p>

<ul>
<li>4.下面来看一下translatedBezierPath方法的实现，如下代码所示</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIBezierPath *)translatedBezierPath 
</span><span class='line'>{ 
</span><span class='line'>    CGRect butterflyImageRect = [self.textView convertRect:self.imageView.frame fromView:self.view]; 
</span><span class='line'>    UIBezierPath *newButterflyPath = [UIBezierPath bezierPathWithRect:butterflyImageRect]; 
</span><span class='line'>  
</span><span class='line'>    return newButterflyPath; 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，利用imageView的frame属性创建了一个UIBezierPath，然后将该值返回。</p>

<ul>
<li>5, 还记得第3步中创建的平移手势吗。里面有一个action需要实现imagePanned:，下面来看看这个方法的实现：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)imagePanned:(id)sender 
</span><span class='line'>{ 
</span><span class='line'>    if ([sender isKindOfClass:[UIPanGestureRecognizer class]]) { 
</span><span class='line'>        UIPanGestureRecognizer *localSender = sender; 
</span><span class='line'>  
</span><span class='line'>        if (localSender.state == UIGestureRecognizerStateBegan) { 
</span><span class='line'>            self.gestureStartingPoint = [localSender translationInView:self.textView]; 
</span><span class='line'>            self.gestureStartingCenter = self.imageView.center; 
</span><span class='line'>        } else if (localSender.state == UIGestureRecognizerStateChanged) { 
</span><span class='line'>            CGPoint currentPoint = [localSender translationInView:self.textView]; 
</span><span class='line'>  
</span><span class='line'>            CGFloat distanceX = currentPoint.x - self.gestureStartingPoint.x; 
</span><span class='line'>            CGFloat distanceY = currentPoint.y - self.gestureStartingPoint.y; 
</span><span class='line'>  
</span><span class='line'>            CGPoint newCenter = self.gestureStartingCenter; 
</span><span class='line'>  
</span><span class='line'>            newCenter.x += distanceX; 
</span><span class='line'>            newCenter.y += distanceY; 
</span><span class='line'>  
</span><span class='line'>            self.imageView.center = newCenter; 
</span><span class='line'>  
</span><span class='line'>            self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]]; 
</span><span class='line'>        } else if (localSender.state == UIGestureRecognizerStateEnded) { 
</span><span class='line'>            self.gestureStartingPoint = CGPointZero; 
</span><span class='line'>            self.gestureStartingCenter = CGPointZero; 
</span><span class='line'>        } 
</span><span class='line'>    } 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中首先根据平移的距离来设置imageView的位置，然后利用translatedBezierPath方法重新计算了一下排除区域。</p>

<ul>
<li>6, 至此代码编写完毕，下面来运行程序，看看实际效果。如图11所示：</li>
</ul>


<p><a href="http://www.flickr.com/photos/105999540@N03/11028998926/" title="2013-11-24-11 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3709/11028998926_73393ee43a.jpg" width="332" height="500" alt="2013-11-24-11"></a></p>

<p>图11 运行效果</p>

<h3>小结</h3>

<p>实际上，上面的示例，只是揭秘了Text Kit功能的冰山一角。从iOS7及以后的版本中，Text Kit在UIKit framework里面占据重要的地位，Text Kit在文字处理方面，具有非常强大的功能，并且开发者可以对Text Kit进行定制和扩展。据悉，苹果利用了2年的时间来开发Text Kit，相信这对许多开发者来说都是福音。</p>

<p>推荐Text Kit学习资源
更多关于Text Kit的学习资料，请参考下面的内容：
wwdc视频:
Introducing Text Kit
Advanced Text Layouts and Effects with Text Kit
Using Fonts with Text Kit</p>

<p>苹果官方参考文档
Text Programming Guide for iOS.pdf
NSLayoutManager Class Reference for iOS.pdf
NSLayoutManagerDelegate Protocol Reference for iOS.pdf
NSTextContainer Class Reference for iOS.pdf
NSTextStorage Class Reference for iOS.pdf
NSTextStorageDelegate Protocol Reference for iOS.pdf</p>

<p>苹果官方示例：
IntroToTextKit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autolayout及VFL经验分享]]></title>
    <link href="http://saick.net/blog/2013/11/23/autolayoutji-vfljing-yan-fen-xiang/"/>
    <updated>2013-11-23T17:53:00+08:00</updated>
    <id>http://saick.net/blog/2013/11/23/autolayoutji-vfljing-yan-fen-xiang</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/applenews/devnews/2013/1108/7322.html">Origin</a></p>

<p>这篇不是什么教程, Cocoa autolayout出来蛮久了。以前多次想去深入研究一下，每次都很蛋疼无序。这东西是在有些搞。尤其习惯了code写布局的。看到Visual format language，简直要掀桌子。搜教程，满世界都是，没有一个讲得透彻的。例子空洞。你们就只会３个控件横向布局对法？浑浑噩噩看了多篇。有了点总结。槽不多吐了。简单讲讲。</p>

<!--more-->


<h3>Autolayout，开始于iOS6.0</h3>

<h4>一.什么时候用autolayout比较适合</h4>

<ul>
<li>１.不负责任的骑墙派说法：apple的设备越来越多了，你的应用应该都使用al。（并且用sb）</li>
<li>２.要看应用内容决定。如果你的内容是信息众多，同时需要展示的类别也很多，尺寸动态不定，甚至这些是在列表中的。（如社交应用）。Al能给于很大的帮助。</li>
<li>３.Mac os的应用。现在都做iOS了。mac app的窗口，会有大小变化。al比较合适。</li>
<li>４.支持多向转屏的iPad应用。（有需要支持多方向iphone场景么？那么长，脑残了？）</li>
<li>５.其他业务不复杂,页面较少的应用，其实，cocoa程序员写了多年code都有自己的ui编程习惯，这些习惯对于他们来说是很高效的。就算是第一项所说，布局的坐标都是相对的。</li>
</ul>


<p>如果是习惯于code写布局的，建议可以继续沿用，同时也要学习al。自我感觉al和传统布局写法，工作量不会相差太多。但是VFL用熟练了以后会有很大的改善。</p>

<h4>二.autolayout的基础理论</h4>

<p>al的核心出发点是</p>

<ul>
<li>1.view具有自我计算尺寸，布局的能力。通过它自身的内容，能够得到尺寸。</li>
<li>2.view的布局位置，确定于它与superview及其他view的关系。</li>
<li>3.与传统的autoresizingmask自适应相比，al更精确，能绝对的确定view的布局。</li>
<li>4.view不一定需要一个初始的rect。al中，view如果有足够的constraint，便可以确定自己的尺寸和位置，并且知道自己和其他view的关系。即，想确定view的布局，就给它（们）添加constraint。</li>
</ul>


<h4>三.xib下的autolayout</h4>

<p>似乎al和xib布局模式生来就是要搞在一起的。用xib加al，view布局非常简单容易。编程工作立刻变成了美工的连线拼图游戏。</p>

<p>开启xib或者sb后，选择需要view(s)。选择menu的Editor，选择Pin。子菜单的项目就是可用的constraints。</p>

<p>Width:固定自身宽度</p>

<p>Height:。。。</p>

<p>H- Spacing: 固定两个view的水平间距</p>

<p>V- Spacing:。。。</p>

<p>下面４个分别是view相对于superview的左、右、上、下的间距</p>

<p>Widths Equally:两个view保持宽度相同</p>

<p>Heights Equally:。。。</p>

<p>xib界面右下角工具条也有可以编辑constraint的方式：</p>

<p>每个constraint添加后都是可以编辑的。选中某个constraint后开启右边栏选inspector。可以修改数值。（这个数值是view间的偏移量）和优先级。</p>

<p>自己慢慢拖着玩去。这不是傻瓜教程。点到位，自己研究。</p>

<p>xib下的al比较直观。可以基本看到效果和误差值。还有不正确的constraint的提示。少了constraint编译器会补，多了会提示报错。（不过都会引起界面布局不对，自己慢慢调吧，哥现在还是满篇alert，没有让编译器感觉矛盾费解的constraint，都是可以work的。）</p>

<p>还有resolve的方式解决constraint的问题，抱歉，我不会。</p>

<h4>四.编码方式使用autolayout</h4>

<p>对于页面不多，的普通应用。xib/sb加al。拖拖拽拽。娱乐中就可以完成UI的工作。al的确给于了不少方便。</p>

<p>不过多年的强迫症程序猿怎么会忍受这种很逊的方式。（拖积木？不敲代码？好像一天没做事。）</p>

<p>1.Visual format language　（应该不算语言）
Apple的工程师很有爱，发明了这种哭笑不得的象形文字。感觉它就是种解析方式。</p>

<p>Apple的官方文档给出了少之又少的文档和坑爹的例子。（视频我没看，不知道怎么样）网上的同学们也写了点不痛不痒的几句代码。你这是学了１＋１就让人搞微积分的节奏么？要写不写清楚，不如不写。</p>

<p>从厚道的老外那看了几篇。自己体会了些，分享给大家。只是个基本水平吧，会了这些，代码写al应该没有问题了。深入的我也还不会，希望遇到更有爱的牛人分享。</p>

<p>VFL在程序中由支持：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSArray *)constraintsWithVisualFormat:(NSString *)format options:(NSLayoutFormatOptions)opts metrics:(NSDictionary *)metrics views:(NSDictionary *)views;   </span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>它返回一组constraint.</li>
<li>format是你的VFL字串，等下讲。</li>
<li>opts自己点去头文件看。有些情况会用，等下有例子。</li>
<li>metrics是一个奇妙的字典，是你自己定义的。这个字典里面的key可以写在format字串中。编译器解析时，自动替换为metrics字典中的value。等下有例子。</li>
<li>views是需要constraint关系的所有view.(也可以是一个)</li>
</ul>


<p>2.VFL例子</p>

<p>写vfl字串的时候，脑海里要想象出画面的合理性。不合理的constraint会导致程序运行时报错或者直接崩溃。</p>

<p>随便写几个</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSDictionary *dict1 = NSDictionaryOfVariableBindings(_boxV,_headerL,_imageV,_backBtn,_doneBtn);   
</span><span class='line'>NSDictionary *metrics = @{@"hPadding":@5,@"vPadding":@5,@"imageEdge":@150.0};   
</span><span class='line'>NSString *vfl = @"|-hPadding-[_boxV]-hPadding-|";   
</span><span class='line'>NSString *vfl0 = @"V:|-25-[_boxV]";   
</span><span class='line'>NSString *vfl3 = @"V:|-vPadding-[_headerL]-vPadding-[_imageV(imageEdge)]-vPadding-[_backBtn]-vPadding-|";   </span></code></pre></td></tr></table></div></figure>


<p>dict1就是api 中需要的最后一个参数views。由上述宏来完成。</p>

<p>metrics定义了一些vfl中要用的参数。
下面有些vfl字串，一看便知如何使用metrics。</p>

<p>看到：</p>

<p>1) &ldquo;|&#8221;表示superview. |-间距-[view1对象名]&ndash;(>=20)&ndash;[view2对象名] 不写H/V就表示横向，间距可以写固定值也可写>/&lt;。形象化的理解，&rdquo;|&ldquo;是用来确定view上、下、左、右关系的。 想要确定从上到下的关系，就加V:|。那么这个vfl字串就可以描述从上到下的view们的关系。</p>

<p>2) 看到vfl3里面，方括号表示view，圆括号表示尺寸数值。支持大小等于。或者另一个view　|&ndash;[view1(view2)]，v１的宽度等于v２。</p>

<p>3) 优先级用＠表示。如V:|-50@750-[view(55)]，或者写到metrics里面更好。 具体定义查看UILayoutPriority。有几个固定的数值。1000表示必须支持。</p>

<p>4) options，这个要看具体需要。如果是竖排V布局，可以添加NSLayoutFormatAlignAllLeft，让他们对齐。根据需要也可以添加按位或NSLayoutFormatAlignAllLeft | NSLayoutFormatAlignAllRight。（鬼知道什么需要，自己看经验吧）</p>

<p>5) 写好以后一般把constraint添加给superview：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *vfl1 = @"|-hPadding-[_headerL]-hPadding-|";   
</span><span class='line'>[self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:vfl1 options:0 metrics:metrics views:dict1]];   </span></code></pre></td></tr></table></div></figure>


<p>6)还有一个api用于生成单个constaint</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)constraintWithItem:(id)view1 attribute:(NSLayoutAttribute)attr1 relatedBy:(NSLayoutRelation)relation toItem:(id)view2 attribute:(NSLayoutAttribute)attr2 multiplier:(CGFloat)multiplier constant:(CGFloat)c;  </span></code></pre></td></tr></table></div></figure>


<p>对于参数，记得，view1.attr1 = view2.attr2 * multiplier + constant就好。
这个是不用VFL的，好理解，但是不方便。如果用这个写。工作两不会比传统布局少多少。</p>

<h4>五.实际操作中的问题</h4>

<p>上面都是理论，世界操作会有些奇怪的问题要注意。这节才是重点。</p>

<p>xib模式，没啥要注意的，xib里报warning就报吧，我也不知道怎么弄，一切正常就好。</p>

<p><strong>编码模式中，注意</strong></p>

<ul>
<li>1.addConstraint(s)前，view应该去部被addSubView上去了。</li>
<li>2.不必给views写frame</li>
<li>3.给必要的view关掉AutoresizeingMask。[_aView setTranslatesAutoresizingMaskIntoConstraints:NO];</li>
<li>4.UILabel换行要写linebreakMode,要写numberOfLines(iOS7.0默认好像是1，坑爹了)</li>
<li>5.UILabel要想换行，一定要添加preferredMaxLayoutWidth。否则没法初始化宽度。</li>
</ul>


<p>编码模式感受到的最大方便。label换行不用写行高计算了。完全自动适应。label所在的superview也会自动计算rect。这才是al的精华。</p>

<p>所以，可以不用写这些了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*  
</span><span class='line'>    if([[UIDevice currentDevice].systemVersion floatValue]&lt;7.0){  
</span><span class='line'>        CGSize titleS = [title sizeWithFont:[_headerL font]  
</span><span class='line'>                           constrainedToSize:CGSizeMake(270.0, CGFLOAT_MAX)  
</span><span class='line'>                               lineBreakMode:NSLineBreakByWordWrapping];  
</span><span class='line'>          
</span><span class='line'>        _headerL.frame = CGRectMake(_headerL.frame.origin.x, _headerL.frame.origin.y,  
</span><span class='line'>                                    _headerL.frame.size.width, titleS.height);  
</span><span class='line'>    }else{  
</span><span class='line'>        CGRect titleR = [title boundingRectWithSize:CGSizeMake(270.0, CGFLOAT_MAX)  
</span><span class='line'>                                            options:NSStringDrawingUsesLineFragmentOrigin  
</span><span class='line'>                                         attributes:nil  
</span><span class='line'>                                            context:nil];  
</span><span class='line'>        headerL.frame = CGRectMake(_headerL.frame.origin.x, _headerL.frame.origin.y,  
</span><span class='line'>                                   _headerL.frame.size.width, titleR.size.height);  
</span><span class='line'>    }  
</span><span class='line'>    */</span></code></pre></td></tr></table></div></figure>


<p>我遇到了些问题，至今没有解决：</p>

<p>纯代码写的Viewcontroller 无法正常显示al布局。用空白的xib做了vc后，其余再用code写，就正常了。怀疑自己写的self.view，还需要针对autolayout做什么处理。至此，al，基本功能已经可以为你服务了。的确方便很多，建议还是使用VFL代码模式，熟练后能够提高很多效率。</p>

<p>引用别的同学的评论：</p>

<p><em>最后一个问题：可以试一下self.view=自定义的视图； 不要用[self.view addSubview:&hellip;];</em></p>

<p><a href="https://www.dropbox.com/s/vizq53ig4e1z7io/20131123_AutoLayoutTest.zip">demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发：从新手到专家的一些建议]]></title>
    <link href="http://saick.net/blog/2013/11/23/ioskai-fa-cong-xin-shou-dao-zhuan-jia-de-xie-jian-yi/"/>
    <updated>2013-11-23T17:32:00+08:00</updated>
    <id>http://saick.net/blog/2013/11/23/ioskai-fa-cong-xin-shou-dao-zhuan-jia-de-xie-jian-yi</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/applenews/devnews/2013/1118/7371.html">Origin</a></p>

<p>虽然你有可能在一周内学习到iOS开发的本质，但想要精通iOS开发需则要花费更长的时间。问题是你如何从新手变成专家？在这篇文章中，我们主要就这个主题给出一些建议（如果你有好的建议和相关文章欢迎分享给更多开发者）</p>

<!-- more -->


<h3>1.练习，练习还是练习</h3>

<p>iOS开发没有捷径可走。这是我在继续这个话题之前需要强调的东西，因为摆脱任何常常浮现于你脑海的幻想很重要。如果你仅仅在星期天的4PM和5PM之间学习/练习编程，那么你不会成为一个熟练的iOS开发者。不要误会我的意思，这么做可能会很有趣，但是它很难让你成为一个老练的专业的iOS开发者。除了极少数的人，大部分人都需要不断的练习和实践。如果你还没有准备好投入大量时间，这时候最好重新审视你的目标和理想。</p>

<h3>2.向其他人学习</h3>

<p>提升开发技能和采用最佳实践的最好策略之一是学习别人的代码。这不仅仅意味着浏览Stack Overflow，但更重要的是其他开发者的各种开源类库和代码片段。</p>

<p>不管何时你一头扎进各种类库的学习，比如AFNetworking或者Magical Record，很关键的一点是不要被各种代码淹没。有可能你不理解各种库中的代码，但这不是真正的关键，重点是从一个更高的层次来看源码和尽可能多地学习，比如<em>命名规范</em>、<em>最佳实践</em>&amp;以及<em>设计模式</em>等。</p>

<p>除了学习别人的代码外，创建你自己的类库是一个最好的学习方法。不久前，我用Core Data作为数据层开发了一款app，我没有使用Magical Record，我决定通过学习Magical Record创建自己的库，并重新创建了我需要的功能。这种方法不仅帮我创建了一个更加灵活的库，也让我学习到很多Magical Record内部的工作原理。</p>

<h3>3. 不要仅仅复制和粘贴</h3>

<p>这一点让我看到了正确学习方式的另一个关键面：不要不动脑子简单地复制和粘贴。我们常常会使用我们在Stack Overflow或者苹果开发者论坛找到的各种代码片段，但是不要为了偷懒简单地复制粘贴你从网络上找到的代码，这样你很难彻底理解它。最大的危险在于这可能会导致意外的行为，以致于你的代码以后都很难调试和修复。</p>

<p>有时候，复制别人的代码片段看着可能已经解决了你遇到的问题，但是我强烈建议不要这么做。阅读代码，理解你往代码库添加的东西，可能的话定制你需要的解决方案。不用说，这并不适用于开发者积极维护的库或框架。在项目中使用Magical Record前，如果你需要仔细检查它，那么我确信你已经理解了不同之处。使用你自己的常识。</p>

<h3>4. 模式</h3>

<p>Cocoa和Objective-C在很多方面都不同于其他编程语言和环境。这意味着他们有自己独特的模式和最佳实践。我确信你已经熟悉了一些常见的模式，比如委托和通知。但还有很多模式可以开发过程中帮助你，比如单例模式、观察者模式以及通用模式等。Cocoa Fundamentals Guide很好地概述了Cocoa中大部分常用模式。</p>

<h3>5.了解你的工具</h3>

<p>作为一个开发者并不仅仅是理解语言和框架，理解你每天使用的工具同样重要。对于iOS开发来说，这意味着你需要很好地理解Xcode和其他可能用到的工具，比如PonyDebugger和Charles。如果你想学习一些额外的技巧，你可能会对我此前的一篇文章（iOS Quick Tip: 7 Tips to Speed Up Your Development）感兴趣。</p>

<h3>6.与时俱进</h3>

<p>即使你不能参加苹果一年一度的开发者大会&mdash;WWDC，但浏览大量的会议视频是个很好的学习方法，你可以观看你感兴趣的专题视频，它们都是由在某方面擅长的工程师演讲，他们可以告诉你一些细节信息以及相关使用说明。另外，你还可以多关注优秀的开发者，他们会定期写一些技术文章，比如比如Matt Gemmell、 Aaron Hillegass以及Mike Ash，你可以在我为Mobiletuts+写的这篇“Where To Go Next”文章中找到更多学习资源。</p>

<h3>7.学习其他语言</h3>

<p>我已经注意到学习新语言或者使用新框架让我对软件开发的整体理解有了明显提高。这种方法的优点在于不会限制你对最熟悉语言的认知和它潜在可能性的理解。我最近在研究Ember.js，并了解到它的创建者 Yehuda Katz和Tom Dale是从Cocoa获得的灵感。Ember.js对mvc的实现并没有遵循JavaScript framework，不过如果你熟悉cocoa的话，就不会感觉到奇怪了。</p>

<p>对于软件开发来说，没有最好的语言，每种语言都有自己的优势和劣势。但是好的一面在于或多或少他们都有所不同，这使得学习新语言变得更加有趣和更有启发性。比如对我来说，Ruby在写DRY (Don’t Repeat Yourself)、易读的、干净的代码方面让我大开眼界。</p>

<h3>总结</h3>

<p>如果你不想花费时间成为一个更好的程序员，那么你可能要重新考虑下为什么你把成为一个程序员摆在首位。但如果你会因为一个可以帮你的新类库或者开发工具而兴奋，那么随着时间的流逝，你在提高自身技能方面可能不会有什么问题。你真的必须热爱你所做的事情，并在这面擅长，这一点尤其适用于编程。不管什么人告诉你，你不会在一夜之间成为一个老练的开发者，但如果你保持不间断的学习，并细心打磨自己的“手艺”，我想你的技术会有很好的提高。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Quick Tip: 7 Tips to Speed Up Your Development]]></title>
    <link href="http://saick.net/blog/2013/11/23/ios-quick-tip-7-tips-to-speed-up-your-development/"/>
    <updated>2013-11-23T16:18:00+08:00</updated>
    <id>http://saick.net/blog/2013/11/23/ios-quick-tip-7-tips-to-speed-up-your-development</id>
    <content type="html"><![CDATA[<p><a href="http://mobile.tutsplus.com/tutorials/iphone/ios-quick-tip-7-tips-to-speed-up-your-development/">origin</a></p>

<p>Most developers are always looking for ways to improve or automate their workflow being it with a simple script to automate a common task or by learning every possible keyboard shortcut of their favorite text editor. In this article, I will show you seven tips that will speed up and streamline your workflow in Xcode.</p>

<!-- more -->


<h3>1. Keyboard Shortcuts</h3>

<p>Virtually every Xcode command has a keyboard shortcut that you can learn and even customize. Investing the time to learn keyboard shortcuts will increase your efficiency tremendously. If you are like me, and a lot of other developers, you prefer to keep your hands on the keyboard when you’re writing code and that is exactly what most key bindings are for.</p>

<p>If you don’t like the default keyboard shortcuts, then you’ll be happy to learn that you can customize Xcode’s default keyboard shortcuts in the <strong>Preferences</strong> window under the <strong>Key Bindings</strong> tab.</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11006344093/" title="2013-11-23-1 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3817/11006344093_814a28a77f.jpg" width="500" height="367" alt="2013-11-23-1"></a>
iOS Quick Tip: 5 Tips to Speed Up Your Development &ndash; Managing Key Bindings in Xcode&rsquo;s Preferences Window</p>

<p>If you don’t want to scroll through the long list of keyboard shortcuts to learn the most important ones, then I recommend browsing through this <a href="http://stackoverflow.com/questions/146297/hidden-features-of-xcode">question on Stack Overflow</a>. It lists the most important key bindings in Xcode and also includes a number of other neat tips and tricks.</p>

<h3>2. Cocoapods</h3>

<p>Cocoapods, a great project started by Eloy Durán, has gained significant traction in the Cocoa community. What is Cocoapods? Cocoapods is a tool for managing dependencies in Xcode projects. Due to Cocoapods’ popularity, hundreds of third party libraries have been updated to support Cocoapods. Even though Cocoapods is distributed as a Ruby gem, you don’t need to understand Ruby to benefit from Cocoapods.</p>

<p>If you are tired of manually managing third party libraries in your iOS or OS X projects, or you’re looking for a solution that makes updating third party libraries easier, then Cocoapods is the best solution available. If you want to learn about Cocoapods, then I recommend reading <a href="http://mobile.tutsplus.com/tutorials/iphone/streamlining-cocoa-development-with-cocoapods/">a post about Cocoapods</a> that I wrote earlier this year. It will get you up and running in minutes.</p>

<h3>3. Code Snippets</h3>

<p>Chances are that you use a text or code snippet manager, such as <strong>TextExpander</strong> or <strong>CodeBox</strong>. I use TextExpander all the time and it has saved me countless keystrokes over the years. <em>I use Dash to manage my document sets and code snippets.</em> However, Xcode also has a snippet manager. It lives in Xcode’s right sidebar next to the Object Library.</p>

<p>Why should you use Xcode’s snippet manager instead of the alternatives I mentioned earlier? In Xcode, each snippet has a number of additional attributes that really make snippets powerful and flexible. Each snippet has a Platform and Language attribute as well as a completion scope. A snippet’s completion scope is especially useful and integrates neatly with Xcode’s editor. Did I mention that each snippet can have multiple placeholders?</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11006222706/" title="2013-11-23-2 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7364/11006222706_6e4d20315d.jpg" width="500" height="212" alt="2013-11-23-2"></a></p>

<p>iOS Quick Tip: 5 Tips to Speed Up Your Development &ndash; Creating and Managing Code Snippets is Very Easy in Xcode</p>

<h3>4. Learn Git</h3>

<p>If you’ve just started to learn how to program and the concept source control is new to you, then I strongly recommend that you take some time to learn the basics of Git. Git is <a href="http://en.wikipedia.org/wiki/Git_(software">a distributed version control and source code management system</a>). Euh … what? In short, Git helps you manage your source code easily and efficiently. Combine Git with GitHub or BitBucket and you are starting to look like a professional programmer. The added benefit is that Xcode integrates nicely with Git and this integration will only improve over time.</p>

<p>Once you’ve learned the basics of Git, it is recommended to include a proper .gitignore file in your Xcode project. A good place to start is this question on Stack Overflow.</p>

<p>Even though Git is commonly used through the command line, there are a number of applications that provide a GUI (Graphical User Interface). My favorite is <a href="http://www.git-tower.com/">Tower</a>, developed by Fournova, which recently reached version 1.5. Atlassian‘s <a href="https://www.atlassian.com/software/sourcetree/overview">SourceTree</a> is another great and free alternative.</p>

<h3>5. Xcode Behaviors</h3>

<p>Xcode is an incredibly powerful editor and it only gets better over the years. One of the aspects that I use frequently is Xcode’s <strong>Behaviors</strong> feature. By defining behaviors, you can tell Xcode what it should do when a particular event occurs, such as when a crash occurs while debugging or when you’ve successfully archived an application.</p>

<p>You can configure these behaviors in Xcode’s Preferences Window. If you don’t like it when Xcode shows the console when output is generated, you can disable this behavior in the <strong>Behaviors</strong> panel. Do you want Xcode to show the <strong>Issues Navigator</strong> when one or more tests fail? This is all possible with Xcode Behaviors.</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11006291054/" title="2013-11-23-3 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3812/11006291054_0794190295.jpg" width="500" height="367" alt="2013-11-23-3"></a></p>

<p>iOS Quick Tip: 5 Tips to Speed Up Your Development &ndash; Managing Behaviors in Xcode&rsquo;s Preferences Window</p>

<p>Xcode predefines a number of common behaviors for you, such as Build, Testing, and Running. However, you can also define custom behaviors and assign a keyboard shortcut to it. This is a convenient way to set up Xcode the way you want with a single key binding.</p>

<h3>6. Tabs and Windows</h3>

<p>I really like the unified look of Xcode 4 and the integration of Interface Builder. However, it is sometimes useful to have more than one window at hand, for example, when you are working in the console and the editor at the same time or you use multiple monitors. In Xcode 4, it is still possible to work with multiple windows. You can create a new window using the keyboard shortcut <code>Shift + Cmd + T</code> or use the menu, <strong>File > New > Window</strong>.</p>

<p>Even more useful are tabs. Almost every code editor has tabs these days and Xcode is no exception. I rarely find myself in an Xcode window that has no, or one, tab. What few people know is that Xcode tabs can be named. You can even tie named tabs and Xcode behaviors together, which is especially useful during debugging.</p>

<h3>7. Documentation</h3>

<p>Even if you’ve been developing Cocoa applications for years, the documentation should never be more than a click away. There are a number of ways to quickly access Xcode’s documentation browser. The solution I use most often is holding the option key and clicking a method in Xcode’s code editor. This presents you with a summary of the particular method. If you want to read more or open the documentation browser, you can click one of the links in the pop up window.</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11006118705/" title="2013-11-23-4 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7341/11006118705_ee2259bfdf.jpg" width="500" height="309" alt="2013-11-23-4"></a></p>

<p>iOS Quick Tip: 5 Tips to Speed Up Your Development &ndash; The Documentation is Your Friend</p>

<p>You can achieve the same by opening Xcode’s right sidebar and open the Quick Help Inspector tab. The help inspector updates as the cursor moves. As with the pop up window, clicking on one of the links in the help inspector takes you to the respective section in the documentation in the documentation browser.</p>

<p><a href="http://www.flickr.com/photos/105999540@N03/11006118685/" title="2013-11-23-5 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3782/11006118685_ec1975ac10.jpg" width="500" height="422" alt="2013-11-23-5"></a></p>

<p>iOS Quick Tip: 5 Tips to Speed Up Your Development &ndash; The Quick Help Inspector</p>

<p>One of the downsides of Xcode’s documentation browser is that it can be slow at times. For this reason, I frequently use Dash, a dedicated documentation and snippet manager. Dash is very fast and provides support for more than eighty languages, libraries, frameworks, and APIs. It is well worth checking out.</p>
]]></content>
  </entry>
  
</feed>
