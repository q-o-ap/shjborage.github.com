<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Saick Blog]]></title>
  <link href="http://saick.net/atom.xml" rel="self"/>
  <link href="http://saick.net/"/>
  <updated>2014-04-08T17:01:15+08:00</updated>
  <id>http://saick.net/</id>
  <author>
    <name><![CDATA[Eric Shi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reveal插件简介]]></title>
    <link href="http://saick.net/blog/2014/04/08/revealcha-jian-jian-jie/"/>
    <updated>2014-04-08T16:24:00+08:00</updated>
    <id>http://saick.net/blog/2014/04/08/revealcha-jian-jian-jie</id>
    <content type="html"><![CDATA[<p>Reveal 自己没有这种插件，可以修改工程使用，就自己做个吧。<br/>
做的时候参考了Spark Inspector。</p>

<p><a href="https://github.com/shjborage/Reveal-Plugin-for-XCode">https://github.com/shjborage/Reveal-Plugin-for-XCode</a></p>

<!-- more -->


<p>Plugin for Xcode to integrate the Reveal App to your project automatic(Without any modifications to your project).</p>

<h2>Introduction</h2>

<p><strong>The Reveal Plugin works just like Instruments.</strong></p>

<p>The Spark Inspector integrates directly into Xcode, so you don&rsquo;t need to add frameworks or modify your project to inspect your app in the iOS Simulator.</p>

<p>If you&rsquo;re in the middle of a debug session and something unexpected happens, you can attach the Spark Inspector to see what&rsquo;s going on. No restarting your app, no changing your project. All from inside Xcode.</p>

<h2>Install</h2>

<h3>Via Alcatraz</h3>

<p>Reveal-Plugin-for-XCode is available through the <a href="http://alcatraz.io/">Alcatraz</a> Xcode plugin management system.</p>

<p>From source</p>

<p>Simply build the Xcode project and restart Xcode. The plugin will automatically install to <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code>.</p>

<h2>Uninstall</h2>

<p>To uninstall, just remove the plugin from the above directory, and restart Xcode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/KPRunEverywhereXcodePlugin.xcplugin</span></code></pre></td></tr></table></div></figure>


<p>Tested on Xcode 5.1 and Mac OS X 10.9.2.</p>

<h2>Contributors</h2>

<p>Welcome to fork and PullRequest to do this better.
We use issues to manage bugs and enhanced features.</p>

<h2>Thanks</h2>

<ul>
<li><a href="http://blog.ittybittyapps.com/blog/2013/11/07/integrating-reveal-without-modifying-your-xcode-project/">Integrating Reveal without modifying your Xcode project</a></li>
<li><a href="http://onevcat.com/2013/02/xcode-plugin">Xcode 4 插件制作入门</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block实现原理研究与使用需要注意的问题]]></title>
    <link href="http://saick.net/blog/2014/04/01/blockshi-xian-yuan-li-yan-jiu-yu-shi-yong-xu-yao-zhu-yi-de-wen-ti/"/>
    <updated>2014-04-01T16:42:00+08:00</updated>
    <id>http://saick.net/blog/2014/04/01/blockshi-xian-yuan-li-yan-jiu-yu-shi-yong-xu-yao-zhu-yi-de-wen-ti</id>
    <content type="html"><![CDATA[<p>关于Block的使用，现在很多人都说他知道。但是知道怎么用与懂为什么这么用，可能会出现哪些问题还是区别很大的。
光说没用，先把<a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">这个题</a>做一下试试看。如果说全做对，可能我接下来要说的大部分都可以直接跳过啦。</p>

<!-- more -->


<h2>Block 实现原理分析</h2>

<p>引自：<a href="http://www.hrchen.com/2013/06/retain-cycle-in-block/">Block的引用循环问题 (ARC &amp; non-ARC)</a></p>

<p>由于Objective-C是C语言的超集，既然OC中的NSObject对象其实是由C语言的struct+isa指针实现的，那么Block的内部实现估计也一样，以下三篇Blog对Block的实现机制做了详细研究：</p>

<p><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/">A look inside blocks: Episode 1</a>  <br/>
<a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/">A look inside blocks: Episode 2</a>  <br/>
<a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-3/">A look inside blocks: Episode 3</a></p>

<p>虽然实现细节看着头痛，不过发现Block果然是和OC中的NSObject类似，也是用struct实现出来的东西。这个是LLVM项目compiler-rt分析的block头文Block_private.h头文件中关于Block的struct声明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Block_descriptor {
</span><span class='line'>    unsigned long int reserved;
</span><span class='line'>    unsigned long int size;
</span><span class='line'>    void (*copy)(void *dst, void *src);
</span><span class='line'>    void (*dispose)(void *);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>struct Block_layout {
</span><span class='line'>    void *isa;
</span><span class='line'>    int flags;
</span><span class='line'>    int reserved;
</span><span class='line'>    void (*invoke)(void *, ...);
</span><span class='line'>    struct Block_descriptor *descriptor;
</span><span class='line'>    /* Imported variables. */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>我们发现Block_layout中也有一个isa指针，像极了NSobject内部实现struct中的isa指针。这里的isa可能指向三种类型之一的Block：</p>

<p><code>_NSConcreteGlobalBlock</code>：全局类型Block，在编译器就已经确定，直接放在代码段<strong>TEXT上。直接在NSLog中打印的类型为</strong>NSGlobalBlock<strong>。<br/>
<code>_NSConcreteStackBlock</code>：位于栈上分配的Block，即</strong>NSStackBlock<strong>。<br/>
<code>_NSConcreteMallocBlock</code>：位于堆上分配的Block，即</strong>NSMallocBlock__。</p>

<p>为什么会有这么多种类呢？首先来看全局类型Block，看例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void addBlock(NSMutableArray *array) {
</span><span class='line'>  [array addObject:^{
</span><span class='line'>    printf("global block\n");
</span><span class='line'>  }];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>void example() {
</span><span class='line'>  NSMutableArray *array = [NSMutableArray array];
</span><span class='line'>  addBlock(array);
</span><span class='line'>  void (^block)() = [array objectAtIndex:0];
</span><span class='line'>  block();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>为什么addBlock中添加到array中的Block属于全局Block呢？因为它不需要运行时(Runtime)任何的状态来改变行为，不需要放在堆上或者栈上，直接编译后在代码段中即可，就像个c函数一样。这种类型的Block在ARC和non-ARC情况下没有差别。
这个Block访问了作用域外的变量d，在实现上就是这个block会多一个成员变量对应这个d，在赋值block时会将方法exmpale中的d变量值复制到成员变量中，从而实现访问。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void example() {
</span><span class='line'>  int d = 5;
</span><span class='line'>  void (^block)() = ^() {
</span><span class='line'>      printf("%d\n", d);
</span><span class='line'>  };
</span><span class='line'>  block();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果要修改d呢？：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void example() {
</span><span class='line'>  int d = 5;
</span><span class='line'>  void (^block)() = ^() {
</span><span class='line'>      d++;
</span><span class='line'>      printf("%d\n", d);
</span><span class='line'>  };
</span><span class='line'>  block();
</span><span class='line'>  printf("%d\n", d);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>由于局部变量d和这个block的实现不在同一作用域，仅仅在调用过程中用到了值传递，所以不能直接修改，而需要加一个标识符__block int d = 5;，那么block就可以实现对这个局部变量的修改了。如果是这种block标识的变量，在Block实现中不再是简单的一个成员变量，而是对应一个新的结构体表示这个block变量。block的本质是引入了一个新的Block_byref{$var_name}{$index}结构体，被block关键字修饰的变量就被放到这个结构体中。另外，block结构体通过引入Block_byref{$var_name}{$index}指针类型的成员，得以间接访问到Block的外部变量。这样对Block外的变量访问从值传递转变为引用，从而有了修改内容的能力。
正常我们使用Block是在栈上生成的，离开了栈作用域便释放了，如果copy一个Block，那么会将这个Block copy到堆上分配，这样就不再受栈的限制，可以随意使用啦。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef void (^TestBlock)();
</span><span class='line'> 
</span><span class='line'>TestBlock getBlock() {
</span><span class='line'>  char e = 'E';
</span><span class='line'>  void (^returnedBlock)() = ^{
</span><span class='line'>    printf("%c\n", e);
</span><span class='line'>  };
</span><span class='line'>  return returnedBlock;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>void example() {
</span><span class='line'>  TestBlock block = getBlock();
</span><span class='line'>  block();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>函数getBlock中声明并赋值的returnedBlock，一开始是在栈上分配的，属于NSStackBlock，如果是non-ARC情况下return这个NSStackBlock，那么其实已经被销毁了，在函数中example()使用时就会crash。如果是ARC情况下，getBlock返回的block会自动copy到堆上，那么block的类型就是NSMallocBlock，可以在example()中继续使用。要在Non-ARC情况下正常运行，那么就应该修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TestBlock getBlock() {
</span><span class='line'>  char e = 'E';
</span><span class='line'>  void (^returnedBlock)() = ^{
</span><span class='line'>    printf("%c\n", e);
</span><span class='line'>  };
</span><span class='line'>  return [[returnedBlock copy] autorelease];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Block中的循环引用问题</h2>

<p>引自：<a href="http://www.hrchen.com/2013/06/retain-cycle-in-block/">Block的引用循环问题 (ARC &amp; non-ARC)</a></p>

<p>扯了这么多，回到Block的循环引用问题，由于我们很多行为会导致Block的copy，而当Block被copy时，会对block中用到的对象产生强引用(ARC下)或者引用计数加一(non-ARC下)。
如果遇到这种情况：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property(nonatomic, readwrite, copy) completionBlock completionBlock;
</span><span class='line'>
</span><span class='line'>//========================================
</span><span class='line'>self.completionBlock = ^ {
</span><span class='line'>        if (self.success) {
</span><span class='line'>            self.success(self.responseData);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>对象有一个Block属性，然而这个Block属性中又引用了对象的其他成员变量，那么就会对这个变量本身产生强应用，那么变量本身和他自己的Block属性就形成了循环引用。在ARC下需要修改成这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property(nonatomic, readwrite, copy) completionBlock completionBlock;
</span><span class='line'>
</span><span class='line'>//========================================
</span><span class='line'>__weak typeof(self) weakSelf = self;
</span><span class='line'>self.completionBlock = ^ {
</span><span class='line'>    if (weakSelf.success) {
</span><span class='line'>        weakSelf.success(weakSelf.responseData);
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>也就是生成一个对自身对象的弱引用，如果是倒霉催的项目还需要支持iOS4.3，就用<strong>unsafe_unretained替代</strong>weak。如果是non-ARC环境下就将<strong>weak替换为</strong>block即可。non-ARC情况下，<strong>block变量的含义是在Block中引入一个新的结构体成员变量指向这个</strong>block变量，那么__block typeof(self) weakSelf = self;就表示Block别再对self对象retain啦，这就打破了循环引用。</p>

<h2>Block为什么不能捕获C语言数组的值</h2>

<p>引自：<a href="http://billwang1990.github.io/blog/2014/02/06/block-cant-capture-c-array/">#iOS# Block为什么不能捕获C语言数组的值</a></p>

<p>众所周知，在iOS的block中，我们可以截获自动变量，但是为什么如下截获C语言数组的代码却不行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const char text[]  = “关注我得博客billwang1990.github.io”；
</span><span class='line'>
</span><span class='line'>void (^block)(void) = ^{
</span><span class='line'>     printf(“%c\n”, text[2]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>要弄清楚这个问题，就必须明白block是怎样实现的。</p>

<p>简单来说，所谓的“截获自动变量”意味着在执行Block语法时，Block语法表达式所使用的自动变量的值被被保存到Block结构体实例(即Block自身)中。</p>

<p>之所以C数组不能截获，就类似下面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void func(char a[10])
</span><span class='line'>{
</span><span class='line'>   char b[10] = a ;
</span><span class='line'>   printf(“%d\n”, b[0]);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>     char a[10] = {2};
</span><span class='line'>     func(a);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这段代码是不能通过编译的，这也解释了为什么Block不能截获C数组。</p>

<p>再分享一篇讲的比较好的文章：<a href="http://blog.csdn.net/jasonblog/article/details/7756763">iOS中block实现的探究</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译iOS上的libevent库、openssl库]]></title>
    <link href="http://saick.net/blog/2014/03/25/bian-yi-iosshang-de-libeventku-%2C-opensslku/"/>
    <updated>2014-03-25T00:05:00+08:00</updated>
    <id>http://saick.net/blog/2014/03/25/bian-yi-iosshang-de-libeventku-,-opensslku</id>
    <content type="html"><![CDATA[<p><a href="http://www.tuicool.com/articles/fmmQzq">http://www.tuicool.com/articles/fmmQzq</a></p>

<p>附上自己使用的环境：</p>

<p><a href="https://www.dropbox.com/s/809g8rhmk7c7pgo/libevent.zip">libevent</a>
<a href="https://www.dropbox.com/s/t2xouoj5h4blwi2/openssl.zip">openssl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能提升-是否缓存图片-imageNamed与imageWithContentsOfFile的区别]]></title>
    <link href="http://saick.net/blog/2014/03/15/xing-neng-ti-sheng-shi-fou-huan-cun-tu-pian-imagenamedyu-imagewithcontentsoffilede-qu-bie/"/>
    <updated>2014-03-15T01:01:00+08:00</updated>
    <id>http://saick.net/blog/2014/03/15/xing-neng-ti-sheng-shi-fou-huan-cun-tu-pian-imagenamedyu-imagewithcontentsoffilede-qu-bie</id>
    <content type="html"><![CDATA[<p>常见的从bundle中加载图片的方式有两种，一个是用<code>imageNamed</code>，二是用<code>imageWithContentsOfFile</code>，第一种比较常见一点。</p>

<p>既然有两种类似的方法来实现相同的目的，那么他们之间的差别是什么呢？</p>

<p><code>imageNamed</code>的优点是当加载时会缓存图片。<code>imageNamed</code>的文档中这么说:
这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象如果它存在的话。如果缓存中没有找到相应的图片，这个方法从指定的文档中加载然后缓存并返回这个对象。</p>

<p>相反的，<code>imageWithContentsOfFile</code>仅加载图片。</p>

<p>下面的代码说明了这两种方法的用法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIImage *img = [UIImage imageNamed:@"myImage"];              // caching
</span><span class='line'>// or
</span><span class='line'>UIImage *img = [UIImage imageWithContentsOfFile:@"myImage"]; // no caching</span></code></pre></td></tr></table></div></figure>


<p>那么我们应该如何选择呢？</p>

<p>如果你要加载一个大图片而且是一次性使用，那么就没必要缓存这个图片，用<code>imageWithContentsOfFile</code>足矣，这样不会浪费内存来缓存它。</p>

<p>然而，在图片反复重用的情况下<code>imageNamed</code>是一个好得多的选择。</p>

<p>更多阅读：<a href="http://blog.jobbole.com/37984/">iOS应用性能调优的25个建议和技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView的常见优化方式总结]]></title>
    <link href="http://saick.net/blog/2014/03/15/uitableviewde-chang-jian-you-hua-fang-shi-zong-jie/"/>
    <updated>2014-03-15T00:07:00+08:00</updated>
    <id>http://saick.net/blog/2014/03/15/uitableviewde-chang-jian-you-hua-fang-shi-zong-jie</id>
    <content type="html"><![CDATA[<p>众所周知，我们在iOS开发过程中与面试中，常见的问题就包括UITableView的滚动性能，足以见得这个功能的重要性。
为了保证table view平滑滚动，确保你采取了以下的措施:</p>

<ul>
<li>正确使用<code>reuseIdentifier</code>来重用cells</li>
<li>尽量使所有的view opaque，包括cell自身</li>
<li>避免渐变，图片缩放，后台选人</li>
<li>缓存行高</li>
<li>如果cell内现实的内容来自web，使用异步加载，缓存请求结果</li>
<li>使用<code>shadowPath</code>来画阴影</li>
<li>减少subviews的数量</li>
<li>尽量不适用<code>cellForRowAtIndexPath:</code>，如果你需要用到它，只用一次然后缓存结果</li>
<li>使用正确的数据结构来存储数据</li>
<li>使用<code>rowHeight</code>, <code>sectionFooterHeight</code> 和 <code>sectionHeaderHeight</code>来设定固定的高，不要请求delegate</li>
</ul>


<p>更多阅读：<a href="http://blog.jobbole.com/37984/">iOS应用性能调优的25个建议和技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找最大的坑]]></title>
    <link href="http://saick.net/blog/2014/03/06/er-fen-cha-zhao-zui-da-de-keng/"/>
    <updated>2014-03-06T00:35:00+08:00</updated>
    <id>http://saick.net/blog/2014/03/06/er-fen-cha-zhao-zui-da-de-keng</id>
    <content type="html"><![CDATA[<p>二分法大家都不陌生，每当找工作面试都得看看，被问几遍。但最近从大神那儿了解到这里面最大的坑，写出来让更多的人能受益。</p>

<!-- more -->


<p>先贴上很久前对着算法导论上写的算法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int compare(int x, int y) {
</span><span class='line'>  return (x &gt; y ? 1 : (x == y ? 0 : -1));
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int binary_search(int list[], int nFind, int nLeft, int nRight) {
</span><span class='line'>  int nMiddle = 0;
</span><span class='line'>//    while (nLeft &lt;= nRight) {
</span><span class='line'>  if (nLeft &lt;= nRight) {
</span><span class='line'>      nMiddle =  (nLeft + nRight)/2;
</span><span class='line'>      switch (compare(list[nMiddle], nFind)) {
</span><span class='line'>          case 0:
</span><span class='line'>              {
</span><span class='line'>                  return nMiddle;
</span><span class='line'>              }
</span><span class='line'>              break;
</span><span class='line'>          case -1:
</span><span class='line'>              {
</span><span class='line'>          //      nLeft = nMiddle + 1;
</span><span class='line'>                  return binary_search(list, nFind, nMiddle+1, nRight);
</span><span class='line'>              }
</span><span class='line'>              break;
</span><span class='line'>          case 1:
</span><span class='line'>              {
</span><span class='line'>          //      nRight = nMiddle - 1;
</span><span class='line'>                  return binary_search(list, nFind, nLeft, nMiddle-1);
</span><span class='line'>              }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>正常的写法，递归的都有了。</p>

<p>一直这么写，没觉得哪有啥不对。 再仔细看看？？</p>

<p><code>nMiddle =  (nLeft + nRight)/2;</code></p>

<p>看出来了么？
还没有？</p>

<p>引用：<a href="http://blog.csdn.net/gangbo_5958196/article/details/9135167">http://blog.csdn.net/gangbo_5958196/article/details/9135167</a></p>

<p>这是一个经典的话题，如何计算二分查找中的中值？试卷中，大家一般给出了两种计算方法：</p>

<ul>
<li>算法一： mid = (low + high) / 2</li>
<li>算法二： mid = low + (high – low)/2</li>
</ul>


<p>乍看起来，算法一简洁，算法二提取之后，跟算法一没有什么区别。但是实际上，区别是存在的。算法一的做法，在极端情况下，(low + high)存在着溢出的风险，进而得到错误的mid结果，导致程序错误。而算法二能够保证计算出来的mid，一定大于low，小于high，不存在溢出的问题。
回到数据库二分查找，数据库的一个索引页面(大小一般是8k或者是16k)，能够存储的索引记录是有限的，因此肯定不会出现(low + high)溢出的风险。这也是为什么InnoDB中的中值，采用的就是算法一的实现。但是，作为一个严谨的程序设计人员，还是推荐使用算法二，将任何潜在的风险，扼杀于摇篮之中。</p>

<p><strong>所以</strong>，正确的写法应该是<code>mid = low + (high – low)/2</code>或 <code>mid = low + (high – low)&gt;&gt;1</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD的坑]]></title>
    <link href="http://saick.net/blog/2014/02/19/gcdde-keng/"/>
    <updated>2014-02-19T22:22:00+08:00</updated>
    <id>http://saick.net/blog/2014/02/19/gcdde-keng</id>
    <content type="html"><![CDATA[<p>最近用不少GCD的东西，相信很多童鞋也会被GCD的简便给吸引过来。
但是这玩意使用起来，还是有不少的坑，列举出来，希望能对遇到的有用。</p>

<!-- more -->


<p>大多数时间没啥事，但是有时这样使用，就会带来问题了。见测试代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>  
</span><span class='line'>    for (int i=0; i&lt;=100; i++) {
</span><span class='line'>//    for (int i=0; i&lt;=62; i++) {
</span><span class='line'>      dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>        NSString *key = [NSString stringWithFormat:@"key%d", i];
</span><span class='line'>        NSMutableDictionary *value = [NSMutableDictionary dictionary];
</span><span class='line'>        for (int j=0; j&lt;1/*10000*/; j++) {
</span><span class='line'>          NSString *subKey = [NSString stringWithFormat:@"subkey%d", j];
</span><span class='line'>          int random = arc4random();
</span><span class='line'>          [value setObject:[NSString stringWithFormat:@"%d", random] forKey:subKey];
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>//        int j=100;
</span><span class='line'>//        while (--j&gt;0) {
</span><span class='line'>//          dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>//            NSLog(@"sub");
</span><span class='line'>//          });
</span><span class='line'>//        }
</span><span class='line'>        
</span><span class='line'>//        [[TMCache sharedCache] setObject:value forKey:key];
</span><span class='line'>        
</span><span class='line'>        [[TMCache sharedCache] setObject:value forKey:key block:NULL];
</span><span class='line'>        
</span><span class='line'>//        TMDiskCache *cache = [[TMDiskCache alloc] initWithName:@"test.diskCache"];
</span><span class='line'>//        [cache setObject:value forKey:key block:NULL];
</span><span class='line'>        
</span><span class='line'>        NSLog(@"%@", key);
</span><span class='line'>      });
</span><span class='line'>    }
</span><span class='line'>  
</span><span class='line'>//  });</span></code></pre></td></tr></table></div></figure>


<p><em>TMCache setObject:forKey:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setObject:(id &lt;NSCoding&gt;)object forKey:(NSString *)key
</span><span class='line'>{
</span><span class='line'>    if (!object || !key)
</span><span class='line'>        return;
</span><span class='line'>    
</span><span class='line'>    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
</span><span class='line'>
</span><span class='line'>    [self setObject:object forKey:key block:^(TMCache *cache, NSString *key, id object) {
</span><span class='line'>        dispatch_semaphore_signal(semaphore);
</span><span class='line'>    }];
</span><span class='line'>
</span><span class='line'>    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);
</span><span class='line'>
</span><span class='line'>    #if !OS_OBJECT_USE_OBJC
</span><span class='line'>    dispatch_release(semaphore);
</span><span class='line'>    #endif
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>TMDiskCache 定义</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//#if __IPHONE_OS_VERSION_MIN_REQUIRED &gt;= __IPHONE_4_0 //这个是默认值
</span><span class='line'>#if 0
</span><span class='line'>    #define TMCacheStartBackgroundTask() UIBackgroundTaskIdentifier taskID = UIBackgroundTaskInvalid; \
</span><span class='line'>            taskID = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{ \
</span><span class='line'>            [[UIApplication sharedApplication] endBackgroundTask:taskID]; }];
</span><span class='line'>    #define TMCacheEndBackgroundTask() [[UIApplication sharedApplication] endBackgroundTask:taskID];
</span><span class='line'>#else
</span><span class='line'>    #define TMCacheStartBackgroundTask()
</span><span class='line'>    #define TMCacheEndBackgroundTask()
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p><em>TMDiskCache 使用</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setObject:(id &lt;NSCoding&gt;)object forKey:(NSString *)key block:(TMDiskCacheObjectBlock)block
</span><span class='line'>{
</span><span class='line'>    NSDate *now = [[NSDate alloc] init];
</span><span class='line'>
</span><span class='line'>    if (!key || !object)
</span><span class='line'>        return;
</span><span class='line'>
</span><span class='line'>    TMCacheStartBackgroundTask();
</span><span class='line'>
</span><span class='line'>    __weak TMDiskCache *weakSelf = self;
</span><span class='line'>
</span><span class='line'>    dispatch_async(_queue, ^{
</span><span class='line'>        TMDiskCache *strongSelf = weakSelf;
</span><span class='line'>        if (!strongSelf) {
</span><span class='line'>            TMCacheEndBackgroundTask();
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>      ...
</span><span class='line'>     
</span><span class='line'>        TMCacheEndBackgroundTask();
</span><span class='line'>    });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样一个for循环，次数超过63就卡死了，啥也执行不了。
还有，如果关掉<code>TMCacheStartBackgroundTask</code>，并且不使用<code>dispatch_semaphore_t</code>做异步转同步的处理（直接使用<code>[[TMCache sharedCache] setObject:value forKey:key block:NULL];</code>），就没啥问题了。</p>

<p>看详情，跑数据的在此<a href="https://www.dropbox.com/s/59kdkfc3sm2gx1q/test_GCD.zip">下载测试工程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C&amp;XCode注释的正确写法]]></title>
    <link href="http://saick.net/blog/2014/02/07/objective-c-and-xcodezhu-shi-de-zheng-que-xie-fa/"/>
    <updated>2014-02-07T18:02:00+08:00</updated>
    <id>http://saick.net/blog/2014/02/07/objective-c-and-xcodezhu-shi-de-zheng-que-xie-fa</id>
    <content type="html"><![CDATA[<p>注释对于C体系的同学来说还是不太规范，对于XCode的文档系统来说，规范还是有帮助的，能在QuickHelp等提示中反应出来。所以还是多注意下会比较好。</p>

<p>推荐以下两种写法(主是方法注释，其它的以后遇到再补充吧)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *    @brief update table
</span><span class='line'> *
</span><span class='line'> *    @param  model   you want to update the entity
</span><span class='line'> *    @param  where   can use NSString or NSDictionary or nil
</span><span class='line'>                    when "where" is nil : update the value based on rowid column or primary key column
</span><span class='line'> *
</span><span class='line'> *    @return the updated was successful
</span><span class='line'> */
</span><span class='line'>-(BOOL)updateToDB:(NSObject *)model where:(id)where;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> @brief   每个Section的高度，默认为 0
</span><span class='line'> @param   niDropDown: NIDropDown，用于区分不同的NI
</span><span class='line'> @param   indexPath:  定位Section
</span><span class='line'> @return  高度
</span><span class='line'> */
</span><span class='line'>- (CGFloat)niDropDown:(NIDropDown *)niDropDown heightForHeaderInSection:(NSInteger)section;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中签名相关-MD5-sha1-10进制与16进制互转]]></title>
    <link href="http://saick.net/blog/2014/01/21/ioszhong-qian-ming-xiang-guan-md5-sha1-10jin-zhi-yu-16jin-zhi-hu-zhuan/"/>
    <updated>2014-01-21T21:32:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/21/ioszhong-qian-ming-xiang-guan-md5-sha1-10jin-zhi-yu-16jin-zhi-hu-zhuan</id>
    <content type="html"><![CDATA[<p>费话少说，直接上代码</p>

<h4>md5, sha1</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSString *)md5:(NSString *)str
</span><span class='line'>{
</span><span class='line'>  if ([str length] == 0)
</span><span class='line'>    return @"";
</span><span class='line'>  
</span><span class='line'>  unsigned char result[CC_MD5_DIGEST_LENGTH];
</span><span class='line'>  CC_MD5([str UTF8String], (CC_LONG)strlen([str UTF8String]) , result);
</span><span class='line'>  NSMutableString *digest = [NSMutableString string];
</span><span class='line'>  for (int i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++)
</span><span class='line'>    [digest appendFormat:@"%02X", result[i]];
</span><span class='line'>  return [digest lowercaseString];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (NSString *)sha1:(NSString *)input
</span><span class='line'>{
</span><span class='line'>  if ([input length] == 0)
</span><span class='line'>    return @"";
</span><span class='line'>  
</span><span class='line'>  const char *cstr = [input cStringUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>  NSData *data = [NSData dataWithBytes:cstr length:input.length];
</span><span class='line'>  
</span><span class='line'>  uint8_t digest[CC_SHA1_DIGEST_LENGTH];
</span><span class='line'>  
</span><span class='line'>  CC_SHA1(data.bytes, data.length, digest);
</span><span class='line'>  
</span><span class='line'>  NSMutableString *output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];
</span><span class='line'>  
</span><span class='line'>  for(int i=0; i&lt;CC_SHA1_DIGEST_LENGTH; i++) {
</span><span class='line'>    [output appendFormat:@"%02X", digest[i]];
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return output;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>10进制转16进制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *num16Str = [NSString stringWithFormat:@"%x", numBase10];</span></code></pre></td></tr></table></div></figure>


<h4>16进制转10进制</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *num10Str = [NSString stringWithFormat:@"%d", strtoul([numBase16 UTF8String], 0, 16)]; </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 UI兼容 导航栏按钮边框 UINavigationItem left and right padding]]></title>
    <link href="http://saick.net/blog/2014/01/20/ios7-uijian-rong-dao-hang-lan-an-niu-bian-kuang-uinavigationitem-left-and-right-padding/"/>
    <updated>2014-01-20T23:16:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/20/ios7-uijian-rong-dao-hang-lan-an-niu-bian-kuang-uinavigationitem-left-and-right-padding</id>
    <content type="html"><![CDATA[<p>iOS7之前的UI为：</p>

<iframe src="https://www.flickr.com/photos/shjborage/12052252814/player/120d793b08" height="44" width="324"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>而在iOS7中，由于设计方面的原因，使得UI变为:</p>

<iframe src="https://www.flickr.com/photos/shjborage/12052149003/player/bb36320bc9" height="44" width="322"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<!-- more -->


<p>修改的方法重写UINavigationItem的setLeftBarButtonItem和setRightBarButtonItem方法，使之与之前版本兼容；</p>

<p>代码如下：</p>

<p><em>UINavigationItem+margin.h</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  UINavigationItem+margin.h
</span><span class='line'>//
</span><span class='line'>//  Created by shjborage on 1/20/14.
</span><span class='line'>//  Copyright (c) 2014 Saick. All rights reserved.
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>
</span><span class='line'>@interface UINavigationItem (margin)
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p><em>UINavigationItem+margin.m</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  UINavigationItem+margin.m
</span><span class='line'>//
</span><span class='line'>//  Created by shjborage on 1/20/14.
</span><span class='line'>//  Copyright (c) 2014 Saick. All rights reserved.
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>#import "UINavigationItem+margin.h"
</span><span class='line'>
</span><span class='line'>@implementation UINavigationItem (margin)
</span><span class='line'>
</span><span class='line'>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_6_1
</span><span class='line'>
</span><span class='line'>- (void)setLeftBarButtonItem:(UIBarButtonItem *)_leftBarButtonItem
</span><span class='line'>{
</span><span class='line'>  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>    negativeSeperator.width = -10.0f;
</span><span class='line'>    
</span><span class='line'>    if (_leftBarButtonItem) {
</span><span class='line'>      [self setLeftBarButtonItems:@[negativeSeperator, _leftBarButtonItem]];
</span><span class='line'>    } else {
</span><span class='line'>      [self setLeftBarButtonItems:@[negativeSeperator]];
</span><span class='line'>    }
</span><span class='line'>  } else {
</span><span class='line'>    [self setLeftBarButtonItem:_leftBarButtonItem animated:NO];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//- (void)setLeftBarButtonItems:(NSArray *)leftBarButtonItems
</span><span class='line'>//{
</span><span class='line'>//  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>//    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>//    negativeSeperator.width = -10.0f;
</span><span class='line'>//    
</span><span class='line'>//    if ([_leftBarButtonItems count] &gt; 0) {
</span><span class='line'>//      NSMutableArray *items = [NSMutableArray arrayWithArray:leftBarButtonItems];
</span><span class='line'>//      [items insertObject:negativeSeperator atIndex:0];
</span><span class='line'>//      [self setLeftBarButtonItems:items animated:NO];
</span><span class='line'>//    } else {
</span><span class='line'>//      [self setLeftBarButtonItems:leftBarButtonItems animated:NO];
</span><span class='line'>//    }
</span><span class='line'>//  } else {
</span><span class='line'>//    [self setLeftBarButtonItems:leftBarButtonItems animated:NO];
</span><span class='line'>//  }
</span><span class='line'>//}
</span><span class='line'>
</span><span class='line'>- (void)setRightBarButtonItem:(UIBarButtonItem *)_rightBarButtonItem
</span><span class='line'>{
</span><span class='line'>  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>    negativeSeperator.width = -10.0f;
</span><span class='line'>    
</span><span class='line'>    if (_rightBarButtonItem) {
</span><span class='line'>      [self setRightBarButtonItems:@[negativeSeperator, _rightBarButtonItem]];
</span><span class='line'>    } else {
</span><span class='line'>      [self setRightBarButtonItems:@[negativeSeperator]];
</span><span class='line'>    }
</span><span class='line'>  } else {
</span><span class='line'>    [self setRightBarButtonItem:_rightBarButtonItem animated:NO];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//- (void)setRightBarButtonItems:(NSArray *)rightBarButtonItems
</span><span class='line'>//{
</span><span class='line'>//  if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7.0) {
</span><span class='line'>//    UIBarButtonItem *negativeSeperator = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];
</span><span class='line'>//    negativeSeperator.width = -10.0f;
</span><span class='line'>//    
</span><span class='line'>//    if ([_leftBarButtonItems count] &gt; 0) {
</span><span class='line'>//      NSMutableArray *items = [NSMutableArray arrayWithArray:rightBarButtonItems];
</span><span class='line'>//      [items insertObject:negativeSeperator atIndex:0];
</span><span class='line'>//      [self setRightBarButtonItems:items animated:NO];
</span><span class='line'>//    } else {
</span><span class='line'>//      [self setRightBarButtonItems:rightBarButtonItems animated:NO];
</span><span class='line'>//    }
</span><span class='line'>//  } else {
</span><span class='line'>//    [self setRightBarButtonItems:rightBarButtonItems animated:NO];
</span><span class='line'>//  }
</span><span class='line'>//}
</span><span class='line'>
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>项目源码不做任何修改，问题解决；</p>

<p>添加Button：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIBarButtonItem *leftBarItem = [[UIBarButtonItem alloc] initWithCustomView:btnBack];
</span><span class='line'>self.navigationItem.leftBarButtonItem = leftBarItem;
</span><span class='line'>[leftBarItem release];</span></code></pre></td></tr></table></div></figure>


<p>如果原来项目中有使用<code>self.navigationItem.leftBarButtonItems</code>或<code>self.navigationItem.rightBarButtonItems</code>可参考注释部分内容。如果都是多个的，那么直接换把注释解开，把单个的给注释掉。<strong>搞懂原理才是重要的</strong></p>

<p><a href="http://www.cnblogs.com/maxfong/p/3375167.html">原文地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS客户端的gzip处理-gzip-ungzip]]></title>
    <link href="http://saick.net/blog/2014/01/20/ioske-hu-duan-de-gzipchu-li-gzip-ungzip/"/>
    <updated>2014-01-20T20:28:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/20/ioske-hu-duan-de-gzipchu-li-gzip-ungzip</id>
    <content type="html"><![CDATA[<p>服务端使用gzip压缩，可以大幅度减小传输包的体积，加快客户端网络请求速度，为用户节省流量。当服务器返回的httpHeader的&#8221;Content-Encoding&#8221; 属性的值是gzip时，数据会自动被解压缩，但有时候在客户端还没拿到数据的时候，就已经被某些网关解压了，这样gzip就没有起到作用。因此可以约定其他策略，防止网关解压，例如在别的头属性中标记gzip。</p>

<!-- more -->


<p>如此，就需要我们自己来解压gzip数据。方法如下：添加framework库中的libbz2.1.0.dylib；</p>

<p>添加以下静态方法：</p>

<h4>gzip解压：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSData *)ungzipData:(NSData *)compressedData
</span><span class='line'>{
</span><span class='line'>  if ([compressedData length] == 0)
</span><span class='line'>    return compressedData;
</span><span class='line'>  
</span><span class='line'>  unsigned full_length = [compressedData length];
</span><span class='line'>  unsigned half_length = [compressedData length] / 2;
</span><span class='line'>  
</span><span class='line'>  NSMutableData *decompressed = [NSMutableData dataWithLength: full_length + half_length];
</span><span class='line'>  BOOL done = NO;
</span><span class='line'>  int status;
</span><span class='line'>  
</span><span class='line'>  z_stream strm;
</span><span class='line'>  strm.next_in = (Bytef *)[compressedData bytes];
</span><span class='line'>  strm.avail_in = [compressedData length];
</span><span class='line'>  strm.total_out = 0;
</span><span class='line'>  strm.zalloc = Z_NULL;
</span><span class='line'>  strm.zfree = Z_NULL;
</span><span class='line'>  if (inflateInit2(&strm, (15+32)) != Z_OK)
</span><span class='line'>    return nil;
</span><span class='line'>  
</span><span class='line'>  while (!done) {
</span><span class='line'>    // Make sure we have enough room and reset the lengths.
</span><span class='line'>    if (strm.total_out &gt;= [decompressed length]) {
</span><span class='line'>      [decompressed increaseLengthBy: half_length];
</span><span class='line'>    }
</span><span class='line'>    strm.next_out = [decompressed mutableBytes] + strm.total_out;
</span><span class='line'>    strm.avail_out = [decompressed length] - strm.total_out;
</span><span class='line'>    // Inflate another chunk.
</span><span class='line'>    status = inflate (&strm, Z_SYNC_FLUSH);
</span><span class='line'>    if (status == Z_STREAM_END) {
</span><span class='line'>      done = YES;
</span><span class='line'>    } else if (status != Z_OK) {
</span><span class='line'>      break;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  if (inflateEnd (&strm) != Z_OK)
</span><span class='line'>    return nil;
</span><span class='line'>  // Set real length.
</span><span class='line'>  if (done) {
</span><span class='line'>    [decompressed setLength: strm.total_out];
</span><span class='line'>    return [NSData dataWithData: decompressed];
</span><span class='line'>  }
</span><span class='line'>  return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4><em>顺便附上gzip压缩：</em></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSData*)gzipData:(NSData*)pUncompressedData
</span><span class='line'>{
</span><span class='line'>  if (!pUncompressedData || [pUncompressedData length] == 0)
</span><span class='line'>  {
</span><span class='line'>    NSLog(@"%s: Error: Can't compress an empty or null NSData object.", __func__);
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  z_stream zlibStreamStruct;
</span><span class='line'>  zlibStreamStruct.zalloc    = Z_NULL; // Set zalloc, zfree, and opaque to Z_NULL so
</span><span class='line'>  zlibStreamStruct.zfree     = Z_NULL; // that when we call deflateInit2 they will be
</span><span class='line'>  zlibStreamStruct.opaque    = Z_NULL; // updated to use default allocation functions.
</span><span class='line'>  zlibStreamStruct.total_out = 0; // Total number of output bytes produced so far
</span><span class='line'>  zlibStreamStruct.next_in   = (Bytef*)[pUncompressedData bytes]; // Pointer to input bytes
</span><span class='line'>  zlibStreamStruct.avail_in  = [pUncompressedData length]; // Number of input bytes left to process
</span><span class='line'>  
</span><span class='line'>  int initError = deflateInit2(&zlibStreamStruct, Z_DEFAULT_COMPRESSION, Z_DEFLATED, (15+16), 8, Z_DEFAULT_STRATEGY);
</span><span class='line'>  if (initError != Z_OK)
</span><span class='line'>  {
</span><span class='line'>    NSString *errorMsg = nil;
</span><span class='line'>    switch (initError)
</span><span class='line'>    {
</span><span class='line'>      case Z_STREAM_ERROR:
</span><span class='line'>        errorMsg = @"Invalid parameter passed in to function.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_MEM_ERROR:
</span><span class='line'>        errorMsg = @"Insufficient memory.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_VERSION_ERROR:
</span><span class='line'>        errorMsg = @"The version of zlib.h and the version of the library linked do not match.";
</span><span class='line'>        break;
</span><span class='line'>      default:
</span><span class='line'>        errorMsg = @"Unknown error code.";
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>    NSLog(@"%s: deflateInit2() Error: \"%@\" Message: \"%s\"", __func__, errorMsg, zlibStreamStruct.msg);
</span><span class='line'>
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  // Create output memory buffer for compressed data. The zlib documentation states that
</span><span class='line'>  // destination buffer size must be at least 0.1% larger than avail_in plus 12 bytes.
</span><span class='line'>  NSMutableData *compressedData = [NSMutableData dataWithLength:[pUncompressedData length] * 1.01 + 12];
</span><span class='line'>  
</span><span class='line'>  int deflateStatus;
</span><span class='line'>  do
</span><span class='line'>  {
</span><span class='line'>    // Store location where next byte should be put in next_out
</span><span class='line'>    zlibStreamStruct.next_out = [compressedData mutableBytes] + zlibStreamStruct.total_out;
</span><span class='line'>    
</span><span class='line'>    // Calculate the amount of remaining free space in the output buffer
</span><span class='line'>    // by subtracting the number of bytes that have been written so far
</span><span class='line'>    // from the buffer's total capacity
</span><span class='line'>    zlibStreamStruct.avail_out = [compressedData length] - zlibStreamStruct.total_out;
</span><span class='line'>    deflateStatus = deflate(&zlibStreamStruct, Z_FINISH);
</span><span class='line'>    
</span><span class='line'>  } while ( deflateStatus == Z_OK );
</span><span class='line'>  
</span><span class='line'>  // Check for zlib error and convert code to usable error message if appropriate
</span><span class='line'>  if (deflateStatus != Z_STREAM_END)
</span><span class='line'>  {
</span><span class='line'>    NSString *errorMsg = nil;
</span><span class='line'>    switch (deflateStatus)
</span><span class='line'>    {
</span><span class='line'>      case Z_ERRNO:
</span><span class='line'>        errorMsg = @"Error occured while reading file.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_STREAM_ERROR:
</span><span class='line'>        errorMsg = @"The stream state was inconsistent (e.g., next_in or next_out was NULL).";
</span><span class='line'>        break;
</span><span class='line'>      case Z_DATA_ERROR:
</span><span class='line'>        errorMsg = @"The deflate data was invalid or incomplete.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_MEM_ERROR:
</span><span class='line'>        errorMsg = @"Memory could not be allocated for processing.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_BUF_ERROR:
</span><span class='line'>        errorMsg = @"Ran out of output buffer for writing compressed bytes.";
</span><span class='line'>        break;
</span><span class='line'>      case Z_VERSION_ERROR:
</span><span class='line'>        errorMsg = @"The version of zlib.h and the version of the library linked do not match.";
</span><span class='line'>        break;
</span><span class='line'>      default:
</span><span class='line'>        errorMsg = @"Unknown error code.";
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>    DDLogError(@"%s: zlib error while attempting compression: \"%@\" Message: \"%s\"", __func__, errorMsg, zlibStreamStruct.msg);
</span><span class='line'>
</span><span class='line'>    // Free data structures that were dynamically created for the stream.
</span><span class='line'>    deflateEnd(&zlibStreamStruct);
</span><span class='line'>    
</span><span class='line'>    return nil;
</span><span class='line'>  }
</span><span class='line'>  // Free data structures that were dynamically created for the stream.
</span><span class='line'>  deflateEnd(&zlibStreamStruct);
</span><span class='line'>  [compressedData setLength: zlibStreamStruct.total_out];
</span><span class='line'>  DDLogInfo(@"%s: Compressed file from %d KB to %d KB", __func__, [pUncompressedData length]/1024, [compressedData length]/1024);
</span><span class='line'>  
</span><span class='line'>  return compressedData;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout by Example]]></title>
    <link href="http://saick.net/blog/2014/01/18/auto-layout-by-example/"/>
    <updated>2014-01-18T16:21:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/18/auto-layout-by-example</id>
    <content type="html"><![CDATA[<p>Autolayout 博大精深，以前转过一篇，可是用的时候还是不会用。没办法只能看苹果官方的文档，发现除了讲基本的使用（XCode5中的一些操作已不太一样）外，还有这么个例子，主要解决了屏幕大小不同适配的问题，真是不错。摘录下来，希望对大家有用。</p>

<p>如果某个地方看不明白可以留言给我，我翻译并给大家讲。</p>

<p>ScrollView这块我暂时没有用，没细看，下面Size适配那个我试了，并且写了Demo，大家感兴趣下文下载研究。</p>

<p>Auto Layout makes it easy to solve many complex layout problems automatically, without the need for manual view manipulation. By creating the right combination of constraints, you can create layouts that are traditionally difficult to manage in code, such as equally spaced views that adjust to changes in orientation or size, elements inside scroll views that affect the size of the scrolling content, or elements inside scroll views that don’t scroll with the rest of the contents.</p>

<!-- more -->


<h3>Using Scroll Views with Auto Layout</h3>

<p>When you are creating an app using Auto Layout, scroll views can present a unique challenge. The size of the scrolling content must be set correctly so that the user can scroll through all of the available content, for example, and if you need to lock a contextual view in place on top of a scroll view, such as the scale and legend for a map, it’s difficult to ensure that the element doesn’t scroll with the rest of the content.</p>

<h4>Controlling Scroll View Content Size</h4>

<p>The size of the content inside of a scroll view is determined by the constraints of its descendants.</p>

<p><em>To set the size of a scroll view</em></p>

<ul>
<li>Create the scroll view.</li>
<li>Place the UI element inside it.</li>
<li>Create constraints that fully define the width and height of the scroll view content.</li>
</ul>


<p>You must make sure you create constraints for all the subviews inside a scroll view. For example, when defining the constraints for a view that doesn’t have an intrinsic content size, you’ll need more than just a leading edge constraint—you must also create trailing edge, width, and height constraints. There cannot be any missing constraints, starting from one edge of the scroll view to the other.</p>

<h4>Creating Anchored Views Inside a Scroll View</h4>

<p>You may find you want to create an area inside a scroll view that doesn’t move when a user scrolls the contents of the scroll view. You accomplish this by using a separate <strong>container view</strong>.</p>

<p><em>To lock a view inside a scroll view</em>
*   Create a container view to hold the scroll view.
*   Create the scroll view and place it in the container view with all edges equal to zero points.
*   Create and place a subview inside of the scroll view.
*   Create constraints from the subview to the container view.</p>

<p>The following example uses the steps in the above task to show how to position a text view inside of a scroll view. In this example, the text view stays at the bottom of the scroll view and doesn’t move when the scroll view contents are moved.</p>

<p>First, create the container view that will contain the scroll view. Set the size of the container view equal to the desired size of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008276023/player/b1ddbeff09" height="500" width="291"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After the container view is created, create a scroll view and place it inside of the container view. Resize the scroll view so that all of the edges are flush with the container view’s edges, by setting the distance to 0.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810786/player/1202126aa8" height="500" width="290"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create another view and place it inside of the scroll view. In this example, a text view is placed inside of the scroll view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999315/player/ddc38c3ea6" height="500" width="288"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>After placing the text view, create constraints from the text view to the container view. Creating constraints that anchor the text view to the container view (skipping the scroll view) anchors the text view relative to the container view, which ensures that the scroll view won’t scroll the text view.</p>

<p>To create a constraint that crosses multiple views in the view hierarchy, it is generally easier to Control-drag from the view to the container view in the Interface Builder outline view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810736/player/e32e620ff4" height="298" width="270"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In the constraint overlay that appears, set the required constraints for the view.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275923/player/194c48615c" height="273" width="158"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>In this example, constraints are created from the leading, trailing, and bottom edges of the text view to the container view. The height of the text view is also constrained.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008810686/player/bdc0cae834" height="500" width="287"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>The following two figures show the app in iOS Simulator, both in normal and landscape positions. The text view is constrained at the bottom of the scroll view and doesn’t move as the scroll view is moved.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12007999185/player/a051895080" height="296" width="495"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12007999135/player/4f87b36fa7" height="495" width="296"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>Spacing and Wrapping</h3>

<p>Auto Layout provides several techniques for automatically spacing views and resizing items based on their content. The following sections describe how to create constraints that keep visible views proportionally spaced based on the orientation of the device.</p>

<h4>Creating Equal Spacing Between Views</h4>

<p>To lay out several views that are proportionally spaced based on the orientation of a device, create spacer views between the visible views. Set the constraints of these spacer views correctly to ensure that the visible views are able to stay spaced apart based on the orientation of the device.</p>

<p><em>To space views proportionally</em>
*   Create the visible views.
*   Create the spacer views equal to the number of visible views plus one.
*   Alternate placing your views, starting with a spacer view.</p>

<pre><code>To space two visible views, place all of the views in the following pattern, starting from the left side of the screen and moving right:
</code></pre>

<p><code>spacer1 | view1 | spacer2 | view2 | spacer3.</code></p>

<ul>
<li>Constrain the spacer views so that their lengths are equal to each other.</li>
</ul>


<p><code>
Note: The height of the spacer views can be any value, including 0. However, you must create constraints for the height of the views—don’t leave the height ambiguous.
Create a leading constraint from the first spacer view to the container view.
</code></p>

<ul>
<li>Create a trailing constraint from the last spacer view to the container view.</li>
<li>Create constraints between the spacer views and the visible views.</li>
</ul>


<p><code>
Note: When spacing views vertically, start from the top of the screen and place each view below the previous view. Set the heights of the spacer views equal to each other.
The following example uses the steps in the above task to show how to position two views proportionally spaced. The spacer views are annotated for the example, but are normally left empty with no background. First, create the two views and place them in the storyboard.
</code></p>

<iframe src="https://www.flickr.com/photos/shjborage/12008351964/player/6cff17637e" height="310" width="236"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Add the three spacer views—one to the left of the leftmost view, one between the two views, and one to the right of the rightmost view. The spacer views don’t have to be the same size at this time because their size will be set through constraints.</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275823/player/bdda53d7d0" height="310" width="235"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>Create the following constraints for the spacer views:</p>

<ul>
<li>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1.</li>
<li>Constrain the width of spacer view 1 to be greater than or equal to the minimum desired width.</li>
<li>Create a Leading Space to Container constraint from spacer view 1 to the container.</li>
<li>Create a Horizontal Spacing constraint from spacer view 1 to view 1. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create Horizontal Spacing constraints from spacer view 2 to view 1 and view 2. Set these constraints to be a less-than-or-equal-to constraint with a priority of 999.</li>
<li>Create a Horizontal Spacing constraint from spacer view 3 to view 2. Set this constraint to be a less-than-or-equal-to constraint with a priority of 1000.</li>
<li>Create a Trailing Space to Container constraint from spacer view 3 to the container.</li>
</ul>


<p>These constraints create two visible views and three invisible views (spacer views). These spacer views automatically resize as the orientation of the device changes, keeping the visible views proportionally spaced, as shown in the following two figures:</p>

<iframe src="https://www.flickr.com/photos/shjborage/12008275833/player/7290ca4711" height="337" width="261"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="https://www.flickr.com/photos/shjborage/12008351904/player/a2b7a82a10" height="261" width="337"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p><a href="https://www.dropbox.com/s/23vrbep9khfyvb6/AutoLayoutDemo.zip">Demo</a></p>

<h3>Animating Changes Made by Auto Layout</h3>

<p>If you need full control over animating changes made by Auto Layout, you must make your constraint changes programmatically. The basic concept is the same for both iOS and OS X, but there are a few minor differences.</p>

<p>In an iOS app, your code would look something like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[containerView layoutSubtreeIfNeeded]; // Ensures that all pending layout operations have been completed
</span><span class='line'>[UIView animateWithDuration:1.0 animations:^{
</span><span class='line'>     // Make all constraint changes here
</span><span class='line'>     [containerView layoutSubtreeIfNeeded]; // Forces the layout of the subtree animation block and then captures all of the frame changes
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>In OS X, use the following code when using layer-backed animations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[containterView layoutIfNeeded];
</span><span class='line'>NSAnimationContext runAnimationGroup:^(NSAnimationContext *context) {
</span><span class='line'>     [context setAllowsImplicitAnimation: YES];
</span><span class='line'>     // Make all constraint changes here
</span><span class='line'>     [containerView layoutIfNeeded];
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>When you aren’t using layer-backed animations, you must animate the constant using the constraint’s animator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[constraint animator] setConstant:42];</span></code></pre></td></tr></table></div></figure>


<h3>个人总结</h3>

<ol>
<li>所有相关Contraints都加好后再自动让XCode补全，或者干脆在没问题的时候忽略警告</li>
<li><code>Constrain the width of spacer view 2 and spacer view 3 to be equal to the width of spacer view 1</code>. 这意思是让三个视频的width相等，并不是给他们三个都加上width的Contraints。</li>
<li>最后是在3.5寸屏幕下开发，再适应4寸，这样直接拉开。（在开发时，点那个大小切换那个可能会带来Contraints警告，要小心。不行就Commond+Z）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iOS报错libc++abi.dylib handler threw exception]]></title>
    <link href="http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception/"/>
    <updated>2014-01-03T23:57:00+08:00</updated>
    <id>http://saick.net/blog/2014/01/03/jie-jue-iosbao-cuo-libc-plus-plus-abi-dot-dylib-handler-threw-exception</id>
    <content type="html"><![CDATA[<p>这个错有时很奇怪，有时比较正常的情况也会报这个，可能与XCode版本有关。
下文列举一些情况吧</p>

<!-- more -->


<h3>可能引起的情况</h3>

<ul>
<li>如果是多语言的话，要查看xib是否支持改语言～就是要在xib里面的Localiztion选项里面检查。（至少xcode4.5里面是这样的，或许对someone 有帮助）</li>
<li>因为子类需要横屏，父类没设置横屏，所以爆出异常来。Supported orientations has no common orientation with the application, and shouldAutorotate is returning YES</li>
<li>@｛｝ 语法糖，数据出错后也会报这个错</li>
<li>数据越界</li>
</ul>


<h3>定位异常的方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@try {  
</span><span class='line'>}  
</span><span class='line'>@catch(NSException *exception) {  
</span><span class='line'>  NSLog(@"exception:%@", exception);  
</span><span class='line'>}
</span><span class='line'>@finally {            
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SDK Manager更新检测失败解决]]></title>
    <link href="http://saick.net/blog/2013/12/31/android-sdk-managergeng-xin-jian-ce-shi-bai-jie-jue/"/>
    <updated>2013-12-31T13:39:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/31/android-sdk-managergeng-xin-jian-ce-shi-bai-jie-jue</id>
    <content type="html"><![CDATA[<p>好久没弄Eclipse开发Android了，最近弄了个天猫的盒子，就拿出来玩玩，没想到新的SDK下不下来，悲剧。</p>

<h3>Ｑ：</h3>

<p>Failed to fetch URL <a href="https://dl-ssl.google.com/android/repository/repository.xml,">https://dl-ssl.google.com/android/repository/repository.xml,</a>
reason: HTTPS SSL error. You might want to force download through HTTP
in the settings.</p>

<h3>A:</h3>

<p>Check file <code>~/.android/androidtool.cfg</code></p>

<p>try to create it manually and add one line to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sdkman.force.http=true </span></code></pre></td></tr></table></div></figure>


<p>Reference:<a href="https://groups.google.com/forum/#!topic/android-developers/Y6RBY6jQfNk">https://groups.google.com/forum/#!topic/android-developers/Y6RBY6jQfNk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synergy on Mavericks (OSX 10.9) and enable assistive devices]]></title>
    <link href="http://saick.net/blog/2013/12/26/synergy-on-mavericks-osx-10-dot-9-and-enable-assistive-devices/"/>
    <updated>2013-12-26T10:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/26/synergy-on-mavericks-osx-10-dot-9-and-enable-assistive-devices</id>
    <content type="html"><![CDATA[<p><a href="http://superuser.com/questions/656912/synergy-on-mavericks-osx-10-9-and-enable-assistive-devices">Origin</a></p>

<h3>Question</h3>

<p>Mavericks handles accessibility on a per-application basis, so instead of enabling assistive devices (option does not even exist) carte-blanche, the app which makes the request shows up in a list in System Preferences > Security &amp; Privacy > Privacy where you can enable the access it&rsquo;s looking for.</p>

<p>Synergy, however, makes a check for the old style of assistive devices setting and fails to start.</p>

<!-- more -->


<h3>Answer</h3>

<p>From a terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo open /Applications/Synergy.app/Contents/MacOS/Synergy</span></code></pre></td></tr></table></div></figure>


<p>Then open OSX <em>System Preferences</em> and click <strong>Security and Privacy</strong>, then <strong>Accessibility</strong></p>

<p>Check the checkbox on for <strong>Terminal</strong> and <strong>Synergy</strong>.</p>

<p>You can then close Synergy and start it again in the background through the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Synergy.app/Contents/MacOS/Synergy &</span></code></pre></td></tr></table></div></figure>


<p>I expect this will be fixed in the next release (1.4.16 Beta)</p>

<p><a href="http://synergy-foss.org/osqa/questions/1999/error-1410-on-mac-1081">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX Server - Message Server 研究与故障解决方案]]></title>
    <link href="http://saick.net/blog/2013/12/21/osx-server-message-server-yan-jiu-yu-gu-zhang-jie-jue-fang-an/"/>
    <updated>2013-12-21T00:50:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/21/osx-server-message-server-yan-jiu-yu-gu-zhang-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>OSX Server是个出色的小团队服务端解决方案，前两个月发邮件说这个可以让我使用兑换券免费下一个，一定不能错过的机会，平时可是会卖很贵的啊</p>

<p>特分享一下使用的相关事项吧</p>

<!-- more -->


<h3>简介</h3>

<p>详见<a href="http://www.apple.com/cn/osx/server/">官方介绍</a></p>

<h3>使用过的服务</h3>

<ul>
<li>Message Server</li>
<li>DNS</li>
<li>FileShare</li>
<li>WebServer</li>
<li>Wiki</li>
<li>。。。</li>
</ul>


<p>可以说每个都能解决我们的某些需求，但是这些东西呢，没有OSX Server我们一样能找到替代方案。 但是苹果就是能在易用性上能帮我们做一些事。比如这个Wiki就比较简单实用</p>

<p>但是呢,有些也做的不是太好，比如Message Server</p>

<h3>Message Server</h3>

<h4>用户</h4>

<p>最开始在10.8上面直接搞上了，但是不知道怎么建用户（第一次玩Jabber，XMPP）
帮助文档不太好找，上链接，有写用户的使用。</p>

<p><a href="https://help.apple.com/advancedserveradmin/mac/3.0/#apd447EC2A9-7F7E-49B1-AEDD-144C189926C7">https://help.apple.com/advancedserveradmin/mac/3.0/#apd447EC2A9-7F7E-49B1-AEDD-144C189926C7</a>
见这段<em>Understand Messages screen names</em></p>

<h4>登录</h4>

<p>无论如何都登录不了，这个更是愁人。。。
也在上面的帮助文档里有说明，见这段<em>Server-to-server federation</em></p>

<p>需要在设置中把自己的域名也加进去（最好配置DNS，否则需要自己改hosts文件）</p>

<h4>还是登录不了。。</h4>

<p>自己的Mavericks（10.9）还是登录不了，可能是域名设来设去的吧，无论如何也搞不定，查Google也不太好找，找了一些检索词，最后还是放弃，自己搞。
看文档，日志会写入<strong>system.log</strong>, 打开Console，看到报错如下:</p>

<p><em>SASL callback for non-existing host&#8221;</em></p>

<p>Google之，解决方案如下</p>

<p><a href="https://discussions.apple.com/message/23948580#23948580">https://discussions.apple.com/message/23948580#23948580</a></p>

<p>这里面说的两个文件的路径还不太对，在这个目录下找那俩文件修改相关域名即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Library/Server/Messages/Config/jabberd</span></code></pre></td></tr></table></div></figure>


<h3>Message Server OK</h3>

<p>可以使用Mac 上面的Message直接登录，团队其它直接使用Server的DNS，这样就不用绑hosts了，然后使用rooms聊天室，这样系统内置了Message，而且还会比较及时的通知到，非常方便。</p>

<p><em>远离QQ吧。</em>  Good night!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库不同平台合并 lipo命令使用]]></title>
    <link href="http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong/"/>
    <updated>2013-12-17T23:54:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/17/ios-jing-tai-ku-bu-tong-ping-tai-he-bing-lipoming-ling-shi-yong</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>查看<em>lipo</em>详解</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man lipo</span></code></pre></td></tr></table></div></figure>


<p><strong>lipo &ndash; create or operate on universal files</strong></p>

<!-- more -->


<h3>Usage</h3>

<h4>Simple</h4>

<p><strong>lipo -create xxx_arm.a xxx_i386.a -output xxx_universal.a</strong></p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lipo -create /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphonesimulator/libPrint.a  /Users/pjk1129/Library/Developer/Xcode/DerivedData/Print-dgfkluumuexoxhcapzidtsmdgqcj/Build/Products/Release-iphoneos/libPrint.a  -output /Users/pjk1129/Desktop/libPrint.a</span></code></pre></td></tr></table></div></figure>


<h4>Shell</h4>

<p><em>libevent.sh</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>mkdir universal
</span><span class='line'>lipo -create simulator/libevent.a device/libevent.a -o universal/libevent.a
</span><span class='line'>lipo -create simulator/libevent_extra.a device/libevent_extra.a -o universal/libevent_extra.a
</span><span class='line'>lipo -create simulator/libevent_core.a device/libevent_core.a -o universal/libevent_core.a
</span><span class='line'>lipo -create simulator/libevent_pthreads.a device/libevent_pthreads.a -o universal/libevent_pthreads.a</span></code></pre></td></tr></table></div></figure>


<h3>Review Info</h3>

<p><strong>lipo -info xxx_universal.a</strong></p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lipo -info /Users/pjk1129/Desktop/libPrint.a </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite(FMDB) 线程安全 - 多线程处理]]></title>
    <link href="http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li/"/>
    <updated>2013-12-12T11:25:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/sqlite-xian-cheng-an-quan-duo-xian-cheng-chu-li</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常用到SQLite，CoreData也不错，但很多时候还是自己写sql，使用FMDB来处理。当然了，也可以不用FMDB，直接写处理，这个不解释。</p>

<p>但是，我们在数据库操作的时候，经常遇到多线程访问数据库的状况，常见的有几种处理方法：</p>

<ul>
<li>1, NSLock或类似方法加锁</li>
<li>2, FMDatabaseQueue</li>
<li>3, SQLITE_CONFIG_SERIALIZED</li>
</ul>


<p>下面我们来仔细看一下出现的问题以及相关的解决方案</p>

<!-- more -->


<h3>常见问题</h3>

<p>以使用FMDB为例：</p>

<p>The debugger says that the error occurs at [FMResultSet next] at the line, has <code>EXC_BAD_ACCESS</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rc = sqlite3_step(statement.statement);</span></code></pre></td></tr></table></div></figure>


<p>多线程访问的时候，会在这里报错。</p>

<p>如何解决呢？</p>

<h4>1. NSLock加锁（NSMutex）</h4>

<p>详见苹果官方文档：
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html">Threading Programming Guide</a></p>

<h4>2. FMDatabaseQueue</h4>

<p>这个是我在某项目中用到的，所有查询都走这里。
可能因为项目较复杂，用了这个还是会时候有问题，但稳定很多。可以有一些别的地方调用，没查清楚。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 相关引用
</span><span class='line'>_fmQueue = [FMDatabaseQueue databaseQueueWithPath:sqlitePath];
</span><span class='line'>
</span><span class='line'>// 查询数据
</span><span class='line'>- (FMResultSet *)executeQueryWithSQL:(NSString *)sql
</span><span class='line'>{
</span><span class='line'>  BFLogVerbose(@"executeQuery: %@", sql);
</span><span class='line'>  
</span><span class='line'>  __block FMResultSet *rs = nil;
</span><span class='line'>  __block dispatch_semaphore_t sem = dispatch_semaphore_create(0);
</span><span class='line'>  
</span><span class='line'>  [_fmQueue inDatabase:^(FMDatabase *fmdb){
</span><span class='line'>    FMResultSet *tmpRs = [fmdb executeQuery:sql];
</span><span class='line'>    rs = [FMResultSet resultSetWithStatement:tmpRs.statement usingParentDatabase:fmdb];
</span><span class='line'>    [tmpRs close];
</span><span class='line'>    dispatch_semaphore_signal(sem);
</span><span class='line'>  }];
</span><span class='line'>  
</span><span class='line'>  dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
</span><span class='line'>  dispatch_release(sem);
</span><span class='line'>  
</span><span class='line'>  return rs;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>3. SQLITE_CONFIG_SERIALIZED</h3>

<p>SQLite provides a much simpler serialization. By just setting the sqlite_config() option SQLITE_CONFIG_SERIALIZED you will probably avoid most of these kinds of headaches. I discovered this the hard way after fighting with threading issues for a long while.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (sqlite3_config(SQLITE_CONFIG_SERIALIZED) == SQLITE_ERROR) {
</span><span class='line'>        NSLog(@"couldn't set serialized mode");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参考：
<a href="http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0">http://stackoverflow.com/questions/3144700/exc-bad-access-when-using-sqlite-fmdb-and-threads-on-ios-4-0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode下的iOS单元测试]]></title>
    <link href="http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi/"/>
    <updated>2013-12-12T09:34:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/12/xcodexia-de-iosdan-yuan-ce-shi</id>
    <content type="html"><![CDATA[<p>XCode 内置了 OCUnit 单元测试框架，但目前最好用的测试框架应该是 GHUnit。通过 GHUnit + OCMock 组合，我们可以在 iOS 下进行较强大的单元测试功能。本文将演示如何在 XCode 4.2 下使用 OCUnit， GHUnit 和 OCMock 进行单元测试。</p>

<!-- more -->


<h3>OCUnit</h3>

<p>在 XCode 下新建一个 OCUnitProject 工程，选中 Include Unit Tests 选择框，</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332017455/" title="2013-12-12-1 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2805/11332017455_a9679dfeb5.jpg" width="500" height="337" alt="2013-12-12-1"></a></p>

<p>OCUnit 框架则会为我们自动添加 Unit Test 框架代码：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332111874/" title="2013-12-12-2 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5538/11332111874_82dae3bc52.jpg" width="430" height="381" alt="2013-12-12-2"></a></p>

<p>XCode 在 OCUnitProjectTests.m 中为我们自动生成了一个 Fail 的测试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testExample
</span><span class='line'>{
</span><span class='line'>    STFail(@"Unit tests are not implemented yet in OCUnitProjectTests");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>让我们来运行 Test，看看效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085666/" title="2013-12-12-3 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7321/11332085666_f398e1edd2.jpg" width="500" height="269" alt="2013-12-12-3"></a></p>

<p>从图中的红色下划线部分可以看出，测试没有通过，符合预期。我们只要像类 OCUnitProjectTests 一样编写继承自 SenTestCase 类的子类，在其中添加形式如：- (void) testXXX(); 的测试函数既可，注意必须是一个无参无返回类型且名称是以 test 为前缀的函数。
OCUnit 的有点是官方支持，于 XCode 集成的比较好。</p>

<h3>GHUnit</h3>

<p>GHUnit 是一个开源的单元测试框架，具有可视化界面，功能亦相当强大。Mark 写了一篇 OCUnit vs GHUnit 的文章，有兴趣的童鞋可以看一看。</p>

<p>OCMock 是由 Mulle Kybernetik 为 OS X 和 iOS 平台编写的遵循 mock object 理念的单元测试框架。</p>

<h4>下面来介绍如何配置 GHUnit 和 OCMock</h4>

<ul>
<li>1，首先，创建一个名为 GHUnitProject 的单视图应用程序，注意：不要选中 Include Unit Tests 选择框。然后运行，应该出现白屏。</li>
<li>2，添加新的 test target，选中左边的工程名，点击右侧的 Add Target，新增一个名为 Tests 的 Empty Application 应用程序，让其附属于 GHUnitProject注意：不要选中 Include Unit Tests 选择框。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332017205/" title="2013-12-12-4 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5477/11332017205_d39c81a057.jpg" width="500" height="346" alt="2013-12-12-4"></a>
<a href="http://www.flickr.com/photos/shjborage/11332017075/" title="2013-12-12-5 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7313/11332017075_e828e5525f.jpg" width="500" height="419" alt="2013-12-12-5"></a></p>

<ul>
<li>3，向 Tests 工程中（注意是 Tests 工程）添加 GHUnitIOS Framework。首先下载与 XCode 版本对应的 GHUnitIOS Framework。英文好的可以直接查看官方 iOS 版的安装文档：点此查看，跳过此第 3 节；否则请接着看。</li>
<li>3.1，解压 GHUnitIOS 框架到 GHUnitProject 下，让 GHUnitIOS.framework 与 Tests 在同一目录下。</li>
<li>3.2，回到 XCode，右击工程中的 Frameworks group，选中 Add Files to&hellip;菜单，选取 GHUnitIOS.framework ，注意 targets 要选择 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332111384/" title="2013-12-12-6 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7352/11332111384_e75ae2182a.jpg" width="478" height="500" alt="2013-12-12-6"></a></p>

<ul>
<li>3.3，设置 Tests 的 Build Settings：在 Other Linker Flags 中增加两个 flag： -ObjC 和 -all_load。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016815/" title="2013-12-12-7 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3811/11332016815_c8ba09db5d.jpg" width="500" height="316" alt="2013-12-12-7"></a></p>

<ul>
<li>3.1，删除 Tests 工程中的 UTSAppDelegate.h 和 UTSAppDelegate.m 两个文件；</li>
<li>3.2，修改 Tests 工程中的 main.m 为:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;UIKit/UIKit.h&gt;
</span><span class='line'>#import &lt;GHUnitIOS/GHUnitIOSAppDelegate.h&gt;
</span><span class='line'>int main(int argc, char *argv[])
</span><span class='line'>{
</span><span class='line'>    @autoreleasepool {
</span><span class='line'>        return UIApplicationMain(argc, argv, nil, NSStringFromClass([GHUnitIOSAppDelegate class]));
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>3.3，选择编译目标 Tests>iPhone 5.0 Simulator，编译运行，应该能得到如下效果。目前我们还没有编写任何实际测试，所以列表为空。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332085166/" title="2013-12-12-8 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2872/11332085166_39da2998f9.jpg" width="331" height="492" alt="2013-12-12-8"></a></p>

<p>4，编写 GHUnit 测试。向 Tests 工程中添加名为 GHUnitSampleTest 的 Objective C class。其内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GHUnitSampleTest.h
</span><span class='line'>#import &lt;GHUnitIOS/GHUnit.h&gt;
</span><span class='line'>@interface GHUnitSampleTest: GHTestCase
</span><span class='line'>{
</span><span class='line'>}
</span><span class='line'>@end
</span><span class='line'>GHUnitSampleTest.m
</span><span class='line'>#import "GHUnitSampleTest.h"
</span><span class='line'>@implementation GHUnitSampleTest
</span><span class='line'>- (void)testStrings
</span><span class='line'>{
</span><span class='line'>    NSString *string1 = @"a string";
</span><span class='line'>    GHTestLog(@"I can log to the GHUnit test console: %@", string1);
</span><span class='line'>    // Assert string1 is not NULL, with no custom error description
</span><span class='line'>    GHAssertNotNULL(string1, nil);
</span><span class='line'>    // Assert equal objects, add custom error description
</span><span class='line'>    NSString *string2 = @"a string";
</span><span class='line'>    GHAssertEqualObjects(string1, string2, @"A custom error message. string1 should be equal to: %@.", string2);
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>然后编译运行，点击 Run，效果如下：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332159843/" title="2013-12-12-9 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3788/11332159843_1766364257.jpg" width="322" height="488" alt="2013-12-12-9"></a></p>

<p>图中的 All 栏显示所以的测试，Failed 栏显示没有通过的测试。强大吧，GHUnit。你可以向 GHUnitSampleTest 添加新的测试，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testSimpleFail
</span><span class='line'>{
</span><span class='line'>    GHAssertTrue(NO, nil);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>我们可以向 Tests 添加更多测试类，只要该类是继承自 GHTestCase，且其中的测试方法都是无参无返回值且方法名字是以 test 为前缀即可。</p>

<h3>OCMock</h3>

<p>OCMock一般用来模拟一个类，创建其对象，并设置该对象。
下面我们来添加 OCMock。</p>

<ul>
<li>1，我们只能以静态库的方式来添加 OCMock。在 GHUnitTest 目录下新建 Libraries 目录，该目录是与 Tests 目录平级的。下载静态库文件，解压头文件至该目录下。
文件下载：头文件 libOCMock.a ，framework 文件：OCMock framework ，打开下载好的ocmock-1.77.dmg，拷贝其中的‘Release/Library/Headers/OCMock’ 目录至 Libraries 下。最终目录结构如下：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084876/" title="2013-12-12-10 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3782/11332084876_6f67df9eef.jpg" width="500" height="96" alt="2013-12-12-10"></a></p>

<ul>
<li>2，在 GHUnitTest 工程中新建名为 Libraries 的 group，导入libOCMock.a 和目录 OCMock，注意 target 是 Tests。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332084976/" title="2013-12-12-11 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3751/11332084976_15c36cbd88.jpg" width="479" height="500" alt="2013-12-12-11"></a></p>

<ul>
<li>3，设置 Tests 的 Build Setting。让 Libray Search Paths 包含 $(SRCROOT)/Libraries：</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11332016595/" title="2013-12-12-12 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2879/11332016595_f7fae82fb0.jpg" width="500" height="245" alt="2013-12-12-12"></a></p>

<p>在 Header Search Paths 中增加 $(SRCROOT)/Libraries，并选中 Recursive 选择框。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332084796/" title="2013-12-12-13 by EricShj, on Flickr"><img src="http://farm8.staticflickr.com/7320/11332084796_32d4115828.jpg" width="500" height="277" alt="2013-12-12-13"></a></p>

<ul>
<li>4，编写 OCMock 测试。向 Tests 工程中添加名为 OCMockSampleTest 的 Objective C class。其内容如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OCMockSampleTest.h
</span><span class='line'>#import &lt;GHUnitIOS/GHUnit.h&gt;
</span><span class='line'>@interface OCMockSampleTest : GHTestCase
</span><span class='line'>@end
</span><span class='line'>OCMockSampleTest.m
</span><span class='line'>#import "OCMockSampleTest.h"
</span><span class='line'>#import &lt;OCMock/OCMock.h&gt;
</span><span class='line'>@implementation OCMockSampleTest
</span><span class='line'>// simple test to ensure building, linking,
</span><span class='line'>// and running test case works in the project
</span><span class='line'>- (void)testOCMockPass
</span><span class='line'>{
</span><span class='line'>    id mock = [OCMockObject mockForClass:NSString.class];
</span><span class='line'>    [[[mock stub] andReturn:@"mocktest"] lowercaseString];
</span><span class='line'>    NSString *returnValue = [mock lowercaseString];
</span><span class='line'>    GHAssertEqualObjects(@"mocktest", returnValue,
</span><span class='line'>    @"Should have returned the expected string.");
</span><span class='line'>}
</span><span class='line'>- (void)testOCMockFail
</span><span class='line'>{
</span><span class='line'>    id mock = [OCMockObject mockForClass:NSString.class];
</span><span class='line'>    [[[mock stub] andReturn:@"mocktest"] lowercaseString];
</span><span class='line'>    NSString *returnValue = [mock lowercaseString];
</span><span class='line'>    GHAssertEqualObjects(@"thisIsTheWrongValueToCheck",
</span><span class='line'>    returnValue, @"Should have returned the expected string.");
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>编译运行，点击 Run，效果如下图。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11332016435/" title="2013-12-12-14 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5507/11332016435_6afa1b6912.jpg" width="322" height="480" alt="2013-12-12-14"></a></p>

<p>至此，iOS 下的OCUnit，GHUnit，OCMock 单元测试介绍就到此结束了。当然还有其他一些测试框架，比如 google 出品的 GTM。</p>

<p>参考资料：</p>

<p>OCMock: <a href="http://ocmock.org/">http://ocmock.org/</a></p>

<p>Unit Testing in Xcode 4- use OCUnit and SenTest instead of GHUnit</p>

<p>GHUnit Reference: <a href="http://gabriel.github.com/gh-unit/">http://gabriel.github.com/gh-unit/</a></p>

<p>转自：<a href="http://www.uml.org.cn/mobiledev/201201093.asp">http://www.uml.org.cn/mobiledev/201201093.asp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用icon font及自定义字体]]></title>
    <link href="http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font/"/>
    <updated>2013-12-11T21:42:00+08:00</updated>
    <id>http://saick.net/blog/2013/12/11/zai-ioszhong-shi-yong-icon-font</id>
    <content type="html"><![CDATA[<p>在开发阿里数据iOS版客户端的时候，由于项目进度很紧，项目里的所有图标都是用最平常的背景图片方案来实现。而为了要兼容普通屏与Retina屏的设备，苹果要求每个背景图都要以两种尺寸存(a.png和<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#97;&#x40;&#x32;&#x78;&#46;&#x70;&#x6e;&#103;">&#97;&#64;&#x32;&#x78;&#x2e;&#x70;&#x6e;&#103;</a>)，这让设计师们增加了成本，因为他们每次都得出两份背景图标。</p>

<p>现在在web开发上，icon font技术的应用很广泛，它不仅在解决多分辨率显示问题上很有成效，而且在使用它的时候还能降低不少设计和开发成本。</p>

<p>那么它能不能应用到ios开发上来呢？带着这个疑问，我在github上找到了FontasticIcons和ios-fontawesome，但是这两个OC包对icon资源封装都有限，而且扩展也不是很方便。</p>

<p>既然能在ios上使用icon font，那么怎么用呢？经过一番摸索，发现使用原理和自定义字体差不多，只有个别操作不太一样，接下来我给大家详细介绍一下。</p>

<!-- more -->


<h3>如何使用自定义字体</h3>

<p>在讲icon font之前，首先先来看看普通自定义字体是如何在ios中使用的，两个原理是一样的。这里以KaushanScript-Regular为例：</p>

<h4>Step 1: 导入字体文件</h4>

<p>将字体文件拖入项目（ios支持的字体格式有：.ttf、.otf，其他格式不确定）：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323775276/" title="2013-12-11-01 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2846/11323775276_b14a547aa1.jpg" width="500" height="354" alt="2013-12-11-01"></a></p>

<p>然后再在项目的资源池中确认字体文件是否加入项目，打开xcode项目的Build Phases中查看：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323859283/" title="2013-12-11-02 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3816/11323859283_dff602ee81.jpg" width="500" height="249" alt="2013-12-11-02"></a></p>

<h4>Step 2: 配置.plist文件</h4>

<p>在.plist文件中注册新加入的字体，.plist文件往往以“[appname]-Info.plist”的形式存在于“Supporting Files”文件夹内。 在.plist文件中添加新属性“Fonts provided by application”，该属性的值是一个数组，这意味着可以在这里注册多个字体。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323790974/" title="2013-12-11-03 by EricShj, on Flickr"><img src="http://farm4.staticflickr.com/3692/11323790974_9beda31ccb.jpg" width="500" height="209" alt="2013-12-11-03"></a></p>

<h4>Step 3: 找到字体集名称</h4>

<p>注册完，我们需要检测是否注册成功且取得新字体名称，检测方法就是把所有安装了的字体都打印出来，看看新注册的字体是否在里面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (NSString* family in [UIFont familyNames]) 
</span><span class='line'>{ 
</span><span class='line'>  NSLog(@"%@", family); 
</span><span class='line'>  for (NSString* name in [UIFont fontNamesForFamilyName: family]) 
</span><span class='line'>  { 
</span><span class='line'>         NSLog(@"  %@", name); 
</span><span class='line'>    } 
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>运行完，查看控制台里打印出的所有字体集中是否有新注册的字体，如果有，说明注册成功，并将字体名（在这里是“Kaushan Script”）记住留到后面用。</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323787836/" title="2013-12-11-04 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5481/11323787836_e8fc5ed22a.jpg" width="500" height="392" alt="2013-12-11-04"></a></p>

<h3>Step 4: 使用新字体</h3>

<p>最后，就是使用你最新加入的字体啦：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)]; 
</span><span class='line'>label.font = [UIFont fontWithName:@"Kaushan Script" size:35]; 
</span><span class='line'>label.text = @"icon font"; 
</span><span class='line'>label.textColor = UIColorFromRGB(0xFF7300); 
</span><span class='line'>[self.view addSubview:label]; </span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<p><a href="http://www.flickr.com/photos/shjborage/11323858493/" title="2013-12-11-05 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5471/11323858493_39eaf9269b.jpg" width="276" height="113" alt="2013-12-11-05"></a></p>

<h3>开始使用icon font</h3>

<p>图标字体也是字体，使用方式和上面所说的差不多，只是在套用上有些差别；这里拿fontello的图标字体库为例。</p>

<ul>
<li>1.选择需要的图标
在fontello的图标字体库选择自己需要的图标，并下载生成的字体文件。</li>
<li>2.按照上面的步骤将图标字体注册到项目中</li>
<li>3.找到图标对应的unicode码
使用FontLab Studio 5工具打开字体文件（比如fontello.ttf），就可以看到图标与unicode码之间的对应关系啦。</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323774246/" title="2013-12-11-06 by EricShj, on Flickr"><img src="http://farm3.staticflickr.com/2824/11323774246_65813b1aab.jpg" width="500" height="126" alt="2013-12-11-06"></a></p>

<ul>
<li>4.使用图标</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 60, 300, 50)]; 
</span><span class='line'>label.font = [UIFont fontWithName:@"fontello" size:35]; 
</span><span class='line'>label.text = @"\U0000E802 \U0000E801 \U0000E803 \U0000E804 \U0000E805 \U0000E81A"; 
</span><span class='line'>label.textColor = UIColorFromRGB(0xFF7300); 
</span><span class='line'>[self.view addSubview:label]; </span></code></pre></td></tr></table></div></figure>


<p>在Objective-C中，自定义的unicode码需要以“\U0000E802”这样的格式存在。</p>

<ul>
<li>5.使用emoji表情库
这里还可以使用苹果emoji表情库的图标，这里不需要新加字体库，只要找到emoji图标和unicode之间的对应关系就好，但是这些图标都不是矢量图，缩放请自重。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UILabel *label5 = [[UILabel alloc] initWithFrame:CGRectMake(10, 480, 300, 50)]; 
</span><span class='line'>label5.text = @"\U0000e42a\U0000e525\U0000e41c"; 
</span><span class='line'>[self.view addSubview:label5]; </span></code></pre></td></tr></table></div></figure>


<ul>
<li>6.效果</li>
</ul>


<p><a href="http://www.flickr.com/photos/shjborage/11323858703/" title="2013-12-11-07 by EricShj, on Flickr"><img src="http://farm6.staticflickr.com/5526/11323858703_820c5b3eef.jpg" width="366" height="500" alt="2013-12-11-07"></a></p>

<ul>
<li>7.使用自制图标字体</li>
<li><p>如果上面介绍的图标库还满足不了你的需求，或者需要的图标分布在多个图标库而不能集中到一个字体文件中；那么你可能需要自己去制作图标字体文件了。</p></li>
</ul>


<h3>总结</h3>

<p>这样，在iOS开发上，不仅可以直接去开源图标库找现成的图标用到项目中，而且还可以轻松地改变图标的颜色、大小，相信可以解放不少设计师和工程师的工作量。</p>

<p>图标字体库
<a href="http://fontello.com/">fontello</a>
etao图标字体库（这里有个问题要注意，etao的图标字体名为“Untitled1”，是不是生成字体的同学疏忽啦？）
IcoMoon
<a href="http://www.easyapns.com/iphone-emoji-alerts">emoji表情库</a></p>

<p>参考资料</p>

<p><a href="http://codewithchris.com/common-mistakes-with-adding-custom-fonts-to-your-ios-app/">Common Mistakes With Adding Custom Fonts to Your iOS App</a></p>

<p><a href="http://ux.etao.com/posts/401">Icon font 实践</a></p>

<p>FontasticIcons</p>

<p>ios-fontawesome</p>

<p><a href="https://coderwall.com/p/wrb3pw">Custom Unicode Characters in Objective-C</a></p>

<p><a href="http://www.qianduan.net/css3-icon-font-guide.html">CSS3 icon font完全指南</a></p>

<p>《转》</p>
]]></content>
  </entry>
  
</feed>
